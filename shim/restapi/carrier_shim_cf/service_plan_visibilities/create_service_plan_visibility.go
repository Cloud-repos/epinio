// Code generated by go-swagger; DO NOT EDIT.

package service_plan_visibilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateServicePlanVisibilityHandlerFunc turns a function with the right signature into a create service plan visibility handler
type CreateServicePlanVisibilityHandlerFunc func(CreateServicePlanVisibilityParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServicePlanVisibilityHandlerFunc) Handle(params CreateServicePlanVisibilityParams) middleware.Responder {
	return fn(params)
}

// CreateServicePlanVisibilityHandler interface for that can handle valid create service plan visibility params
type CreateServicePlanVisibilityHandler interface {
	Handle(CreateServicePlanVisibilityParams) middleware.Responder
}

// NewCreateServicePlanVisibility creates a new http.Handler for the create service plan visibility operation
func NewCreateServicePlanVisibility(ctx *middleware.Context, handler CreateServicePlanVisibilityHandler) *CreateServicePlanVisibility {
	return &CreateServicePlanVisibility{Context: ctx, Handler: handler}
}

/*CreateServicePlanVisibility swagger:route POST /service_plan_visibilities servicePlanVisibilities createServicePlanVisibility

Creating a Service Plan Visibility

curl --insecure -i %s/v2/service_plan_visibilities -X POST -H 'Authorization: %s' -d '%s'

*/
type CreateServicePlanVisibility struct {
	Context *middleware.Context
	Handler CreateServicePlanVisibilityHandler
}

func (o *CreateServicePlanVisibility) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateServicePlanVisibilityParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
