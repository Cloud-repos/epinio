// Code generated by go-swagger; DO NOT EDIT.

package service_plan_visibilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteServicePlanVisibilitiesHandlerFunc turns a function with the right signature into a delete service plan visibilities handler
type DeleteServicePlanVisibilitiesHandlerFunc func(DeleteServicePlanVisibilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServicePlanVisibilitiesHandlerFunc) Handle(params DeleteServicePlanVisibilitiesParams) middleware.Responder {
	return fn(params)
}

// DeleteServicePlanVisibilitiesHandler interface for that can handle valid delete service plan visibilities params
type DeleteServicePlanVisibilitiesHandler interface {
	Handle(DeleteServicePlanVisibilitiesParams) middleware.Responder
}

// NewDeleteServicePlanVisibilities creates a new http.Handler for the delete service plan visibilities operation
func NewDeleteServicePlanVisibilities(ctx *middleware.Context, handler DeleteServicePlanVisibilitiesHandler) *DeleteServicePlanVisibilities {
	return &DeleteServicePlanVisibilities{Context: ctx, Handler: handler}
}

/*DeleteServicePlanVisibilities swagger:route DELETE /service_plan_visibilities/{guid} servicePlanVisibilities deleteServicePlanVisibilities

Delete a Particular Service Plan Visibilities

curl --insecure -i %s/v2/service_plan_visibilities/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteServicePlanVisibilities struct {
	Context *middleware.Context
	Handler DeleteServicePlanVisibilitiesHandler
}

func (o *DeleteServicePlanVisibilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteServicePlanVisibilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
