// Code generated by go-swagger; DO NOT EDIT.

package service_plan_visibilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllServicePlanVisibilitiesHandlerFunc turns a function with the right signature into a list all service plan visibilities handler
type ListAllServicePlanVisibilitiesHandlerFunc func(ListAllServicePlanVisibilitiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllServicePlanVisibilitiesHandlerFunc) Handle(params ListAllServicePlanVisibilitiesParams) middleware.Responder {
	return fn(params)
}

// ListAllServicePlanVisibilitiesHandler interface for that can handle valid list all service plan visibilities params
type ListAllServicePlanVisibilitiesHandler interface {
	Handle(ListAllServicePlanVisibilitiesParams) middleware.Responder
}

// NewListAllServicePlanVisibilities creates a new http.Handler for the list all service plan visibilities operation
func NewListAllServicePlanVisibilities(ctx *middleware.Context, handler ListAllServicePlanVisibilitiesHandler) *ListAllServicePlanVisibilities {
	return &ListAllServicePlanVisibilities{Context: ctx, Handler: handler}
}

/*ListAllServicePlanVisibilities swagger:route GET /service_plan_visibilities servicePlanVisibilities listAllServicePlanVisibilities

List all Service Plan Visibilities

curl --insecure -i %s/v2/service_plan_visibilities -X GET -H 'Authorization: %s'

*/
type ListAllServicePlanVisibilities struct {
	Context *middleware.Context
	Handler ListAllServicePlanVisibilitiesHandler
}

func (o *ListAllServicePlanVisibilities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllServicePlanVisibilitiesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
