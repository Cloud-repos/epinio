// Code generated by go-swagger; DO NOT EDIT.

package app_usage_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveAppUsageEventHandlerFunc turns a function with the right signature into a retrieve app usage event handler
type RetrieveAppUsageEventHandlerFunc func(RetrieveAppUsageEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveAppUsageEventHandlerFunc) Handle(params RetrieveAppUsageEventParams) middleware.Responder {
	return fn(params)
}

// RetrieveAppUsageEventHandler interface for that can handle valid retrieve app usage event params
type RetrieveAppUsageEventHandler interface {
	Handle(RetrieveAppUsageEventParams) middleware.Responder
}

// NewRetrieveAppUsageEvent creates a new http.Handler for the retrieve app usage event operation
func NewRetrieveAppUsageEvent(ctx *middleware.Context, handler RetrieveAppUsageEventHandler) *RetrieveAppUsageEvent {
	return &RetrieveAppUsageEvent{Context: ctx, Handler: handler}
}

/*RetrieveAppUsageEvent swagger:route GET /app_usage_events/{guid} appUsageEvents retrieveAppUsageEvent

Retrieve a Particular App Usage Event

curl --insecure -i %s/v2/app_usage_events/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveAppUsageEvent struct {
	Context *middleware.Context
	Handler RetrieveAppUsageEventHandler
}

func (o *RetrieveAppUsageEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveAppUsageEventParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
