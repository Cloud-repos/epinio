// Code generated by go-swagger; DO NOT EDIT.

package app_usage_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PurgeAndReseedAppUsageEventsHandlerFunc turns a function with the right signature into a purge and reseed app usage events handler
type PurgeAndReseedAppUsageEventsHandlerFunc func(PurgeAndReseedAppUsageEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PurgeAndReseedAppUsageEventsHandlerFunc) Handle(params PurgeAndReseedAppUsageEventsParams) middleware.Responder {
	return fn(params)
}

// PurgeAndReseedAppUsageEventsHandler interface for that can handle valid purge and reseed app usage events params
type PurgeAndReseedAppUsageEventsHandler interface {
	Handle(PurgeAndReseedAppUsageEventsParams) middleware.Responder
}

// NewPurgeAndReseedAppUsageEvents creates a new http.Handler for the purge and reseed app usage events operation
func NewPurgeAndReseedAppUsageEvents(ctx *middleware.Context, handler PurgeAndReseedAppUsageEventsHandler) *PurgeAndReseedAppUsageEvents {
	return &PurgeAndReseedAppUsageEvents{Context: ctx, Handler: handler}
}

/*PurgeAndReseedAppUsageEvents swagger:route POST /app_usage_events/destructively_purge_all_and_reseed_started_apps appUsageEvents purgeAndReseedAppUsageEvents

Purge and reseed App Usage Events

curl --insecure -i %s/v2/app_usage_events/destructively_purge_all_and_reseed_started_apps -X POST -H 'Authorization: %s'

*/
type PurgeAndReseedAppUsageEvents struct {
	Context *middleware.Context
	Handler PurgeAndReseedAppUsageEventsHandler
}

func (o *PurgeAndReseedAppUsageEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPurgeAndReseedAppUsageEventsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
