// Code generated by go-swagger; DO NOT EDIT.

package app_usage_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllAppUsageEventsHandlerFunc turns a function with the right signature into a list all app usage events handler
type ListAllAppUsageEventsHandlerFunc func(ListAllAppUsageEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllAppUsageEventsHandlerFunc) Handle(params ListAllAppUsageEventsParams) middleware.Responder {
	return fn(params)
}

// ListAllAppUsageEventsHandler interface for that can handle valid list all app usage events params
type ListAllAppUsageEventsHandler interface {
	Handle(ListAllAppUsageEventsParams) middleware.Responder
}

// NewListAllAppUsageEvents creates a new http.Handler for the list all app usage events operation
func NewListAllAppUsageEvents(ctx *middleware.Context, handler ListAllAppUsageEventsHandler) *ListAllAppUsageEvents {
	return &ListAllAppUsageEvents{Context: ctx, Handler: handler}
}

/*ListAllAppUsageEvents swagger:route GET /app_usage_events appUsageEvents listAllAppUsageEvents

List all App Usage Events

curl --insecure -i %s/v2/app_usage_events -X GET -H 'Authorization: %s'

*/
type ListAllAppUsageEvents struct {
	Context *middleware.Context
	Handler ListAllAppUsageEventsHandler
}

func (o *ListAllAppUsageEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllAppUsageEventsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
