// Code generated by go-swagger; DO NOT EDIT.

package service_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveServicePlanHandlerFunc turns a function with the right signature into a retrieve service plan handler
type RetrieveServicePlanHandlerFunc func(RetrieveServicePlanParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveServicePlanHandlerFunc) Handle(params RetrieveServicePlanParams) middleware.Responder {
	return fn(params)
}

// RetrieveServicePlanHandler interface for that can handle valid retrieve service plan params
type RetrieveServicePlanHandler interface {
	Handle(RetrieveServicePlanParams) middleware.Responder
}

// NewRetrieveServicePlan creates a new http.Handler for the retrieve service plan operation
func NewRetrieveServicePlan(ctx *middleware.Context, handler RetrieveServicePlanHandler) *RetrieveServicePlan {
	return &RetrieveServicePlan{Context: ctx, Handler: handler}
}

/*RetrieveServicePlan swagger:route GET /service_plans/{guid} servicePlans retrieveServicePlan

Retrieve a Particular Service Plan

curl --insecure -i %s/v2/service_plans/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveServicePlan struct {
	Context *middleware.Context
	Handler RetrieveServicePlanHandler
}

func (o *RetrieveServicePlan) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveServicePlanParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
