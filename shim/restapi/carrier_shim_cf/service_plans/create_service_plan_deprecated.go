// Code generated by go-swagger; DO NOT EDIT.

package service_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateServicePlanDeprecatedHandlerFunc turns a function with the right signature into a create service plan deprecated handler
type CreateServicePlanDeprecatedHandlerFunc func(CreateServicePlanDeprecatedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServicePlanDeprecatedHandlerFunc) Handle(params CreateServicePlanDeprecatedParams) middleware.Responder {
	return fn(params)
}

// CreateServicePlanDeprecatedHandler interface for that can handle valid create service plan deprecated params
type CreateServicePlanDeprecatedHandler interface {
	Handle(CreateServicePlanDeprecatedParams) middleware.Responder
}

// NewCreateServicePlanDeprecated creates a new http.Handler for the create service plan deprecated operation
func NewCreateServicePlanDeprecated(ctx *middleware.Context, handler CreateServicePlanDeprecatedHandler) *CreateServicePlanDeprecated {
	return &CreateServicePlanDeprecated{Context: ctx, Handler: handler}
}

/*CreateServicePlanDeprecated swagger:route POST /service_plans servicePlans createServicePlanDeprecated

Creating a Service Plan (deprecated)

curl --insecure -i %s/v2/service_plans -X POST -H 'Authorization: %s' -d '%s'

*/
type CreateServicePlanDeprecated struct {
	Context *middleware.Context
	Handler CreateServicePlanDeprecatedHandler
}

func (o *CreateServicePlanDeprecated) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateServicePlanDeprecatedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
