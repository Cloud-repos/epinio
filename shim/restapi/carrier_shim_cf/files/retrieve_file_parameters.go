// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRetrieveFileParams creates a new RetrieveFileParams object
// no default values defined in spec.
func NewRetrieveFileParams() RetrieveFileParams {

	return RetrieveFileParams{}
}

// RetrieveFileParams contains all the bound params for the retrieve file operation
// typically these are obtained from a http.Request
//
// swagger:parameters retrieveFile
type RetrieveFileParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The app_guid parameter is used as a part of the request URL: '/v2/apps/:app_guid/instances/:instance_index/files/:file_path'
	  Required: true
	  In: path
	*/
	AppGUID string
	/*The file_path parameter is used as a part of the request URL: '/v2/apps/:app_guid/instances/:instance_index/files/:file_path'
	  Required: true
	  In: path
	*/
	FilePath string
	/*The instance_index parameter is used as a part of the request URL: '/v2/apps/:app_guid/instances/:instance_index/files/:file_path'
	  Required: true
	  In: path
	*/
	InstanceIndex int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRetrieveFileParams() beforehand.
func (o *RetrieveFileParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rAppGUID, rhkAppGUID, _ := route.Params.GetOK("app_guid")
	if err := o.bindAppGUID(rAppGUID, rhkAppGUID, route.Formats); err != nil {
		res = append(res, err)
	}

	rFilePath, rhkFilePath, _ := route.Params.GetOK("file_path")
	if err := o.bindFilePath(rFilePath, rhkFilePath, route.Formats); err != nil {
		res = append(res, err)
	}

	rInstanceIndex, rhkInstanceIndex, _ := route.Params.GetOK("instance_index")
	if err := o.bindInstanceIndex(rInstanceIndex, rhkInstanceIndex, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAppGUID binds and validates parameter AppGUID from path.
func (o *RetrieveFileParams) bindAppGUID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.AppGUID = raw

	return nil
}

// bindFilePath binds and validates parameter FilePath from path.
func (o *RetrieveFileParams) bindFilePath(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.FilePath = raw

	return nil
}

// bindInstanceIndex binds and validates parameter InstanceIndex from path.
func (o *RetrieveFileParams) bindInstanceIndex(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("instance_index", "path", "int64", raw)
	}
	o.InstanceIndex = value

	return nil
}
