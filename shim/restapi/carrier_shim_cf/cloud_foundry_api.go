// Code generated by go-swagger; DO NOT EDIT.

package carrier_shim_cf

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/app_usage_events"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/apps"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/auth"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/buildpacks"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/domains_deprecated"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/environment_variable_groups"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/events"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/feature_flags"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/files"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/info"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/jobs"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/organization_quota_definitions"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/organizations"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/private_domains"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/resource_match"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/routes"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/security_group_running_defaults"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/security_group_staging_defaults"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/security_groups"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_auth_tokens_deprecated"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_bindings"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_brokers"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_instances"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_plan_visibilities"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_plans"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/service_usage_events_experimental"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/services"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/shared_domains"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/space_quota_definitions"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/spaces"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/stacks"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/user_provided_service_instances"
	"github.com/suse/carrier/shim/restapi/carrier_shim_cf/users"
)

// NewCloudFoundryAPI creates a new CloudFoundry instance
func NewCloudFoundryAPI(spec *loads.Document) *CloudFoundryAPI {
	return &CloudFoundryAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		UrlformConsumer:       runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		AuthGetAuthLoginHandler: auth.GetAuthLoginHandlerFunc(func(params auth.GetAuthLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.GetAuthLogin has not yet been implemented")
		}),
		AuthPostAuthOauthTokenHandler: auth.PostAuthOauthTokenHandlerFunc(func(params auth.PostAuthOauthTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.PostAuthOauthToken has not yet been implemented")
		}),
		RoutesAssociateAppWithRouteHandler: routes.AssociateAppWithRouteHandlerFunc(func(params routes.AssociateAppWithRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.AssociateAppWithRoute has not yet been implemented")
		}),
		UsersAssociateAuditedOrganizationWithUserHandler: users.AssociateAuditedOrganizationWithUserHandlerFunc(func(params users.AssociateAuditedOrganizationWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateAuditedOrganizationWithUser has not yet been implemented")
		}),
		UsersAssociateAuditedSpaceWithUserHandler: users.AssociateAuditedSpaceWithUserHandlerFunc(func(params users.AssociateAuditedSpaceWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateAuditedSpaceWithUser has not yet been implemented")
		}),
		OrganizationsAssociateAuditorWithOrganizationHandler: organizations.AssociateAuditorWithOrganizationHandlerFunc(func(params organizations.AssociateAuditorWithOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.AssociateAuditorWithOrganization has not yet been implemented")
		}),
		SpacesAssociateAuditorWithSpaceHandler: spaces.AssociateAuditorWithSpaceHandlerFunc(func(params spaces.AssociateAuditorWithSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.AssociateAuditorWithSpace has not yet been implemented")
		}),
		UsersAssociateBillingManagedOrganizationWithUserHandler: users.AssociateBillingManagedOrganizationWithUserHandlerFunc(func(params users.AssociateBillingManagedOrganizationWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateBillingManagedOrganizationWithUser has not yet been implemented")
		}),
		OrganizationsAssociateBillingManagerWithOrganizationHandler: organizations.AssociateBillingManagerWithOrganizationHandlerFunc(func(params organizations.AssociateBillingManagerWithOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.AssociateBillingManagerWithOrganization has not yet been implemented")
		}),
		SpacesAssociateDeveloperWithSpaceHandler: spaces.AssociateDeveloperWithSpaceHandlerFunc(func(params spaces.AssociateDeveloperWithSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.AssociateDeveloperWithSpace has not yet been implemented")
		}),
		UsersAssociateManagedOrganizationWithUserHandler: users.AssociateManagedOrganizationWithUserHandlerFunc(func(params users.AssociateManagedOrganizationWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateManagedOrganizationWithUser has not yet been implemented")
		}),
		UsersAssociateManagedSpaceWithUserHandler: users.AssociateManagedSpaceWithUserHandlerFunc(func(params users.AssociateManagedSpaceWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateManagedSpaceWithUser has not yet been implemented")
		}),
		OrganizationsAssociateManagerWithOrganizationHandler: organizations.AssociateManagerWithOrganizationHandlerFunc(func(params organizations.AssociateManagerWithOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.AssociateManagerWithOrganization has not yet been implemented")
		}),
		SpacesAssociateManagerWithSpaceHandler: spaces.AssociateManagerWithSpaceHandlerFunc(func(params spaces.AssociateManagerWithSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.AssociateManagerWithSpace has not yet been implemented")
		}),
		UsersAssociateOrganizationWithUserHandler: users.AssociateOrganizationWithUserHandlerFunc(func(params users.AssociateOrganizationWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateOrganizationWithUser has not yet been implemented")
		}),
		AppsAssociateRouteWithAppHandler: apps.AssociateRouteWithAppHandlerFunc(func(params apps.AssociateRouteWithAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.AssociateRouteWithApp has not yet been implemented")
		}),
		SpacesAssociateSecurityGroupWithSpaceHandler: spaces.AssociateSecurityGroupWithSpaceHandlerFunc(func(params spaces.AssociateSecurityGroupWithSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.AssociateSecurityGroupWithSpace has not yet been implemented")
		}),
		SecurityGroupsAssociateSpaceWithSecurityGroupHandler: security_groups.AssociateSpaceWithSecurityGroupHandlerFunc(func(params security_groups.AssociateSpaceWithSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.AssociateSpaceWithSecurityGroup has not yet been implemented")
		}),
		SpaceQuotaDefinitionsAssociateSpaceWithSpaceQuotaDefinitionHandler: space_quota_definitions.AssociateSpaceWithSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.AssociateSpaceWithSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.AssociateSpaceWithSpaceQuotaDefinition has not yet been implemented")
		}),
		UsersAssociateSpaceWithUserHandler: users.AssociateSpaceWithUserHandlerFunc(func(params users.AssociateSpaceWithUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.AssociateSpaceWithUser has not yet been implemented")
		}),
		OrganizationsAssociateUserWithOrganizationHandler: organizations.AssociateUserWithOrganizationHandlerFunc(func(params organizations.AssociateUserWithOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.AssociateUserWithOrganization has not yet been implemented")
		}),
		RoutesCheckRouteExistsHandler: routes.CheckRouteExistsHandlerFunc(func(params routes.CheckRouteExistsParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.CheckRouteExists has not yet been implemented")
		}),
		AppsCopyAppBitsForAppHandler: apps.CopyAppBitsForAppHandlerFunc(func(params apps.CopyAppBitsForAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.CopyAppBitsForApp has not yet been implemented")
		}),
		AppsCreateAppHandler: apps.CreateAppHandlerFunc(func(params apps.CreateAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.CreateApp has not yet been implemented")
		}),
		OrganizationsCreateOrganizationHandler: organizations.CreateOrganizationHandlerFunc(func(params organizations.CreateOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.CreateOrganization has not yet been implemented")
		}),
		OrganizationQuotaDefinitionsCreateOrganizationQuotaDefinitionHandler: organization_quota_definitions.CreateOrganizationQuotaDefinitionHandlerFunc(func(params organization_quota_definitions.CreateOrganizationQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation organization_quota_definitions.CreateOrganizationQuotaDefinition has not yet been implemented")
		}),
		PrivateDomainsCreatePrivateDomainOwnedByGivenOrganizationHandler: private_domains.CreatePrivateDomainOwnedByGivenOrganizationHandlerFunc(func(params private_domains.CreatePrivateDomainOwnedByGivenOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation private_domains.CreatePrivateDomainOwnedByGivenOrganization has not yet been implemented")
		}),
		RoutesCreateRouteHandler: routes.CreateRouteHandlerFunc(func(params routes.CreateRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.CreateRoute has not yet been implemented")
		}),
		SecurityGroupsCreateSecurityGroupHandler: security_groups.CreateSecurityGroupHandlerFunc(func(params security_groups.CreateSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.CreateSecurityGroup has not yet been implemented")
		}),
		ServiceBindingsCreateServiceBindingHandler: service_bindings.CreateServiceBindingHandlerFunc(func(params service_bindings.CreateServiceBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation service_bindings.CreateServiceBinding has not yet been implemented")
		}),
		ServiceBrokersCreateServiceBrokerHandler: service_brokers.CreateServiceBrokerHandlerFunc(func(params service_brokers.CreateServiceBrokerParams) middleware.Responder {
			return middleware.NotImplemented("operation service_brokers.CreateServiceBroker has not yet been implemented")
		}),
		ServicesCreateServiceDeprecatedHandler: services.CreateServiceDeprecatedHandlerFunc(func(params services.CreateServiceDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation services.CreateServiceDeprecated has not yet been implemented")
		}),
		ServiceInstancesCreateServiceInstanceHandler: service_instances.CreateServiceInstanceHandlerFunc(func(params service_instances.CreateServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.CreateServiceInstance has not yet been implemented")
		}),
		ServicePlansCreateServicePlanDeprecatedHandler: service_plans.CreateServicePlanDeprecatedHandlerFunc(func(params service_plans.CreateServicePlanDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plans.CreateServicePlanDeprecated has not yet been implemented")
		}),
		ServicePlanVisibilitiesCreateServicePlanVisibilityHandler: service_plan_visibilities.CreateServicePlanVisibilityHandlerFunc(func(params service_plan_visibilities.CreateServicePlanVisibilityParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plan_visibilities.CreateServicePlanVisibility has not yet been implemented")
		}),
		SharedDomainsCreateSharedDomainHandler: shared_domains.CreateSharedDomainHandlerFunc(func(params shared_domains.CreateSharedDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation shared_domains.CreateSharedDomain has not yet been implemented")
		}),
		SpacesCreateSpaceHandler: spaces.CreateSpaceHandlerFunc(func(params spaces.CreateSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.CreateSpace has not yet been implemented")
		}),
		SpaceQuotaDefinitionsCreateSpaceQuotaDefinitionHandler: space_quota_definitions.CreateSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.CreateSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.CreateSpaceQuotaDefinition has not yet been implemented")
		}),
		UsersCreateUserHandler: users.CreateUserHandlerFunc(func(params users.CreateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.CreateUser has not yet been implemented")
		}),
		UserProvidedServiceInstancesCreateUserProvidedServiceInstanceHandler: user_provided_service_instances.CreateUserProvidedServiceInstanceHandlerFunc(func(params user_provided_service_instances.CreateUserProvidedServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation user_provided_service_instances.CreateUserProvidedServiceInstance has not yet been implemented")
		}),
		BuildpacksCreatesAdminBuildpackHandler: buildpacks.CreatesAdminBuildpackHandlerFunc(func(params buildpacks.CreatesAdminBuildpackParams) middleware.Responder {
			return middleware.NotImplemented("operation buildpacks.CreatesAdminBuildpack has not yet been implemented")
		}),
		DomainsDeprecatedCreatesDomainOwnedByGivenOrganizationDeprecatedHandler: domains_deprecated.CreatesDomainOwnedByGivenOrganizationDeprecatedHandlerFunc(func(params domains_deprecated.CreatesDomainOwnedByGivenOrganizationDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation domains_deprecated.CreatesDomainOwnedByGivenOrganizationDeprecated has not yet been implemented")
		}),
		AppsDeleteAppHandler: apps.DeleteAppHandlerFunc(func(params apps.DeleteAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.DeleteApp has not yet been implemented")
		}),
		BuildpacksDeleteBuildpackHandler: buildpacks.DeleteBuildpackHandlerFunc(func(params buildpacks.DeleteBuildpackParams) middleware.Responder {
			return middleware.NotImplemented("operation buildpacks.DeleteBuildpack has not yet been implemented")
		}),
		DomainsDeprecatedDeleteDomainDeprecatedHandler: domains_deprecated.DeleteDomainDeprecatedHandlerFunc(func(params domains_deprecated.DeleteDomainDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation domains_deprecated.DeleteDomainDeprecated has not yet been implemented")
		}),
		OrganizationsDeleteOrganizationHandler: organizations.DeleteOrganizationHandlerFunc(func(params organizations.DeleteOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.DeleteOrganization has not yet been implemented")
		}),
		OrganizationQuotaDefinitionsDeleteOrganizationQuotaDefinitionHandler: organization_quota_definitions.DeleteOrganizationQuotaDefinitionHandlerFunc(func(params organization_quota_definitions.DeleteOrganizationQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation organization_quota_definitions.DeleteOrganizationQuotaDefinition has not yet been implemented")
		}),
		PrivateDomainsDeletePrivateDomainHandler: private_domains.DeletePrivateDomainHandlerFunc(func(params private_domains.DeletePrivateDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation private_domains.DeletePrivateDomain has not yet been implemented")
		}),
		RoutesDeleteRouteHandler: routes.DeleteRouteHandlerFunc(func(params routes.DeleteRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.DeleteRoute has not yet been implemented")
		}),
		SecurityGroupsDeleteSecurityGroupHandler: security_groups.DeleteSecurityGroupHandlerFunc(func(params security_groups.DeleteSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.DeleteSecurityGroup has not yet been implemented")
		}),
		ServicesDeleteServiceHandler: services.DeleteServiceHandlerFunc(func(params services.DeleteServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation services.DeleteService has not yet been implemented")
		}),
		ServiceAuthTokensDeprecatedDeleteServiceAuthTokenDeprecatedHandler: service_auth_tokens_deprecated.DeleteServiceAuthTokenDeprecatedHandlerFunc(func(params service_auth_tokens_deprecated.DeleteServiceAuthTokenDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation service_auth_tokens_deprecated.DeleteServiceAuthTokenDeprecated has not yet been implemented")
		}),
		ServiceBindingsDeleteServiceBindingHandler: service_bindings.DeleteServiceBindingHandlerFunc(func(params service_bindings.DeleteServiceBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation service_bindings.DeleteServiceBinding has not yet been implemented")
		}),
		ServiceBrokersDeleteServiceBrokerHandler: service_brokers.DeleteServiceBrokerHandlerFunc(func(params service_brokers.DeleteServiceBrokerParams) middleware.Responder {
			return middleware.NotImplemented("operation service_brokers.DeleteServiceBroker has not yet been implemented")
		}),
		ServiceInstancesDeleteServiceInstanceHandler: service_instances.DeleteServiceInstanceHandlerFunc(func(params service_instances.DeleteServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.DeleteServiceInstance has not yet been implemented")
		}),
		ServicePlanVisibilitiesDeleteServicePlanVisibilitiesHandler: service_plan_visibilities.DeleteServicePlanVisibilitiesHandlerFunc(func(params service_plan_visibilities.DeleteServicePlanVisibilitiesParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plan_visibilities.DeleteServicePlanVisibilities has not yet been implemented")
		}),
		ServicePlansDeleteServicePlansHandler: service_plans.DeleteServicePlansHandlerFunc(func(params service_plans.DeleteServicePlansParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plans.DeleteServicePlans has not yet been implemented")
		}),
		SharedDomainsDeleteSharedDomainHandler: shared_domains.DeleteSharedDomainHandlerFunc(func(params shared_domains.DeleteSharedDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation shared_domains.DeleteSharedDomain has not yet been implemented")
		}),
		SpacesDeleteSpaceHandler: spaces.DeleteSpaceHandlerFunc(func(params spaces.DeleteSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.DeleteSpace has not yet been implemented")
		}),
		SpaceQuotaDefinitionsDeleteSpaceQuotaDefinitionHandler: space_quota_definitions.DeleteSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.DeleteSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.DeleteSpaceQuotaDefinition has not yet been implemented")
		}),
		StacksDeleteStackHandler: stacks.DeleteStackHandlerFunc(func(params stacks.DeleteStackParams) middleware.Responder {
			return middleware.NotImplemented("operation stacks.DeleteStack has not yet been implemented")
		}),
		UsersDeleteUserHandler: users.DeleteUserHandlerFunc(func(params users.DeleteUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.DeleteUser has not yet been implemented")
		}),
		UserProvidedServiceInstancesDeleteUserProvidedServiceInstanceHandler: user_provided_service_instances.DeleteUserProvidedServiceInstanceHandlerFunc(func(params user_provided_service_instances.DeleteUserProvidedServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation user_provided_service_instances.DeleteUserProvidedServiceInstance has not yet been implemented")
		}),
		AppsDownloadsBitsForAppHandler: apps.DownloadsBitsForAppHandlerFunc(func(params apps.DownloadsBitsForAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.DownloadsBitsForApp has not yet been implemented")
		}),
		PrivateDomainsFilterPrivateDomainsByNameHandler: private_domains.FilterPrivateDomainsByNameHandlerFunc(func(params private_domains.FilterPrivateDomainsByNameParams) middleware.Responder {
			return middleware.NotImplemented("operation private_domains.FilterPrivateDomainsByName has not yet been implemented")
		}),
		ServiceAuthTokensDeprecatedFilterResultSetByLabelDeprecatedHandler: service_auth_tokens_deprecated.FilterResultSetByLabelDeprecatedHandlerFunc(func(params service_auth_tokens_deprecated.FilterResultSetByLabelDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation service_auth_tokens_deprecated.FilterResultSetByLabelDeprecated has not yet been implemented")
		}),
		FeatureFlagsGetAllFeatureFlagsHandler: feature_flags.GetAllFeatureFlagsHandlerFunc(func(params feature_flags.GetAllFeatureFlagsParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetAllFeatureFlags has not yet been implemented")
		}),
		FeatureFlagsGetAppBitsUploadFeatureFlagHandler: feature_flags.GetAppBitsUploadFeatureFlagHandlerFunc(func(params feature_flags.GetAppBitsUploadFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetAppBitsUploadFeatureFlag has not yet been implemented")
		}),
		FeatureFlagsGetAppScalingFeatureFlagHandler: feature_flags.GetAppScalingFeatureFlagHandlerFunc(func(params feature_flags.GetAppScalingFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetAppScalingFeatureFlag has not yet been implemented")
		}),
		AppsGetAppSummaryHandler: apps.GetAppSummaryHandlerFunc(func(params apps.GetAppSummaryParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.GetAppSummary has not yet been implemented")
		}),
		AppsGetDetailedStatsForStartedAppHandler: apps.GetDetailedStatsForStartedAppHandlerFunc(func(params apps.GetDetailedStatsForStartedAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.GetDetailedStatsForStartedApp has not yet been implemented")
		}),
		AppsGetEnvForAppHandler: apps.GetEnvForAppHandlerFunc(func(params apps.GetEnvForAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.GetEnvForApp has not yet been implemented")
		}),
		InfoGetInfoHandler: info.GetInfoHandlerFunc(func(params info.GetInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation info.GetInfo has not yet been implemented")
		}),
		AppsGetInstanceInformationForStartedAppHandler: apps.GetInstanceInformationForStartedAppHandlerFunc(func(params apps.GetInstanceInformationForStartedAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.GetInstanceInformationForStartedApp has not yet been implemented")
		}),
		OrganizationsGetOrganizationSummaryHandler: organizations.GetOrganizationSummaryHandlerFunc(func(params organizations.GetOrganizationSummaryParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.GetOrganizationSummary has not yet been implemented")
		}),
		FeatureFlagsGetPrivateDomainCreationFeatureFlagHandler: feature_flags.GetPrivateDomainCreationFeatureFlagHandlerFunc(func(params feature_flags.GetPrivateDomainCreationFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetPrivateDomainCreationFeatureFlag has not yet been implemented")
		}),
		FeatureFlagsGetRouteCreationFeatureFlagHandler: feature_flags.GetRouteCreationFeatureFlagHandlerFunc(func(params feature_flags.GetRouteCreationFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetRouteCreationFeatureFlag has not yet been implemented")
		}),
		FeatureFlagsGetServiceInstanceCreationFeatureFlagHandler: feature_flags.GetServiceInstanceCreationFeatureFlagHandlerFunc(func(params feature_flags.GetServiceInstanceCreationFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetServiceInstanceCreationFeatureFlag has not yet been implemented")
		}),
		SpacesGetSpaceSummaryHandler: spaces.GetSpaceSummaryHandlerFunc(func(params spaces.GetSpaceSummaryParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.GetSpaceSummary has not yet been implemented")
		}),
		FeatureFlagsGetUserOrgCreationFeatureFlagHandler: feature_flags.GetUserOrgCreationFeatureFlagHandlerFunc(func(params feature_flags.GetUserOrgCreationFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.GetUserOrgCreationFeatureFlag has not yet been implemented")
		}),
		UsersGetUserSummaryHandler: users.GetUserSummaryHandlerFunc(func(params users.GetUserSummaryParams) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUserSummary has not yet been implemented")
		}),
		EnvironmentVariableGroupsGettingContentsOfRunningEnvironmentVariableGroupHandler: environment_variable_groups.GettingContentsOfRunningEnvironmentVariableGroupHandlerFunc(func(params environment_variable_groups.GettingContentsOfRunningEnvironmentVariableGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation environment_variable_groups.GettingContentsOfRunningEnvironmentVariableGroup has not yet been implemented")
		}),
		EnvironmentVariableGroupsGettingContentsOfStagingEnvironmentVariableGroupHandler: environment_variable_groups.GettingContentsOfStagingEnvironmentVariableGroupHandlerFunc(func(params environment_variable_groups.GettingContentsOfStagingEnvironmentVariableGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation environment_variable_groups.GettingContentsOfStagingEnvironmentVariableGroup has not yet been implemented")
		}),
		AppUsageEventsListAllAppUsageEventsHandler: app_usage_events.ListAllAppUsageEventsHandlerFunc(func(params app_usage_events.ListAllAppUsageEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation app_usage_events.ListAllAppUsageEvents has not yet been implemented")
		}),
		AppsListAllAppsHandler: apps.ListAllAppsHandlerFunc(func(params apps.ListAllAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.ListAllApps has not yet been implemented")
		}),
		RoutesListAllAppsForRouteHandler: routes.ListAllAppsForRouteHandlerFunc(func(params routes.ListAllAppsForRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.ListAllAppsForRoute has not yet been implemented")
		}),
		SpacesListAllAppsForSpaceHandler: spaces.ListAllAppsForSpaceHandlerFunc(func(params spaces.ListAllAppsForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllAppsForSpace has not yet been implemented")
		}),
		UsersListAllAuditedOrganizationsForUserHandler: users.ListAllAuditedOrganizationsForUserHandlerFunc(func(params users.ListAllAuditedOrganizationsForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllAuditedOrganizationsForUser has not yet been implemented")
		}),
		UsersListAllAuditedSpacesForUserHandler: users.ListAllAuditedSpacesForUserHandlerFunc(func(params users.ListAllAuditedSpacesForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllAuditedSpacesForUser has not yet been implemented")
		}),
		OrganizationsListAllAuditorsForOrganizationHandler: organizations.ListAllAuditorsForOrganizationHandlerFunc(func(params organizations.ListAllAuditorsForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllAuditorsForOrganization has not yet been implemented")
		}),
		SpacesListAllAuditorsForSpaceHandler: spaces.ListAllAuditorsForSpaceHandlerFunc(func(params spaces.ListAllAuditorsForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllAuditorsForSpace has not yet been implemented")
		}),
		UsersListAllBillingManagedOrganizationsForUserHandler: users.ListAllBillingManagedOrganizationsForUserHandlerFunc(func(params users.ListAllBillingManagedOrganizationsForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllBillingManagedOrganizationsForUser has not yet been implemented")
		}),
		OrganizationsListAllBillingManagersForOrganizationHandler: organizations.ListAllBillingManagersForOrganizationHandlerFunc(func(params organizations.ListAllBillingManagersForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllBillingManagersForOrganization has not yet been implemented")
		}),
		BuildpacksListAllBuildpacksHandler: buildpacks.ListAllBuildpacksHandlerFunc(func(params buildpacks.ListAllBuildpacksParams) middleware.Responder {
			return middleware.NotImplemented("operation buildpacks.ListAllBuildpacks has not yet been implemented")
		}),
		SpacesListAllDevelopersForSpaceHandler: spaces.ListAllDevelopersForSpaceHandlerFunc(func(params spaces.ListAllDevelopersForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllDevelopersForSpace has not yet been implemented")
		}),
		DomainsDeprecatedListAllDomainsDeprecatedHandler: domains_deprecated.ListAllDomainsDeprecatedHandlerFunc(func(params domains_deprecated.ListAllDomainsDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation domains_deprecated.ListAllDomainsDeprecated has not yet been implemented")
		}),
		OrganizationsListAllDomainsForOrganizationDeprecatedHandler: organizations.ListAllDomainsForOrganizationDeprecatedHandlerFunc(func(params organizations.ListAllDomainsForOrganizationDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllDomainsForOrganizationDeprecated has not yet been implemented")
		}),
		SpacesListAllDomainsForSpaceDeprecatedHandler: spaces.ListAllDomainsForSpaceDeprecatedHandlerFunc(func(params spaces.ListAllDomainsForSpaceDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllDomainsForSpaceDeprecated has not yet been implemented")
		}),
		SpacesListAllEventsForSpaceHandler: spaces.ListAllEventsForSpaceHandlerFunc(func(params spaces.ListAllEventsForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllEventsForSpace has not yet been implemented")
		}),
		UsersListAllManagedOrganizationsForUserHandler: users.ListAllManagedOrganizationsForUserHandlerFunc(func(params users.ListAllManagedOrganizationsForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllManagedOrganizationsForUser has not yet been implemented")
		}),
		UsersListAllManagedSpacesForUserHandler: users.ListAllManagedSpacesForUserHandlerFunc(func(params users.ListAllManagedSpacesForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllManagedSpacesForUser has not yet been implemented")
		}),
		OrganizationsListAllManagersForOrganizationHandler: organizations.ListAllManagersForOrganizationHandlerFunc(func(params organizations.ListAllManagersForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllManagersForOrganization has not yet been implemented")
		}),
		SpacesListAllManagersForSpaceHandler: spaces.ListAllManagersForSpaceHandlerFunc(func(params spaces.ListAllManagersForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllManagersForSpace has not yet been implemented")
		}),
		ResourceMatchListAllMatchingResourcesHandler: resource_match.ListAllMatchingResourcesHandlerFunc(func(params resource_match.ListAllMatchingResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation resource_match.ListAllMatchingResources has not yet been implemented")
		}),
		OrganizationQuotaDefinitionsListAllOrganizationQuotaDefinitionsHandler: organization_quota_definitions.ListAllOrganizationQuotaDefinitionsHandlerFunc(func(params organization_quota_definitions.ListAllOrganizationQuotaDefinitionsParams) middleware.Responder {
			return middleware.NotImplemented("operation organization_quota_definitions.ListAllOrganizationQuotaDefinitions has not yet been implemented")
		}),
		OrganizationsListAllOrganizationsHandler: organizations.ListAllOrganizationsHandlerFunc(func(params organizations.ListAllOrganizationsParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllOrganizations has not yet been implemented")
		}),
		UsersListAllOrganizationsForUserHandler: users.ListAllOrganizationsForUserHandlerFunc(func(params users.ListAllOrganizationsForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllOrganizationsForUser has not yet been implemented")
		}),
		OrganizationsListAllPrivateDomainsForOrganizationHandler: organizations.ListAllPrivateDomainsForOrganizationHandlerFunc(func(params organizations.ListAllPrivateDomainsForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllPrivateDomainsForOrganization has not yet been implemented")
		}),
		RoutesListAllRoutesHandler: routes.ListAllRoutesHandlerFunc(func(params routes.ListAllRoutesParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.ListAllRoutes has not yet been implemented")
		}),
		AppsListAllRoutesForAppHandler: apps.ListAllRoutesForAppHandlerFunc(func(params apps.ListAllRoutesForAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.ListAllRoutesForApp has not yet been implemented")
		}),
		SpacesListAllRoutesForSpaceHandler: spaces.ListAllRoutesForSpaceHandlerFunc(func(params spaces.ListAllRoutesForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllRoutesForSpace has not yet been implemented")
		}),
		SecurityGroupsListAllSecurityGroupsHandler: security_groups.ListAllSecurityGroupsHandlerFunc(func(params security_groups.ListAllSecurityGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.ListAllSecurityGroups has not yet been implemented")
		}),
		SpacesListAllSecurityGroupsForSpaceHandler: spaces.ListAllSecurityGroupsForSpaceHandlerFunc(func(params spaces.ListAllSecurityGroupsForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllSecurityGroupsForSpace has not yet been implemented")
		}),
		ServiceBindingsListAllServiceBindingsHandler: service_bindings.ListAllServiceBindingsHandlerFunc(func(params service_bindings.ListAllServiceBindingsParams) middleware.Responder {
			return middleware.NotImplemented("operation service_bindings.ListAllServiceBindings has not yet been implemented")
		}),
		AppsListAllServiceBindingsForAppHandler: apps.ListAllServiceBindingsForAppHandlerFunc(func(params apps.ListAllServiceBindingsForAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.ListAllServiceBindingsForApp has not yet been implemented")
		}),
		ServiceInstancesListAllServiceBindingsForServiceInstanceHandler: service_instances.ListAllServiceBindingsForServiceInstanceHandlerFunc(func(params service_instances.ListAllServiceBindingsForServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.ListAllServiceBindingsForServiceInstance has not yet been implemented")
		}),
		UserProvidedServiceInstancesListAllServiceBindingsForUserProvidedServiceInstanceHandler: user_provided_service_instances.ListAllServiceBindingsForUserProvidedServiceInstanceHandlerFunc(func(params user_provided_service_instances.ListAllServiceBindingsForUserProvidedServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation user_provided_service_instances.ListAllServiceBindingsForUserProvidedServiceInstance has not yet been implemented")
		}),
		ServiceBrokersListAllServiceBrokersHandler: service_brokers.ListAllServiceBrokersHandlerFunc(func(params service_brokers.ListAllServiceBrokersParams) middleware.Responder {
			return middleware.NotImplemented("operation service_brokers.ListAllServiceBrokers has not yet been implemented")
		}),
		ServiceInstancesListAllServiceInstancesHandler: service_instances.ListAllServiceInstancesHandlerFunc(func(params service_instances.ListAllServiceInstancesParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.ListAllServiceInstances has not yet been implemented")
		}),
		SpacesListAllServiceInstancesForSpaceHandler: spaces.ListAllServiceInstancesForSpaceHandlerFunc(func(params spaces.ListAllServiceInstancesForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllServiceInstancesForSpace has not yet been implemented")
		}),
		ServicePlanVisibilitiesListAllServicePlanVisibilitiesHandler: service_plan_visibilities.ListAllServicePlanVisibilitiesHandlerFunc(func(params service_plan_visibilities.ListAllServicePlanVisibilitiesParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plan_visibilities.ListAllServicePlanVisibilities has not yet been implemented")
		}),
		ServicePlansListAllServicePlansHandler: service_plans.ListAllServicePlansHandlerFunc(func(params service_plans.ListAllServicePlansParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plans.ListAllServicePlans has not yet been implemented")
		}),
		ServicesListAllServicePlansForServiceHandler: services.ListAllServicePlansForServiceHandlerFunc(func(params services.ListAllServicePlansForServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation services.ListAllServicePlansForService has not yet been implemented")
		}),
		ServicesListAllServicesHandler: services.ListAllServicesHandlerFunc(func(params services.ListAllServicesParams) middleware.Responder {
			return middleware.NotImplemented("operation services.ListAllServices has not yet been implemented")
		}),
		OrganizationsListAllServicesForOrganizationHandler: organizations.ListAllServicesForOrganizationHandlerFunc(func(params organizations.ListAllServicesForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllServicesForOrganization has not yet been implemented")
		}),
		SpacesListAllServicesForSpaceHandler: spaces.ListAllServicesForSpaceHandlerFunc(func(params spaces.ListAllServicesForSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllServicesForSpace has not yet been implemented")
		}),
		SharedDomainsListAllSharedDomainsHandler: shared_domains.ListAllSharedDomainsHandlerFunc(func(params shared_domains.ListAllSharedDomainsParams) middleware.Responder {
			return middleware.NotImplemented("operation shared_domains.ListAllSharedDomains has not yet been implemented")
		}),
		SpaceQuotaDefinitionsListAllSpaceQuotaDefinitionsHandler: space_quota_definitions.ListAllSpaceQuotaDefinitionsHandlerFunc(func(params space_quota_definitions.ListAllSpaceQuotaDefinitionsParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.ListAllSpaceQuotaDefinitions has not yet been implemented")
		}),
		OrganizationsListAllSpaceQuotaDefinitionsForOrganizationHandler: organizations.ListAllSpaceQuotaDefinitionsForOrganizationHandlerFunc(func(params organizations.ListAllSpaceQuotaDefinitionsForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllSpaceQuotaDefinitionsForOrganization has not yet been implemented")
		}),
		SpacesListAllSpacesHandler: spaces.ListAllSpacesHandlerFunc(func(params spaces.ListAllSpacesParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.ListAllSpaces has not yet been implemented")
		}),
		DomainsDeprecatedListAllSpacesForDomainDeprecatedHandler: domains_deprecated.ListAllSpacesForDomainDeprecatedHandlerFunc(func(params domains_deprecated.ListAllSpacesForDomainDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation domains_deprecated.ListAllSpacesForDomainDeprecated has not yet been implemented")
		}),
		OrganizationsListAllSpacesForOrganizationHandler: organizations.ListAllSpacesForOrganizationHandlerFunc(func(params organizations.ListAllSpacesForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllSpacesForOrganization has not yet been implemented")
		}),
		SecurityGroupsListAllSpacesForSecurityGroupHandler: security_groups.ListAllSpacesForSecurityGroupHandlerFunc(func(params security_groups.ListAllSpacesForSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.ListAllSpacesForSecurityGroup has not yet been implemented")
		}),
		SpaceQuotaDefinitionsListAllSpacesForSpaceQuotaDefinitionHandler: space_quota_definitions.ListAllSpacesForSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.ListAllSpacesForSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.ListAllSpacesForSpaceQuotaDefinition has not yet been implemented")
		}),
		UsersListAllSpacesForUserHandler: users.ListAllSpacesForUserHandlerFunc(func(params users.ListAllSpacesForUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllSpacesForUser has not yet been implemented")
		}),
		StacksListAllStacksHandler: stacks.ListAllStacksHandlerFunc(func(params stacks.ListAllStacksParams) middleware.Responder {
			return middleware.NotImplemented("operation stacks.ListAllStacks has not yet been implemented")
		}),
		UserProvidedServiceInstancesListAllUserProvidedServiceInstancesHandler: user_provided_service_instances.ListAllUserProvidedServiceInstancesHandlerFunc(func(params user_provided_service_instances.ListAllUserProvidedServiceInstancesParams) middleware.Responder {
			return middleware.NotImplemented("operation user_provided_service_instances.ListAllUserProvidedServiceInstances has not yet been implemented")
		}),
		UsersListAllUsersHandler: users.ListAllUsersHandlerFunc(func(params users.ListAllUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation users.ListAllUsers has not yet been implemented")
		}),
		OrganizationsListAllUsersForOrganizationHandler: organizations.ListAllUsersForOrganizationHandlerFunc(func(params organizations.ListAllUsersForOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.ListAllUsersForOrganization has not yet been implemented")
		}),
		EventsListServiceBrokerDeleteEventsExperimentalHandler: events.ListServiceBrokerDeleteEventsExperimentalHandlerFunc(func(params events.ListServiceBrokerDeleteEventsExperimentalParams) middleware.Responder {
			return middleware.NotImplemented("operation events.ListServiceBrokerDeleteEventsExperimental has not yet been implemented")
		}),
		ServiceUsageEventsExperimentalListServiceUsageEventsHandler: service_usage_events_experimental.ListServiceUsageEventsHandlerFunc(func(params service_usage_events_experimental.ListServiceUsageEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation service_usage_events_experimental.ListServiceUsageEvents has not yet been implemented")
		}),
		BuildpacksLockOrUnlockBuildpackHandler: buildpacks.LockOrUnlockBuildpackHandlerFunc(func(params buildpacks.LockOrUnlockBuildpackParams) middleware.Responder {
			return middleware.NotImplemented("operation buildpacks.LockOrUnlockBuildpack has not yet been implemented")
		}),
		ServiceInstancesMigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler: service_instances.MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandlerFunc(func(params service_instances.MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimental has not yet been implemented")
		}),
		AppUsageEventsPurgeAndReseedAppUsageEventsHandler: app_usage_events.PurgeAndReseedAppUsageEventsHandlerFunc(func(params app_usage_events.PurgeAndReseedAppUsageEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation app_usage_events.PurgeAndReseedAppUsageEvents has not yet been implemented")
		}),
		ServiceUsageEventsExperimentalPurgeAndReseedServiceUsageEventsHandler: service_usage_events_experimental.PurgeAndReseedServiceUsageEventsHandlerFunc(func(params service_usage_events_experimental.PurgeAndReseedServiceUsageEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation service_usage_events_experimental.PurgeAndReseedServiceUsageEvents has not yet been implemented")
		}),
		RoutesRemoveAppFromRouteHandler: routes.RemoveAppFromRouteHandlerFunc(func(params routes.RemoveAppFromRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.RemoveAppFromRoute has not yet been implemented")
		}),
		UsersRemoveAuditedOrganizationFromUserHandler: users.RemoveAuditedOrganizationFromUserHandlerFunc(func(params users.RemoveAuditedOrganizationFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveAuditedOrganizationFromUser has not yet been implemented")
		}),
		UsersRemoveAuditedSpaceFromUserHandler: users.RemoveAuditedSpaceFromUserHandlerFunc(func(params users.RemoveAuditedSpaceFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveAuditedSpaceFromUser has not yet been implemented")
		}),
		OrganizationsRemoveAuditorFromOrganizationHandler: organizations.RemoveAuditorFromOrganizationHandlerFunc(func(params organizations.RemoveAuditorFromOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.RemoveAuditorFromOrganization has not yet been implemented")
		}),
		SpacesRemoveAuditorFromSpaceHandler: spaces.RemoveAuditorFromSpaceHandlerFunc(func(params spaces.RemoveAuditorFromSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.RemoveAuditorFromSpace has not yet been implemented")
		}),
		UsersRemoveBillingManagedOrganizationFromUserHandler: users.RemoveBillingManagedOrganizationFromUserHandlerFunc(func(params users.RemoveBillingManagedOrganizationFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveBillingManagedOrganizationFromUser has not yet been implemented")
		}),
		OrganizationsRemoveBillingManagerFromOrganizationHandler: organizations.RemoveBillingManagerFromOrganizationHandlerFunc(func(params organizations.RemoveBillingManagerFromOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.RemoveBillingManagerFromOrganization has not yet been implemented")
		}),
		SpacesRemoveDeveloperFromSpaceHandler: spaces.RemoveDeveloperFromSpaceHandlerFunc(func(params spaces.RemoveDeveloperFromSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.RemoveDeveloperFromSpace has not yet been implemented")
		}),
		UsersRemoveManagedOrganizationFromUserHandler: users.RemoveManagedOrganizationFromUserHandlerFunc(func(params users.RemoveManagedOrganizationFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveManagedOrganizationFromUser has not yet been implemented")
		}),
		UsersRemoveManagedSpaceFromUserHandler: users.RemoveManagedSpaceFromUserHandlerFunc(func(params users.RemoveManagedSpaceFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveManagedSpaceFromUser has not yet been implemented")
		}),
		OrganizationsRemoveManagerFromOrganizationHandler: organizations.RemoveManagerFromOrganizationHandlerFunc(func(params organizations.RemoveManagerFromOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.RemoveManagerFromOrganization has not yet been implemented")
		}),
		SpacesRemoveManagerFromSpaceHandler: spaces.RemoveManagerFromSpaceHandlerFunc(func(params spaces.RemoveManagerFromSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.RemoveManagerFromSpace has not yet been implemented")
		}),
		UsersRemoveOrganizationFromUserHandler: users.RemoveOrganizationFromUserHandlerFunc(func(params users.RemoveOrganizationFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveOrganizationFromUser has not yet been implemented")
		}),
		AppsRemoveRouteFromAppHandler: apps.RemoveRouteFromAppHandlerFunc(func(params apps.RemoveRouteFromAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.RemoveRouteFromApp has not yet been implemented")
		}),
		SpacesRemoveSecurityGroupFromSpaceHandler: spaces.RemoveSecurityGroupFromSpaceHandlerFunc(func(params spaces.RemoveSecurityGroupFromSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.RemoveSecurityGroupFromSpace has not yet been implemented")
		}),
		AppsRemoveServiceBindingFromAppHandler: apps.RemoveServiceBindingFromAppHandlerFunc(func(params apps.RemoveServiceBindingFromAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.RemoveServiceBindingFromApp has not yet been implemented")
		}),
		SecurityGroupsRemoveSpaceFromSecurityGroupHandler: security_groups.RemoveSpaceFromSecurityGroupHandlerFunc(func(params security_groups.RemoveSpaceFromSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.RemoveSpaceFromSecurityGroup has not yet been implemented")
		}),
		SpaceQuotaDefinitionsRemoveSpaceFromSpaceQuotaDefinitionHandler: space_quota_definitions.RemoveSpaceFromSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.RemoveSpaceFromSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.RemoveSpaceFromSpaceQuotaDefinition has not yet been implemented")
		}),
		UsersRemoveSpaceFromUserHandler: users.RemoveSpaceFromUserHandlerFunc(func(params users.RemoveSpaceFromUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RemoveSpaceFromUser has not yet been implemented")
		}),
		OrganizationsRemoveUserFromOrganizationHandler: organizations.RemoveUserFromOrganizationHandlerFunc(func(params organizations.RemoveUserFromOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.RemoveUserFromOrganization has not yet been implemented")
		}),
		SecurityGroupRunningDefaultsRemovingSecurityGroupAsDefaultForRunningAppsHandler: security_group_running_defaults.RemovingSecurityGroupAsDefaultForRunningAppsHandlerFunc(func(params security_group_running_defaults.RemovingSecurityGroupAsDefaultForRunningAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation security_group_running_defaults.RemovingSecurityGroupAsDefaultForRunningApps has not yet been implemented")
		}),
		SecurityGroupStagingDefaultsRemovingSecurityGroupAsDefaultForStagingHandler: security_group_staging_defaults.RemovingSecurityGroupAsDefaultForStagingHandlerFunc(func(params security_group_staging_defaults.RemovingSecurityGroupAsDefaultForStagingParams) middleware.Responder {
			return middleware.NotImplemented("operation security_group_staging_defaults.RemovingSecurityGroupAsDefaultForStaging has not yet been implemented")
		}),
		AppsRestageAppHandler: apps.RestageAppHandlerFunc(func(params apps.RestageAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.RestageApp has not yet been implemented")
		}),
		AppsRetrieveAppHandler: apps.RetrieveAppHandlerFunc(func(params apps.RetrieveAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.RetrieveApp has not yet been implemented")
		}),
		AppUsageEventsRetrieveAppUsageEventHandler: app_usage_events.RetrieveAppUsageEventHandlerFunc(func(params app_usage_events.RetrieveAppUsageEventParams) middleware.Responder {
			return middleware.NotImplemented("operation app_usage_events.RetrieveAppUsageEvent has not yet been implemented")
		}),
		BuildpacksRetrieveBuildpackHandler: buildpacks.RetrieveBuildpackHandlerFunc(func(params buildpacks.RetrieveBuildpackParams) middleware.Responder {
			return middleware.NotImplemented("operation buildpacks.RetrieveBuildpack has not yet been implemented")
		}),
		DomainsDeprecatedRetrieveDomainDeprecatedHandler: domains_deprecated.RetrieveDomainDeprecatedHandlerFunc(func(params domains_deprecated.RetrieveDomainDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation domains_deprecated.RetrieveDomainDeprecated has not yet been implemented")
		}),
		EventsRetrieveEventHandler: events.RetrieveEventHandlerFunc(func(params events.RetrieveEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events.RetrieveEvent has not yet been implemented")
		}),
		FilesRetrieveFileHandler: files.RetrieveFileHandlerFunc(func(params files.RetrieveFileParams) middleware.Responder {
			return middleware.NotImplemented("operation files.RetrieveFile has not yet been implemented")
		}),
		JobsRetrieveJobThatWasSuccessfulHandler: jobs.RetrieveJobThatWasSuccessfulHandlerFunc(func(params jobs.RetrieveJobThatWasSuccessfulParams) middleware.Responder {
			return middleware.NotImplemented("operation jobs.RetrieveJobThatWasSuccessful has not yet been implemented")
		}),
		OrganizationsRetrieveOrganizationHandler: organizations.RetrieveOrganizationHandlerFunc(func(params organizations.RetrieveOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.RetrieveOrganization has not yet been implemented")
		}),
		OrganizationQuotaDefinitionsRetrieveOrganizationQuotaDefinitionHandler: organization_quota_definitions.RetrieveOrganizationQuotaDefinitionHandlerFunc(func(params organization_quota_definitions.RetrieveOrganizationQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation organization_quota_definitions.RetrieveOrganizationQuotaDefinition has not yet been implemented")
		}),
		PrivateDomainsRetrievePrivateDomainHandler: private_domains.RetrievePrivateDomainHandlerFunc(func(params private_domains.RetrievePrivateDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation private_domains.RetrievePrivateDomain has not yet been implemented")
		}),
		RoutesRetrieveRouteHandler: routes.RetrieveRouteHandlerFunc(func(params routes.RetrieveRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.RetrieveRoute has not yet been implemented")
		}),
		SecurityGroupsRetrieveSecurityGroupHandler: security_groups.RetrieveSecurityGroupHandlerFunc(func(params security_groups.RetrieveSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.RetrieveSecurityGroup has not yet been implemented")
		}),
		ServicesRetrieveServiceHandler: services.RetrieveServiceHandlerFunc(func(params services.RetrieveServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation services.RetrieveService has not yet been implemented")
		}),
		ServiceAuthTokensDeprecatedRetrieveServiceAuthTokenDeprecatedHandler: service_auth_tokens_deprecated.RetrieveServiceAuthTokenDeprecatedHandlerFunc(func(params service_auth_tokens_deprecated.RetrieveServiceAuthTokenDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation service_auth_tokens_deprecated.RetrieveServiceAuthTokenDeprecated has not yet been implemented")
		}),
		ServiceBindingsRetrieveServiceBindingHandler: service_bindings.RetrieveServiceBindingHandlerFunc(func(params service_bindings.RetrieveServiceBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation service_bindings.RetrieveServiceBinding has not yet been implemented")
		}),
		ServiceBrokersRetrieveServiceBrokerHandler: service_brokers.RetrieveServiceBrokerHandlerFunc(func(params service_brokers.RetrieveServiceBrokerParams) middleware.Responder {
			return middleware.NotImplemented("operation service_brokers.RetrieveServiceBroker has not yet been implemented")
		}),
		ServiceInstancesRetrieveServiceInstanceHandler: service_instances.RetrieveServiceInstanceHandlerFunc(func(params service_instances.RetrieveServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.RetrieveServiceInstance has not yet been implemented")
		}),
		ServicePlansRetrieveServicePlanHandler: service_plans.RetrieveServicePlanHandlerFunc(func(params service_plans.RetrieveServicePlanParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plans.RetrieveServicePlan has not yet been implemented")
		}),
		ServicePlanVisibilitiesRetrieveServicePlanVisibilityHandler: service_plan_visibilities.RetrieveServicePlanVisibilityHandlerFunc(func(params service_plan_visibilities.RetrieveServicePlanVisibilityParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plan_visibilities.RetrieveServicePlanVisibility has not yet been implemented")
		}),
		ServiceUsageEventsExperimentalRetrieveServiceUsageEventHandler: service_usage_events_experimental.RetrieveServiceUsageEventHandlerFunc(func(params service_usage_events_experimental.RetrieveServiceUsageEventParams) middleware.Responder {
			return middleware.NotImplemented("operation service_usage_events_experimental.RetrieveServiceUsageEvent has not yet been implemented")
		}),
		SharedDomainsRetrieveSharedDomainHandler: shared_domains.RetrieveSharedDomainHandlerFunc(func(params shared_domains.RetrieveSharedDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation shared_domains.RetrieveSharedDomain has not yet been implemented")
		}),
		SpacesRetrieveSpaceHandler: spaces.RetrieveSpaceHandlerFunc(func(params spaces.RetrieveSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.RetrieveSpace has not yet been implemented")
		}),
		SpaceQuotaDefinitionsRetrieveSpaceQuotaDefinitionHandler: space_quota_definitions.RetrieveSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.RetrieveSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.RetrieveSpaceQuotaDefinition has not yet been implemented")
		}),
		StacksRetrieveStackHandler: stacks.RetrieveStackHandlerFunc(func(params stacks.RetrieveStackParams) middleware.Responder {
			return middleware.NotImplemented("operation stacks.RetrieveStack has not yet been implemented")
		}),
		UsersRetrieveUserHandler: users.RetrieveUserHandlerFunc(func(params users.RetrieveUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.RetrieveUser has not yet been implemented")
		}),
		UserProvidedServiceInstancesRetrieveUserProvidedServiceInstanceHandler: user_provided_service_instances.RetrieveUserProvidedServiceInstanceHandlerFunc(func(params user_provided_service_instances.RetrieveUserProvidedServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation user_provided_service_instances.RetrieveUserProvidedServiceInstance has not yet been implemented")
		}),
		OrganizationsRetrievingOrganizationMemoryUsageHandler: organizations.RetrievingOrganizationMemoryUsageHandlerFunc(func(params organizations.RetrievingOrganizationMemoryUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.RetrievingOrganizationMemoryUsage has not yet been implemented")
		}),
		ServiceInstancesRetrievingPermissionsOnServiceInstanceHandler: service_instances.RetrievingPermissionsOnServiceInstanceHandlerFunc(func(params service_instances.RetrievingPermissionsOnServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.RetrievingPermissionsOnServiceInstance has not yet been implemented")
		}),
		SecurityGroupRunningDefaultsReturnSecurityGroupsUsedForRunningAppsHandler: security_group_running_defaults.ReturnSecurityGroupsUsedForRunningAppsHandlerFunc(func(params security_group_running_defaults.ReturnSecurityGroupsUsedForRunningAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation security_group_running_defaults.ReturnSecurityGroupsUsedForRunningApps has not yet been implemented")
		}),
		SecurityGroupStagingDefaultsReturnSecurityGroupsUsedForStagingHandler: security_group_staging_defaults.ReturnSecurityGroupsUsedForStagingHandlerFunc(func(params security_group_staging_defaults.ReturnSecurityGroupsUsedForStagingParams) middleware.Responder {
			return middleware.NotImplemented("operation security_group_staging_defaults.ReturnSecurityGroupsUsedForStaging has not yet been implemented")
		}),
		FeatureFlagsSetFeatureFlagHandler: feature_flags.SetFeatureFlagHandlerFunc(func(params feature_flags.SetFeatureFlagParams) middleware.Responder {
			return middleware.NotImplemented("operation feature_flags.SetFeatureFlag has not yet been implemented")
		}),
		SecurityGroupRunningDefaultsSetSecurityGroupAsDefaultForRunningAppsHandler: security_group_running_defaults.SetSecurityGroupAsDefaultForRunningAppsHandlerFunc(func(params security_group_running_defaults.SetSecurityGroupAsDefaultForRunningAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation security_group_running_defaults.SetSecurityGroupAsDefaultForRunningApps has not yet been implemented")
		}),
		SecurityGroupStagingDefaultsSetSecurityGroupAsDefaultForStagingHandler: security_group_staging_defaults.SetSecurityGroupAsDefaultForStagingHandlerFunc(func(params security_group_staging_defaults.SetSecurityGroupAsDefaultForStagingParams) middleware.Responder {
			return middleware.NotImplemented("operation security_group_staging_defaults.SetSecurityGroupAsDefaultForStaging has not yet been implemented")
		}),
		AppsTerminateRunningAppInstanceAtGivenIndexHandler: apps.TerminateRunningAppInstanceAtGivenIndexHandlerFunc(func(params apps.TerminateRunningAppInstanceAtGivenIndexParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.TerminateRunningAppInstanceAtGivenIndex has not yet been implemented")
		}),
		AppsUpdateAppHandler: apps.UpdateAppHandlerFunc(func(params apps.UpdateAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.UpdateApp has not yet been implemented")
		}),
		EnvironmentVariableGroupsUpdateContentsOfRunningEnvironmentVariableGroupHandler: environment_variable_groups.UpdateContentsOfRunningEnvironmentVariableGroupHandlerFunc(func(params environment_variable_groups.UpdateContentsOfRunningEnvironmentVariableGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation environment_variable_groups.UpdateContentsOfRunningEnvironmentVariableGroup has not yet been implemented")
		}),
		EnvironmentVariableGroupsUpdateContentsOfStagingEnvironmentVariableGroupHandler: environment_variable_groups.UpdateContentsOfStagingEnvironmentVariableGroupHandlerFunc(func(params environment_variable_groups.UpdateContentsOfStagingEnvironmentVariableGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation environment_variable_groups.UpdateContentsOfStagingEnvironmentVariableGroup has not yet been implemented")
		}),
		OrganizationsUpdateOrganizationHandler: organizations.UpdateOrganizationHandlerFunc(func(params organizations.UpdateOrganizationParams) middleware.Responder {
			return middleware.NotImplemented("operation organizations.UpdateOrganization has not yet been implemented")
		}),
		OrganizationQuotaDefinitionsUpdateOrganizationQuotaDefinitionHandler: organization_quota_definitions.UpdateOrganizationQuotaDefinitionHandlerFunc(func(params organization_quota_definitions.UpdateOrganizationQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation organization_quota_definitions.UpdateOrganizationQuotaDefinition has not yet been implemented")
		}),
		RoutesUpdateRouteHandler: routes.UpdateRouteHandlerFunc(func(params routes.UpdateRouteParams) middleware.Responder {
			return middleware.NotImplemented("operation routes.UpdateRoute has not yet been implemented")
		}),
		SecurityGroupsUpdateSecurityGroupHandler: security_groups.UpdateSecurityGroupHandlerFunc(func(params security_groups.UpdateSecurityGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation security_groups.UpdateSecurityGroup has not yet been implemented")
		}),
		ServiceBrokersUpdateServiceBrokerHandler: service_brokers.UpdateServiceBrokerHandlerFunc(func(params service_brokers.UpdateServiceBrokerParams) middleware.Responder {
			return middleware.NotImplemented("operation service_brokers.UpdateServiceBroker has not yet been implemented")
		}),
		ServicesUpdateServiceDeprecatedHandler: services.UpdateServiceDeprecatedHandlerFunc(func(params services.UpdateServiceDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation services.UpdateServiceDeprecated has not yet been implemented")
		}),
		ServiceInstancesUpdateServiceInstanceHandler: service_instances.UpdateServiceInstanceHandlerFunc(func(params service_instances.UpdateServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation service_instances.UpdateServiceInstance has not yet been implemented")
		}),
		ServicePlansUpdateServicePlanDeprecatedHandler: service_plans.UpdateServicePlanDeprecatedHandlerFunc(func(params service_plans.UpdateServicePlanDeprecatedParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plans.UpdateServicePlanDeprecated has not yet been implemented")
		}),
		ServicePlanVisibilitiesUpdateServicePlanVisibilityHandler: service_plan_visibilities.UpdateServicePlanVisibilityHandlerFunc(func(params service_plan_visibilities.UpdateServicePlanVisibilityParams) middleware.Responder {
			return middleware.NotImplemented("operation service_plan_visibilities.UpdateServicePlanVisibility has not yet been implemented")
		}),
		SpacesUpdateSpaceHandler: spaces.UpdateSpaceHandlerFunc(func(params spaces.UpdateSpaceParams) middleware.Responder {
			return middleware.NotImplemented("operation spaces.UpdateSpace has not yet been implemented")
		}),
		SpaceQuotaDefinitionsUpdateSpaceQuotaDefinitionHandler: space_quota_definitions.UpdateSpaceQuotaDefinitionHandlerFunc(func(params space_quota_definitions.UpdateSpaceQuotaDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation space_quota_definitions.UpdateSpaceQuotaDefinition has not yet been implemented")
		}),
		UsersUpdateUserHandler: users.UpdateUserHandlerFunc(func(params users.UpdateUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.UpdateUser has not yet been implemented")
		}),
		UserProvidedServiceInstancesUpdateUserProvidedServiceInstanceHandler: user_provided_service_instances.UpdateUserProvidedServiceInstanceHandlerFunc(func(params user_provided_service_instances.UpdateUserProvidedServiceInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation user_provided_service_instances.UpdateUserProvidedServiceInstance has not yet been implemented")
		}),
		AppsUploadsBitsForAppHandler: apps.UploadsBitsForAppHandlerFunc(func(params apps.UploadsBitsForAppParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.UploadsBitsForApp has not yet been implemented")
		}),
	}
}

/*CloudFoundryAPI This is the specification for a Cloud Foundry server.
 */
type CloudFoundryAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// AuthGetAuthLoginHandler sets the operation handler for the get auth login operation
	AuthGetAuthLoginHandler auth.GetAuthLoginHandler
	// AuthPostAuthOauthTokenHandler sets the operation handler for the post auth oauth token operation
	AuthPostAuthOauthTokenHandler auth.PostAuthOauthTokenHandler
	// RoutesAssociateAppWithRouteHandler sets the operation handler for the associate app with route operation
	RoutesAssociateAppWithRouteHandler routes.AssociateAppWithRouteHandler
	// UsersAssociateAuditedOrganizationWithUserHandler sets the operation handler for the associate audited organization with user operation
	UsersAssociateAuditedOrganizationWithUserHandler users.AssociateAuditedOrganizationWithUserHandler
	// UsersAssociateAuditedSpaceWithUserHandler sets the operation handler for the associate audited space with user operation
	UsersAssociateAuditedSpaceWithUserHandler users.AssociateAuditedSpaceWithUserHandler
	// OrganizationsAssociateAuditorWithOrganizationHandler sets the operation handler for the associate auditor with organization operation
	OrganizationsAssociateAuditorWithOrganizationHandler organizations.AssociateAuditorWithOrganizationHandler
	// SpacesAssociateAuditorWithSpaceHandler sets the operation handler for the associate auditor with space operation
	SpacesAssociateAuditorWithSpaceHandler spaces.AssociateAuditorWithSpaceHandler
	// UsersAssociateBillingManagedOrganizationWithUserHandler sets the operation handler for the associate billing managed organization with user operation
	UsersAssociateBillingManagedOrganizationWithUserHandler users.AssociateBillingManagedOrganizationWithUserHandler
	// OrganizationsAssociateBillingManagerWithOrganizationHandler sets the operation handler for the associate billing manager with organization operation
	OrganizationsAssociateBillingManagerWithOrganizationHandler organizations.AssociateBillingManagerWithOrganizationHandler
	// SpacesAssociateDeveloperWithSpaceHandler sets the operation handler for the associate developer with space operation
	SpacesAssociateDeveloperWithSpaceHandler spaces.AssociateDeveloperWithSpaceHandler
	// UsersAssociateManagedOrganizationWithUserHandler sets the operation handler for the associate managed organization with user operation
	UsersAssociateManagedOrganizationWithUserHandler users.AssociateManagedOrganizationWithUserHandler
	// UsersAssociateManagedSpaceWithUserHandler sets the operation handler for the associate managed space with user operation
	UsersAssociateManagedSpaceWithUserHandler users.AssociateManagedSpaceWithUserHandler
	// OrganizationsAssociateManagerWithOrganizationHandler sets the operation handler for the associate manager with organization operation
	OrganizationsAssociateManagerWithOrganizationHandler organizations.AssociateManagerWithOrganizationHandler
	// SpacesAssociateManagerWithSpaceHandler sets the operation handler for the associate manager with space operation
	SpacesAssociateManagerWithSpaceHandler spaces.AssociateManagerWithSpaceHandler
	// UsersAssociateOrganizationWithUserHandler sets the operation handler for the associate organization with user operation
	UsersAssociateOrganizationWithUserHandler users.AssociateOrganizationWithUserHandler
	// AppsAssociateRouteWithAppHandler sets the operation handler for the associate route with app operation
	AppsAssociateRouteWithAppHandler apps.AssociateRouteWithAppHandler
	// SpacesAssociateSecurityGroupWithSpaceHandler sets the operation handler for the associate security group with space operation
	SpacesAssociateSecurityGroupWithSpaceHandler spaces.AssociateSecurityGroupWithSpaceHandler
	// SecurityGroupsAssociateSpaceWithSecurityGroupHandler sets the operation handler for the associate space with security group operation
	SecurityGroupsAssociateSpaceWithSecurityGroupHandler security_groups.AssociateSpaceWithSecurityGroupHandler
	// SpaceQuotaDefinitionsAssociateSpaceWithSpaceQuotaDefinitionHandler sets the operation handler for the associate space with space quota definition operation
	SpaceQuotaDefinitionsAssociateSpaceWithSpaceQuotaDefinitionHandler space_quota_definitions.AssociateSpaceWithSpaceQuotaDefinitionHandler
	// UsersAssociateSpaceWithUserHandler sets the operation handler for the associate space with user operation
	UsersAssociateSpaceWithUserHandler users.AssociateSpaceWithUserHandler
	// OrganizationsAssociateUserWithOrganizationHandler sets the operation handler for the associate user with organization operation
	OrganizationsAssociateUserWithOrganizationHandler organizations.AssociateUserWithOrganizationHandler
	// RoutesCheckRouteExistsHandler sets the operation handler for the check route exists operation
	RoutesCheckRouteExistsHandler routes.CheckRouteExistsHandler
	// AppsCopyAppBitsForAppHandler sets the operation handler for the copy app bits for app operation
	AppsCopyAppBitsForAppHandler apps.CopyAppBitsForAppHandler
	// AppsCreateAppHandler sets the operation handler for the create app operation
	AppsCreateAppHandler apps.CreateAppHandler
	// OrganizationsCreateOrganizationHandler sets the operation handler for the create organization operation
	OrganizationsCreateOrganizationHandler organizations.CreateOrganizationHandler
	// OrganizationQuotaDefinitionsCreateOrganizationQuotaDefinitionHandler sets the operation handler for the create organization quota definition operation
	OrganizationQuotaDefinitionsCreateOrganizationQuotaDefinitionHandler organization_quota_definitions.CreateOrganizationQuotaDefinitionHandler
	// PrivateDomainsCreatePrivateDomainOwnedByGivenOrganizationHandler sets the operation handler for the create private domain owned by given organization operation
	PrivateDomainsCreatePrivateDomainOwnedByGivenOrganizationHandler private_domains.CreatePrivateDomainOwnedByGivenOrganizationHandler
	// RoutesCreateRouteHandler sets the operation handler for the create route operation
	RoutesCreateRouteHandler routes.CreateRouteHandler
	// SecurityGroupsCreateSecurityGroupHandler sets the operation handler for the create security group operation
	SecurityGroupsCreateSecurityGroupHandler security_groups.CreateSecurityGroupHandler
	// ServiceBindingsCreateServiceBindingHandler sets the operation handler for the create service binding operation
	ServiceBindingsCreateServiceBindingHandler service_bindings.CreateServiceBindingHandler
	// ServiceBrokersCreateServiceBrokerHandler sets the operation handler for the create service broker operation
	ServiceBrokersCreateServiceBrokerHandler service_brokers.CreateServiceBrokerHandler
	// ServicesCreateServiceDeprecatedHandler sets the operation handler for the create service deprecated operation
	ServicesCreateServiceDeprecatedHandler services.CreateServiceDeprecatedHandler
	// ServiceInstancesCreateServiceInstanceHandler sets the operation handler for the create service instance operation
	ServiceInstancesCreateServiceInstanceHandler service_instances.CreateServiceInstanceHandler
	// ServicePlansCreateServicePlanDeprecatedHandler sets the operation handler for the create service plan deprecated operation
	ServicePlansCreateServicePlanDeprecatedHandler service_plans.CreateServicePlanDeprecatedHandler
	// ServicePlanVisibilitiesCreateServicePlanVisibilityHandler sets the operation handler for the create service plan visibility operation
	ServicePlanVisibilitiesCreateServicePlanVisibilityHandler service_plan_visibilities.CreateServicePlanVisibilityHandler
	// SharedDomainsCreateSharedDomainHandler sets the operation handler for the create shared domain operation
	SharedDomainsCreateSharedDomainHandler shared_domains.CreateSharedDomainHandler
	// SpacesCreateSpaceHandler sets the operation handler for the create space operation
	SpacesCreateSpaceHandler spaces.CreateSpaceHandler
	// SpaceQuotaDefinitionsCreateSpaceQuotaDefinitionHandler sets the operation handler for the create space quota definition operation
	SpaceQuotaDefinitionsCreateSpaceQuotaDefinitionHandler space_quota_definitions.CreateSpaceQuotaDefinitionHandler
	// UsersCreateUserHandler sets the operation handler for the create user operation
	UsersCreateUserHandler users.CreateUserHandler
	// UserProvidedServiceInstancesCreateUserProvidedServiceInstanceHandler sets the operation handler for the create user provided service instance operation
	UserProvidedServiceInstancesCreateUserProvidedServiceInstanceHandler user_provided_service_instances.CreateUserProvidedServiceInstanceHandler
	// BuildpacksCreatesAdminBuildpackHandler sets the operation handler for the creates admin buildpack operation
	BuildpacksCreatesAdminBuildpackHandler buildpacks.CreatesAdminBuildpackHandler
	// DomainsDeprecatedCreatesDomainOwnedByGivenOrganizationDeprecatedHandler sets the operation handler for the creates domain owned by given organization deprecated operation
	DomainsDeprecatedCreatesDomainOwnedByGivenOrganizationDeprecatedHandler domains_deprecated.CreatesDomainOwnedByGivenOrganizationDeprecatedHandler
	// AppsDeleteAppHandler sets the operation handler for the delete app operation
	AppsDeleteAppHandler apps.DeleteAppHandler
	// BuildpacksDeleteBuildpackHandler sets the operation handler for the delete buildpack operation
	BuildpacksDeleteBuildpackHandler buildpacks.DeleteBuildpackHandler
	// DomainsDeprecatedDeleteDomainDeprecatedHandler sets the operation handler for the delete domain deprecated operation
	DomainsDeprecatedDeleteDomainDeprecatedHandler domains_deprecated.DeleteDomainDeprecatedHandler
	// OrganizationsDeleteOrganizationHandler sets the operation handler for the delete organization operation
	OrganizationsDeleteOrganizationHandler organizations.DeleteOrganizationHandler
	// OrganizationQuotaDefinitionsDeleteOrganizationQuotaDefinitionHandler sets the operation handler for the delete organization quota definition operation
	OrganizationQuotaDefinitionsDeleteOrganizationQuotaDefinitionHandler organization_quota_definitions.DeleteOrganizationQuotaDefinitionHandler
	// PrivateDomainsDeletePrivateDomainHandler sets the operation handler for the delete private domain operation
	PrivateDomainsDeletePrivateDomainHandler private_domains.DeletePrivateDomainHandler
	// RoutesDeleteRouteHandler sets the operation handler for the delete route operation
	RoutesDeleteRouteHandler routes.DeleteRouteHandler
	// SecurityGroupsDeleteSecurityGroupHandler sets the operation handler for the delete security group operation
	SecurityGroupsDeleteSecurityGroupHandler security_groups.DeleteSecurityGroupHandler
	// ServicesDeleteServiceHandler sets the operation handler for the delete service operation
	ServicesDeleteServiceHandler services.DeleteServiceHandler
	// ServiceAuthTokensDeprecatedDeleteServiceAuthTokenDeprecatedHandler sets the operation handler for the delete service auth token deprecated operation
	ServiceAuthTokensDeprecatedDeleteServiceAuthTokenDeprecatedHandler service_auth_tokens_deprecated.DeleteServiceAuthTokenDeprecatedHandler
	// ServiceBindingsDeleteServiceBindingHandler sets the operation handler for the delete service binding operation
	ServiceBindingsDeleteServiceBindingHandler service_bindings.DeleteServiceBindingHandler
	// ServiceBrokersDeleteServiceBrokerHandler sets the operation handler for the delete service broker operation
	ServiceBrokersDeleteServiceBrokerHandler service_brokers.DeleteServiceBrokerHandler
	// ServiceInstancesDeleteServiceInstanceHandler sets the operation handler for the delete service instance operation
	ServiceInstancesDeleteServiceInstanceHandler service_instances.DeleteServiceInstanceHandler
	// ServicePlanVisibilitiesDeleteServicePlanVisibilitiesHandler sets the operation handler for the delete service plan visibilities operation
	ServicePlanVisibilitiesDeleteServicePlanVisibilitiesHandler service_plan_visibilities.DeleteServicePlanVisibilitiesHandler
	// ServicePlansDeleteServicePlansHandler sets the operation handler for the delete service plans operation
	ServicePlansDeleteServicePlansHandler service_plans.DeleteServicePlansHandler
	// SharedDomainsDeleteSharedDomainHandler sets the operation handler for the delete shared domain operation
	SharedDomainsDeleteSharedDomainHandler shared_domains.DeleteSharedDomainHandler
	// SpacesDeleteSpaceHandler sets the operation handler for the delete space operation
	SpacesDeleteSpaceHandler spaces.DeleteSpaceHandler
	// SpaceQuotaDefinitionsDeleteSpaceQuotaDefinitionHandler sets the operation handler for the delete space quota definition operation
	SpaceQuotaDefinitionsDeleteSpaceQuotaDefinitionHandler space_quota_definitions.DeleteSpaceQuotaDefinitionHandler
	// StacksDeleteStackHandler sets the operation handler for the delete stack operation
	StacksDeleteStackHandler stacks.DeleteStackHandler
	// UsersDeleteUserHandler sets the operation handler for the delete user operation
	UsersDeleteUserHandler users.DeleteUserHandler
	// UserProvidedServiceInstancesDeleteUserProvidedServiceInstanceHandler sets the operation handler for the delete user provided service instance operation
	UserProvidedServiceInstancesDeleteUserProvidedServiceInstanceHandler user_provided_service_instances.DeleteUserProvidedServiceInstanceHandler
	// AppsDownloadsBitsForAppHandler sets the operation handler for the downloads bits for app operation
	AppsDownloadsBitsForAppHandler apps.DownloadsBitsForAppHandler
	// PrivateDomainsFilterPrivateDomainsByNameHandler sets the operation handler for the filter private domains by name operation
	PrivateDomainsFilterPrivateDomainsByNameHandler private_domains.FilterPrivateDomainsByNameHandler
	// ServiceAuthTokensDeprecatedFilterResultSetByLabelDeprecatedHandler sets the operation handler for the filter result set by label deprecated operation
	ServiceAuthTokensDeprecatedFilterResultSetByLabelDeprecatedHandler service_auth_tokens_deprecated.FilterResultSetByLabelDeprecatedHandler
	// FeatureFlagsGetAllFeatureFlagsHandler sets the operation handler for the get all feature flags operation
	FeatureFlagsGetAllFeatureFlagsHandler feature_flags.GetAllFeatureFlagsHandler
	// FeatureFlagsGetAppBitsUploadFeatureFlagHandler sets the operation handler for the get app bits upload feature flag operation
	FeatureFlagsGetAppBitsUploadFeatureFlagHandler feature_flags.GetAppBitsUploadFeatureFlagHandler
	// FeatureFlagsGetAppScalingFeatureFlagHandler sets the operation handler for the get app scaling feature flag operation
	FeatureFlagsGetAppScalingFeatureFlagHandler feature_flags.GetAppScalingFeatureFlagHandler
	// AppsGetAppSummaryHandler sets the operation handler for the get app summary operation
	AppsGetAppSummaryHandler apps.GetAppSummaryHandler
	// AppsGetDetailedStatsForStartedAppHandler sets the operation handler for the get detailed stats for started app operation
	AppsGetDetailedStatsForStartedAppHandler apps.GetDetailedStatsForStartedAppHandler
	// AppsGetEnvForAppHandler sets the operation handler for the get env for app operation
	AppsGetEnvForAppHandler apps.GetEnvForAppHandler
	// InfoGetInfoHandler sets the operation handler for the get info operation
	InfoGetInfoHandler info.GetInfoHandler
	// AppsGetInstanceInformationForStartedAppHandler sets the operation handler for the get instance information for started app operation
	AppsGetInstanceInformationForStartedAppHandler apps.GetInstanceInformationForStartedAppHandler
	// OrganizationsGetOrganizationSummaryHandler sets the operation handler for the get organization summary operation
	OrganizationsGetOrganizationSummaryHandler organizations.GetOrganizationSummaryHandler
	// FeatureFlagsGetPrivateDomainCreationFeatureFlagHandler sets the operation handler for the get private domain creation feature flag operation
	FeatureFlagsGetPrivateDomainCreationFeatureFlagHandler feature_flags.GetPrivateDomainCreationFeatureFlagHandler
	// FeatureFlagsGetRouteCreationFeatureFlagHandler sets the operation handler for the get route creation feature flag operation
	FeatureFlagsGetRouteCreationFeatureFlagHandler feature_flags.GetRouteCreationFeatureFlagHandler
	// FeatureFlagsGetServiceInstanceCreationFeatureFlagHandler sets the operation handler for the get service instance creation feature flag operation
	FeatureFlagsGetServiceInstanceCreationFeatureFlagHandler feature_flags.GetServiceInstanceCreationFeatureFlagHandler
	// SpacesGetSpaceSummaryHandler sets the operation handler for the get space summary operation
	SpacesGetSpaceSummaryHandler spaces.GetSpaceSummaryHandler
	// FeatureFlagsGetUserOrgCreationFeatureFlagHandler sets the operation handler for the get user org creation feature flag operation
	FeatureFlagsGetUserOrgCreationFeatureFlagHandler feature_flags.GetUserOrgCreationFeatureFlagHandler
	// UsersGetUserSummaryHandler sets the operation handler for the get user summary operation
	UsersGetUserSummaryHandler users.GetUserSummaryHandler
	// EnvironmentVariableGroupsGettingContentsOfRunningEnvironmentVariableGroupHandler sets the operation handler for the getting contents of running environment variable group operation
	EnvironmentVariableGroupsGettingContentsOfRunningEnvironmentVariableGroupHandler environment_variable_groups.GettingContentsOfRunningEnvironmentVariableGroupHandler
	// EnvironmentVariableGroupsGettingContentsOfStagingEnvironmentVariableGroupHandler sets the operation handler for the getting contents of staging environment variable group operation
	EnvironmentVariableGroupsGettingContentsOfStagingEnvironmentVariableGroupHandler environment_variable_groups.GettingContentsOfStagingEnvironmentVariableGroupHandler
	// AppUsageEventsListAllAppUsageEventsHandler sets the operation handler for the list all app usage events operation
	AppUsageEventsListAllAppUsageEventsHandler app_usage_events.ListAllAppUsageEventsHandler
	// AppsListAllAppsHandler sets the operation handler for the list all apps operation
	AppsListAllAppsHandler apps.ListAllAppsHandler
	// RoutesListAllAppsForRouteHandler sets the operation handler for the list all apps for route operation
	RoutesListAllAppsForRouteHandler routes.ListAllAppsForRouteHandler
	// SpacesListAllAppsForSpaceHandler sets the operation handler for the list all apps for space operation
	SpacesListAllAppsForSpaceHandler spaces.ListAllAppsForSpaceHandler
	// UsersListAllAuditedOrganizationsForUserHandler sets the operation handler for the list all audited organizations for user operation
	UsersListAllAuditedOrganizationsForUserHandler users.ListAllAuditedOrganizationsForUserHandler
	// UsersListAllAuditedSpacesForUserHandler sets the operation handler for the list all audited spaces for user operation
	UsersListAllAuditedSpacesForUserHandler users.ListAllAuditedSpacesForUserHandler
	// OrganizationsListAllAuditorsForOrganizationHandler sets the operation handler for the list all auditors for organization operation
	OrganizationsListAllAuditorsForOrganizationHandler organizations.ListAllAuditorsForOrganizationHandler
	// SpacesListAllAuditorsForSpaceHandler sets the operation handler for the list all auditors for space operation
	SpacesListAllAuditorsForSpaceHandler spaces.ListAllAuditorsForSpaceHandler
	// UsersListAllBillingManagedOrganizationsForUserHandler sets the operation handler for the list all billing managed organizations for user operation
	UsersListAllBillingManagedOrganizationsForUserHandler users.ListAllBillingManagedOrganizationsForUserHandler
	// OrganizationsListAllBillingManagersForOrganizationHandler sets the operation handler for the list all billing managers for organization operation
	OrganizationsListAllBillingManagersForOrganizationHandler organizations.ListAllBillingManagersForOrganizationHandler
	// BuildpacksListAllBuildpacksHandler sets the operation handler for the list all buildpacks operation
	BuildpacksListAllBuildpacksHandler buildpacks.ListAllBuildpacksHandler
	// SpacesListAllDevelopersForSpaceHandler sets the operation handler for the list all developers for space operation
	SpacesListAllDevelopersForSpaceHandler spaces.ListAllDevelopersForSpaceHandler
	// DomainsDeprecatedListAllDomainsDeprecatedHandler sets the operation handler for the list all domains deprecated operation
	DomainsDeprecatedListAllDomainsDeprecatedHandler domains_deprecated.ListAllDomainsDeprecatedHandler
	// OrganizationsListAllDomainsForOrganizationDeprecatedHandler sets the operation handler for the list all domains for organization deprecated operation
	OrganizationsListAllDomainsForOrganizationDeprecatedHandler organizations.ListAllDomainsForOrganizationDeprecatedHandler
	// SpacesListAllDomainsForSpaceDeprecatedHandler sets the operation handler for the list all domains for space deprecated operation
	SpacesListAllDomainsForSpaceDeprecatedHandler spaces.ListAllDomainsForSpaceDeprecatedHandler
	// SpacesListAllEventsForSpaceHandler sets the operation handler for the list all events for space operation
	SpacesListAllEventsForSpaceHandler spaces.ListAllEventsForSpaceHandler
	// UsersListAllManagedOrganizationsForUserHandler sets the operation handler for the list all managed organizations for user operation
	UsersListAllManagedOrganizationsForUserHandler users.ListAllManagedOrganizationsForUserHandler
	// UsersListAllManagedSpacesForUserHandler sets the operation handler for the list all managed spaces for user operation
	UsersListAllManagedSpacesForUserHandler users.ListAllManagedSpacesForUserHandler
	// OrganizationsListAllManagersForOrganizationHandler sets the operation handler for the list all managers for organization operation
	OrganizationsListAllManagersForOrganizationHandler organizations.ListAllManagersForOrganizationHandler
	// SpacesListAllManagersForSpaceHandler sets the operation handler for the list all managers for space operation
	SpacesListAllManagersForSpaceHandler spaces.ListAllManagersForSpaceHandler
	// ResourceMatchListAllMatchingResourcesHandler sets the operation handler for the list all matching resources operation
	ResourceMatchListAllMatchingResourcesHandler resource_match.ListAllMatchingResourcesHandler
	// OrganizationQuotaDefinitionsListAllOrganizationQuotaDefinitionsHandler sets the operation handler for the list all organization quota definitions operation
	OrganizationQuotaDefinitionsListAllOrganizationQuotaDefinitionsHandler organization_quota_definitions.ListAllOrganizationQuotaDefinitionsHandler
	// OrganizationsListAllOrganizationsHandler sets the operation handler for the list all organizations operation
	OrganizationsListAllOrganizationsHandler organizations.ListAllOrganizationsHandler
	// UsersListAllOrganizationsForUserHandler sets the operation handler for the list all organizations for user operation
	UsersListAllOrganizationsForUserHandler users.ListAllOrganizationsForUserHandler
	// OrganizationsListAllPrivateDomainsForOrganizationHandler sets the operation handler for the list all private domains for organization operation
	OrganizationsListAllPrivateDomainsForOrganizationHandler organizations.ListAllPrivateDomainsForOrganizationHandler
	// RoutesListAllRoutesHandler sets the operation handler for the list all routes operation
	RoutesListAllRoutesHandler routes.ListAllRoutesHandler
	// AppsListAllRoutesForAppHandler sets the operation handler for the list all routes for app operation
	AppsListAllRoutesForAppHandler apps.ListAllRoutesForAppHandler
	// SpacesListAllRoutesForSpaceHandler sets the operation handler for the list all routes for space operation
	SpacesListAllRoutesForSpaceHandler spaces.ListAllRoutesForSpaceHandler
	// SecurityGroupsListAllSecurityGroupsHandler sets the operation handler for the list all security groups operation
	SecurityGroupsListAllSecurityGroupsHandler security_groups.ListAllSecurityGroupsHandler
	// SpacesListAllSecurityGroupsForSpaceHandler sets the operation handler for the list all security groups for space operation
	SpacesListAllSecurityGroupsForSpaceHandler spaces.ListAllSecurityGroupsForSpaceHandler
	// ServiceBindingsListAllServiceBindingsHandler sets the operation handler for the list all service bindings operation
	ServiceBindingsListAllServiceBindingsHandler service_bindings.ListAllServiceBindingsHandler
	// AppsListAllServiceBindingsForAppHandler sets the operation handler for the list all service bindings for app operation
	AppsListAllServiceBindingsForAppHandler apps.ListAllServiceBindingsForAppHandler
	// ServiceInstancesListAllServiceBindingsForServiceInstanceHandler sets the operation handler for the list all service bindings for service instance operation
	ServiceInstancesListAllServiceBindingsForServiceInstanceHandler service_instances.ListAllServiceBindingsForServiceInstanceHandler
	// UserProvidedServiceInstancesListAllServiceBindingsForUserProvidedServiceInstanceHandler sets the operation handler for the list all service bindings for user provided service instance operation
	UserProvidedServiceInstancesListAllServiceBindingsForUserProvidedServiceInstanceHandler user_provided_service_instances.ListAllServiceBindingsForUserProvidedServiceInstanceHandler
	// ServiceBrokersListAllServiceBrokersHandler sets the operation handler for the list all service brokers operation
	ServiceBrokersListAllServiceBrokersHandler service_brokers.ListAllServiceBrokersHandler
	// ServiceInstancesListAllServiceInstancesHandler sets the operation handler for the list all service instances operation
	ServiceInstancesListAllServiceInstancesHandler service_instances.ListAllServiceInstancesHandler
	// SpacesListAllServiceInstancesForSpaceHandler sets the operation handler for the list all service instances for space operation
	SpacesListAllServiceInstancesForSpaceHandler spaces.ListAllServiceInstancesForSpaceHandler
	// ServicePlanVisibilitiesListAllServicePlanVisibilitiesHandler sets the operation handler for the list all service plan visibilities operation
	ServicePlanVisibilitiesListAllServicePlanVisibilitiesHandler service_plan_visibilities.ListAllServicePlanVisibilitiesHandler
	// ServicePlansListAllServicePlansHandler sets the operation handler for the list all service plans operation
	ServicePlansListAllServicePlansHandler service_plans.ListAllServicePlansHandler
	// ServicesListAllServicePlansForServiceHandler sets the operation handler for the list all service plans for service operation
	ServicesListAllServicePlansForServiceHandler services.ListAllServicePlansForServiceHandler
	// ServicesListAllServicesHandler sets the operation handler for the list all services operation
	ServicesListAllServicesHandler services.ListAllServicesHandler
	// OrganizationsListAllServicesForOrganizationHandler sets the operation handler for the list all services for organization operation
	OrganizationsListAllServicesForOrganizationHandler organizations.ListAllServicesForOrganizationHandler
	// SpacesListAllServicesForSpaceHandler sets the operation handler for the list all services for space operation
	SpacesListAllServicesForSpaceHandler spaces.ListAllServicesForSpaceHandler
	// SharedDomainsListAllSharedDomainsHandler sets the operation handler for the list all shared domains operation
	SharedDomainsListAllSharedDomainsHandler shared_domains.ListAllSharedDomainsHandler
	// SpaceQuotaDefinitionsListAllSpaceQuotaDefinitionsHandler sets the operation handler for the list all space quota definitions operation
	SpaceQuotaDefinitionsListAllSpaceQuotaDefinitionsHandler space_quota_definitions.ListAllSpaceQuotaDefinitionsHandler
	// OrganizationsListAllSpaceQuotaDefinitionsForOrganizationHandler sets the operation handler for the list all space quota definitions for organization operation
	OrganizationsListAllSpaceQuotaDefinitionsForOrganizationHandler organizations.ListAllSpaceQuotaDefinitionsForOrganizationHandler
	// SpacesListAllSpacesHandler sets the operation handler for the list all spaces operation
	SpacesListAllSpacesHandler spaces.ListAllSpacesHandler
	// DomainsDeprecatedListAllSpacesForDomainDeprecatedHandler sets the operation handler for the list all spaces for domain deprecated operation
	DomainsDeprecatedListAllSpacesForDomainDeprecatedHandler domains_deprecated.ListAllSpacesForDomainDeprecatedHandler
	// OrganizationsListAllSpacesForOrganizationHandler sets the operation handler for the list all spaces for organization operation
	OrganizationsListAllSpacesForOrganizationHandler organizations.ListAllSpacesForOrganizationHandler
	// SecurityGroupsListAllSpacesForSecurityGroupHandler sets the operation handler for the list all spaces for security group operation
	SecurityGroupsListAllSpacesForSecurityGroupHandler security_groups.ListAllSpacesForSecurityGroupHandler
	// SpaceQuotaDefinitionsListAllSpacesForSpaceQuotaDefinitionHandler sets the operation handler for the list all spaces for space quota definition operation
	SpaceQuotaDefinitionsListAllSpacesForSpaceQuotaDefinitionHandler space_quota_definitions.ListAllSpacesForSpaceQuotaDefinitionHandler
	// UsersListAllSpacesForUserHandler sets the operation handler for the list all spaces for user operation
	UsersListAllSpacesForUserHandler users.ListAllSpacesForUserHandler
	// StacksListAllStacksHandler sets the operation handler for the list all stacks operation
	StacksListAllStacksHandler stacks.ListAllStacksHandler
	// UserProvidedServiceInstancesListAllUserProvidedServiceInstancesHandler sets the operation handler for the list all user provided service instances operation
	UserProvidedServiceInstancesListAllUserProvidedServiceInstancesHandler user_provided_service_instances.ListAllUserProvidedServiceInstancesHandler
	// UsersListAllUsersHandler sets the operation handler for the list all users operation
	UsersListAllUsersHandler users.ListAllUsersHandler
	// OrganizationsListAllUsersForOrganizationHandler sets the operation handler for the list all users for organization operation
	OrganizationsListAllUsersForOrganizationHandler organizations.ListAllUsersForOrganizationHandler
	// EventsListServiceBrokerDeleteEventsExperimentalHandler sets the operation handler for the list service broker delete events experimental operation
	EventsListServiceBrokerDeleteEventsExperimentalHandler events.ListServiceBrokerDeleteEventsExperimentalHandler
	// ServiceUsageEventsExperimentalListServiceUsageEventsHandler sets the operation handler for the list service usage events operation
	ServiceUsageEventsExperimentalListServiceUsageEventsHandler service_usage_events_experimental.ListServiceUsageEventsHandler
	// BuildpacksLockOrUnlockBuildpackHandler sets the operation handler for the lock or unlock buildpack operation
	BuildpacksLockOrUnlockBuildpackHandler buildpacks.LockOrUnlockBuildpackHandler
	// ServiceInstancesMigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler sets the operation handler for the migrate service instances from one service plan to another service plan experimental operation
	ServiceInstancesMigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler service_instances.MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler
	// AppUsageEventsPurgeAndReseedAppUsageEventsHandler sets the operation handler for the purge and reseed app usage events operation
	AppUsageEventsPurgeAndReseedAppUsageEventsHandler app_usage_events.PurgeAndReseedAppUsageEventsHandler
	// ServiceUsageEventsExperimentalPurgeAndReseedServiceUsageEventsHandler sets the operation handler for the purge and reseed service usage events operation
	ServiceUsageEventsExperimentalPurgeAndReseedServiceUsageEventsHandler service_usage_events_experimental.PurgeAndReseedServiceUsageEventsHandler
	// RoutesRemoveAppFromRouteHandler sets the operation handler for the remove app from route operation
	RoutesRemoveAppFromRouteHandler routes.RemoveAppFromRouteHandler
	// UsersRemoveAuditedOrganizationFromUserHandler sets the operation handler for the remove audited organization from user operation
	UsersRemoveAuditedOrganizationFromUserHandler users.RemoveAuditedOrganizationFromUserHandler
	// UsersRemoveAuditedSpaceFromUserHandler sets the operation handler for the remove audited space from user operation
	UsersRemoveAuditedSpaceFromUserHandler users.RemoveAuditedSpaceFromUserHandler
	// OrganizationsRemoveAuditorFromOrganizationHandler sets the operation handler for the remove auditor from organization operation
	OrganizationsRemoveAuditorFromOrganizationHandler organizations.RemoveAuditorFromOrganizationHandler
	// SpacesRemoveAuditorFromSpaceHandler sets the operation handler for the remove auditor from space operation
	SpacesRemoveAuditorFromSpaceHandler spaces.RemoveAuditorFromSpaceHandler
	// UsersRemoveBillingManagedOrganizationFromUserHandler sets the operation handler for the remove billing managed organization from user operation
	UsersRemoveBillingManagedOrganizationFromUserHandler users.RemoveBillingManagedOrganizationFromUserHandler
	// OrganizationsRemoveBillingManagerFromOrganizationHandler sets the operation handler for the remove billing manager from organization operation
	OrganizationsRemoveBillingManagerFromOrganizationHandler organizations.RemoveBillingManagerFromOrganizationHandler
	// SpacesRemoveDeveloperFromSpaceHandler sets the operation handler for the remove developer from space operation
	SpacesRemoveDeveloperFromSpaceHandler spaces.RemoveDeveloperFromSpaceHandler
	// UsersRemoveManagedOrganizationFromUserHandler sets the operation handler for the remove managed organization from user operation
	UsersRemoveManagedOrganizationFromUserHandler users.RemoveManagedOrganizationFromUserHandler
	// UsersRemoveManagedSpaceFromUserHandler sets the operation handler for the remove managed space from user operation
	UsersRemoveManagedSpaceFromUserHandler users.RemoveManagedSpaceFromUserHandler
	// OrganizationsRemoveManagerFromOrganizationHandler sets the operation handler for the remove manager from organization operation
	OrganizationsRemoveManagerFromOrganizationHandler organizations.RemoveManagerFromOrganizationHandler
	// SpacesRemoveManagerFromSpaceHandler sets the operation handler for the remove manager from space operation
	SpacesRemoveManagerFromSpaceHandler spaces.RemoveManagerFromSpaceHandler
	// UsersRemoveOrganizationFromUserHandler sets the operation handler for the remove organization from user operation
	UsersRemoveOrganizationFromUserHandler users.RemoveOrganizationFromUserHandler
	// AppsRemoveRouteFromAppHandler sets the operation handler for the remove route from app operation
	AppsRemoveRouteFromAppHandler apps.RemoveRouteFromAppHandler
	// SpacesRemoveSecurityGroupFromSpaceHandler sets the operation handler for the remove security group from space operation
	SpacesRemoveSecurityGroupFromSpaceHandler spaces.RemoveSecurityGroupFromSpaceHandler
	// AppsRemoveServiceBindingFromAppHandler sets the operation handler for the remove service binding from app operation
	AppsRemoveServiceBindingFromAppHandler apps.RemoveServiceBindingFromAppHandler
	// SecurityGroupsRemoveSpaceFromSecurityGroupHandler sets the operation handler for the remove space from security group operation
	SecurityGroupsRemoveSpaceFromSecurityGroupHandler security_groups.RemoveSpaceFromSecurityGroupHandler
	// SpaceQuotaDefinitionsRemoveSpaceFromSpaceQuotaDefinitionHandler sets the operation handler for the remove space from space quota definition operation
	SpaceQuotaDefinitionsRemoveSpaceFromSpaceQuotaDefinitionHandler space_quota_definitions.RemoveSpaceFromSpaceQuotaDefinitionHandler
	// UsersRemoveSpaceFromUserHandler sets the operation handler for the remove space from user operation
	UsersRemoveSpaceFromUserHandler users.RemoveSpaceFromUserHandler
	// OrganizationsRemoveUserFromOrganizationHandler sets the operation handler for the remove user from organization operation
	OrganizationsRemoveUserFromOrganizationHandler organizations.RemoveUserFromOrganizationHandler
	// SecurityGroupRunningDefaultsRemovingSecurityGroupAsDefaultForRunningAppsHandler sets the operation handler for the removing security group as default for running apps operation
	SecurityGroupRunningDefaultsRemovingSecurityGroupAsDefaultForRunningAppsHandler security_group_running_defaults.RemovingSecurityGroupAsDefaultForRunningAppsHandler
	// SecurityGroupStagingDefaultsRemovingSecurityGroupAsDefaultForStagingHandler sets the operation handler for the removing security group as default for staging operation
	SecurityGroupStagingDefaultsRemovingSecurityGroupAsDefaultForStagingHandler security_group_staging_defaults.RemovingSecurityGroupAsDefaultForStagingHandler
	// AppsRestageAppHandler sets the operation handler for the restage app operation
	AppsRestageAppHandler apps.RestageAppHandler
	// AppsRetrieveAppHandler sets the operation handler for the retrieve app operation
	AppsRetrieveAppHandler apps.RetrieveAppHandler
	// AppUsageEventsRetrieveAppUsageEventHandler sets the operation handler for the retrieve app usage event operation
	AppUsageEventsRetrieveAppUsageEventHandler app_usage_events.RetrieveAppUsageEventHandler
	// BuildpacksRetrieveBuildpackHandler sets the operation handler for the retrieve buildpack operation
	BuildpacksRetrieveBuildpackHandler buildpacks.RetrieveBuildpackHandler
	// DomainsDeprecatedRetrieveDomainDeprecatedHandler sets the operation handler for the retrieve domain deprecated operation
	DomainsDeprecatedRetrieveDomainDeprecatedHandler domains_deprecated.RetrieveDomainDeprecatedHandler
	// EventsRetrieveEventHandler sets the operation handler for the retrieve event operation
	EventsRetrieveEventHandler events.RetrieveEventHandler
	// FilesRetrieveFileHandler sets the operation handler for the retrieve file operation
	FilesRetrieveFileHandler files.RetrieveFileHandler
	// JobsRetrieveJobThatWasSuccessfulHandler sets the operation handler for the retrieve job that was successful operation
	JobsRetrieveJobThatWasSuccessfulHandler jobs.RetrieveJobThatWasSuccessfulHandler
	// OrganizationsRetrieveOrganizationHandler sets the operation handler for the retrieve organization operation
	OrganizationsRetrieveOrganizationHandler organizations.RetrieveOrganizationHandler
	// OrganizationQuotaDefinitionsRetrieveOrganizationQuotaDefinitionHandler sets the operation handler for the retrieve organization quota definition operation
	OrganizationQuotaDefinitionsRetrieveOrganizationQuotaDefinitionHandler organization_quota_definitions.RetrieveOrganizationQuotaDefinitionHandler
	// PrivateDomainsRetrievePrivateDomainHandler sets the operation handler for the retrieve private domain operation
	PrivateDomainsRetrievePrivateDomainHandler private_domains.RetrievePrivateDomainHandler
	// RoutesRetrieveRouteHandler sets the operation handler for the retrieve route operation
	RoutesRetrieveRouteHandler routes.RetrieveRouteHandler
	// SecurityGroupsRetrieveSecurityGroupHandler sets the operation handler for the retrieve security group operation
	SecurityGroupsRetrieveSecurityGroupHandler security_groups.RetrieveSecurityGroupHandler
	// ServicesRetrieveServiceHandler sets the operation handler for the retrieve service operation
	ServicesRetrieveServiceHandler services.RetrieveServiceHandler
	// ServiceAuthTokensDeprecatedRetrieveServiceAuthTokenDeprecatedHandler sets the operation handler for the retrieve service auth token deprecated operation
	ServiceAuthTokensDeprecatedRetrieveServiceAuthTokenDeprecatedHandler service_auth_tokens_deprecated.RetrieveServiceAuthTokenDeprecatedHandler
	// ServiceBindingsRetrieveServiceBindingHandler sets the operation handler for the retrieve service binding operation
	ServiceBindingsRetrieveServiceBindingHandler service_bindings.RetrieveServiceBindingHandler
	// ServiceBrokersRetrieveServiceBrokerHandler sets the operation handler for the retrieve service broker operation
	ServiceBrokersRetrieveServiceBrokerHandler service_brokers.RetrieveServiceBrokerHandler
	// ServiceInstancesRetrieveServiceInstanceHandler sets the operation handler for the retrieve service instance operation
	ServiceInstancesRetrieveServiceInstanceHandler service_instances.RetrieveServiceInstanceHandler
	// ServicePlansRetrieveServicePlanHandler sets the operation handler for the retrieve service plan operation
	ServicePlansRetrieveServicePlanHandler service_plans.RetrieveServicePlanHandler
	// ServicePlanVisibilitiesRetrieveServicePlanVisibilityHandler sets the operation handler for the retrieve service plan visibility operation
	ServicePlanVisibilitiesRetrieveServicePlanVisibilityHandler service_plan_visibilities.RetrieveServicePlanVisibilityHandler
	// ServiceUsageEventsExperimentalRetrieveServiceUsageEventHandler sets the operation handler for the retrieve service usage event operation
	ServiceUsageEventsExperimentalRetrieveServiceUsageEventHandler service_usage_events_experimental.RetrieveServiceUsageEventHandler
	// SharedDomainsRetrieveSharedDomainHandler sets the operation handler for the retrieve shared domain operation
	SharedDomainsRetrieveSharedDomainHandler shared_domains.RetrieveSharedDomainHandler
	// SpacesRetrieveSpaceHandler sets the operation handler for the retrieve space operation
	SpacesRetrieveSpaceHandler spaces.RetrieveSpaceHandler
	// SpaceQuotaDefinitionsRetrieveSpaceQuotaDefinitionHandler sets the operation handler for the retrieve space quota definition operation
	SpaceQuotaDefinitionsRetrieveSpaceQuotaDefinitionHandler space_quota_definitions.RetrieveSpaceQuotaDefinitionHandler
	// StacksRetrieveStackHandler sets the operation handler for the retrieve stack operation
	StacksRetrieveStackHandler stacks.RetrieveStackHandler
	// UsersRetrieveUserHandler sets the operation handler for the retrieve user operation
	UsersRetrieveUserHandler users.RetrieveUserHandler
	// UserProvidedServiceInstancesRetrieveUserProvidedServiceInstanceHandler sets the operation handler for the retrieve user provided service instance operation
	UserProvidedServiceInstancesRetrieveUserProvidedServiceInstanceHandler user_provided_service_instances.RetrieveUserProvidedServiceInstanceHandler
	// OrganizationsRetrievingOrganizationMemoryUsageHandler sets the operation handler for the retrieving organization memory usage operation
	OrganizationsRetrievingOrganizationMemoryUsageHandler organizations.RetrievingOrganizationMemoryUsageHandler
	// ServiceInstancesRetrievingPermissionsOnServiceInstanceHandler sets the operation handler for the retrieving permissions on service instance operation
	ServiceInstancesRetrievingPermissionsOnServiceInstanceHandler service_instances.RetrievingPermissionsOnServiceInstanceHandler
	// SecurityGroupRunningDefaultsReturnSecurityGroupsUsedForRunningAppsHandler sets the operation handler for the return security groups used for running apps operation
	SecurityGroupRunningDefaultsReturnSecurityGroupsUsedForRunningAppsHandler security_group_running_defaults.ReturnSecurityGroupsUsedForRunningAppsHandler
	// SecurityGroupStagingDefaultsReturnSecurityGroupsUsedForStagingHandler sets the operation handler for the return security groups used for staging operation
	SecurityGroupStagingDefaultsReturnSecurityGroupsUsedForStagingHandler security_group_staging_defaults.ReturnSecurityGroupsUsedForStagingHandler
	// FeatureFlagsSetFeatureFlagHandler sets the operation handler for the set feature flag operation
	FeatureFlagsSetFeatureFlagHandler feature_flags.SetFeatureFlagHandler
	// SecurityGroupRunningDefaultsSetSecurityGroupAsDefaultForRunningAppsHandler sets the operation handler for the set security group as default for running apps operation
	SecurityGroupRunningDefaultsSetSecurityGroupAsDefaultForRunningAppsHandler security_group_running_defaults.SetSecurityGroupAsDefaultForRunningAppsHandler
	// SecurityGroupStagingDefaultsSetSecurityGroupAsDefaultForStagingHandler sets the operation handler for the set security group as default for staging operation
	SecurityGroupStagingDefaultsSetSecurityGroupAsDefaultForStagingHandler security_group_staging_defaults.SetSecurityGroupAsDefaultForStagingHandler
	// AppsTerminateRunningAppInstanceAtGivenIndexHandler sets the operation handler for the terminate running app instance at given index operation
	AppsTerminateRunningAppInstanceAtGivenIndexHandler apps.TerminateRunningAppInstanceAtGivenIndexHandler
	// AppsUpdateAppHandler sets the operation handler for the update app operation
	AppsUpdateAppHandler apps.UpdateAppHandler
	// EnvironmentVariableGroupsUpdateContentsOfRunningEnvironmentVariableGroupHandler sets the operation handler for the update contents of running environment variable group operation
	EnvironmentVariableGroupsUpdateContentsOfRunningEnvironmentVariableGroupHandler environment_variable_groups.UpdateContentsOfRunningEnvironmentVariableGroupHandler
	// EnvironmentVariableGroupsUpdateContentsOfStagingEnvironmentVariableGroupHandler sets the operation handler for the update contents of staging environment variable group operation
	EnvironmentVariableGroupsUpdateContentsOfStagingEnvironmentVariableGroupHandler environment_variable_groups.UpdateContentsOfStagingEnvironmentVariableGroupHandler
	// OrganizationsUpdateOrganizationHandler sets the operation handler for the update organization operation
	OrganizationsUpdateOrganizationHandler organizations.UpdateOrganizationHandler
	// OrganizationQuotaDefinitionsUpdateOrganizationQuotaDefinitionHandler sets the operation handler for the update organization quota definition operation
	OrganizationQuotaDefinitionsUpdateOrganizationQuotaDefinitionHandler organization_quota_definitions.UpdateOrganizationQuotaDefinitionHandler
	// RoutesUpdateRouteHandler sets the operation handler for the update route operation
	RoutesUpdateRouteHandler routes.UpdateRouteHandler
	// SecurityGroupsUpdateSecurityGroupHandler sets the operation handler for the update security group operation
	SecurityGroupsUpdateSecurityGroupHandler security_groups.UpdateSecurityGroupHandler
	// ServiceBrokersUpdateServiceBrokerHandler sets the operation handler for the update service broker operation
	ServiceBrokersUpdateServiceBrokerHandler service_brokers.UpdateServiceBrokerHandler
	// ServicesUpdateServiceDeprecatedHandler sets the operation handler for the update service deprecated operation
	ServicesUpdateServiceDeprecatedHandler services.UpdateServiceDeprecatedHandler
	// ServiceInstancesUpdateServiceInstanceHandler sets the operation handler for the update service instance operation
	ServiceInstancesUpdateServiceInstanceHandler service_instances.UpdateServiceInstanceHandler
	// ServicePlansUpdateServicePlanDeprecatedHandler sets the operation handler for the update service plan deprecated operation
	ServicePlansUpdateServicePlanDeprecatedHandler service_plans.UpdateServicePlanDeprecatedHandler
	// ServicePlanVisibilitiesUpdateServicePlanVisibilityHandler sets the operation handler for the update service plan visibility operation
	ServicePlanVisibilitiesUpdateServicePlanVisibilityHandler service_plan_visibilities.UpdateServicePlanVisibilityHandler
	// SpacesUpdateSpaceHandler sets the operation handler for the update space operation
	SpacesUpdateSpaceHandler spaces.UpdateSpaceHandler
	// SpaceQuotaDefinitionsUpdateSpaceQuotaDefinitionHandler sets the operation handler for the update space quota definition operation
	SpaceQuotaDefinitionsUpdateSpaceQuotaDefinitionHandler space_quota_definitions.UpdateSpaceQuotaDefinitionHandler
	// UsersUpdateUserHandler sets the operation handler for the update user operation
	UsersUpdateUserHandler users.UpdateUserHandler
	// UserProvidedServiceInstancesUpdateUserProvidedServiceInstanceHandler sets the operation handler for the update user provided service instance operation
	UserProvidedServiceInstancesUpdateUserProvidedServiceInstanceHandler user_provided_service_instances.UpdateUserProvidedServiceInstanceHandler
	// AppsUploadsBitsForAppHandler sets the operation handler for the uploads bits for app operation
	AppsUploadsBitsForAppHandler apps.UploadsBitsForAppHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *CloudFoundryAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *CloudFoundryAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *CloudFoundryAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CloudFoundryAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CloudFoundryAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CloudFoundryAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CloudFoundryAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CloudFoundryAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CloudFoundryAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CloudFoundryAPI
func (o *CloudFoundryAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AuthGetAuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.GetAuthLoginHandler")
	}
	if o.AuthPostAuthOauthTokenHandler == nil {
		unregistered = append(unregistered, "auth.PostAuthOauthTokenHandler")
	}
	if o.RoutesAssociateAppWithRouteHandler == nil {
		unregistered = append(unregistered, "routes.AssociateAppWithRouteHandler")
	}
	if o.UsersAssociateAuditedOrganizationWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateAuditedOrganizationWithUserHandler")
	}
	if o.UsersAssociateAuditedSpaceWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateAuditedSpaceWithUserHandler")
	}
	if o.OrganizationsAssociateAuditorWithOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.AssociateAuditorWithOrganizationHandler")
	}
	if o.SpacesAssociateAuditorWithSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.AssociateAuditorWithSpaceHandler")
	}
	if o.UsersAssociateBillingManagedOrganizationWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateBillingManagedOrganizationWithUserHandler")
	}
	if o.OrganizationsAssociateBillingManagerWithOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.AssociateBillingManagerWithOrganizationHandler")
	}
	if o.SpacesAssociateDeveloperWithSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.AssociateDeveloperWithSpaceHandler")
	}
	if o.UsersAssociateManagedOrganizationWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateManagedOrganizationWithUserHandler")
	}
	if o.UsersAssociateManagedSpaceWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateManagedSpaceWithUserHandler")
	}
	if o.OrganizationsAssociateManagerWithOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.AssociateManagerWithOrganizationHandler")
	}
	if o.SpacesAssociateManagerWithSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.AssociateManagerWithSpaceHandler")
	}
	if o.UsersAssociateOrganizationWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateOrganizationWithUserHandler")
	}
	if o.AppsAssociateRouteWithAppHandler == nil {
		unregistered = append(unregistered, "apps.AssociateRouteWithAppHandler")
	}
	if o.SpacesAssociateSecurityGroupWithSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.AssociateSecurityGroupWithSpaceHandler")
	}
	if o.SecurityGroupsAssociateSpaceWithSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.AssociateSpaceWithSecurityGroupHandler")
	}
	if o.SpaceQuotaDefinitionsAssociateSpaceWithSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.AssociateSpaceWithSpaceQuotaDefinitionHandler")
	}
	if o.UsersAssociateSpaceWithUserHandler == nil {
		unregistered = append(unregistered, "users.AssociateSpaceWithUserHandler")
	}
	if o.OrganizationsAssociateUserWithOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.AssociateUserWithOrganizationHandler")
	}
	if o.RoutesCheckRouteExistsHandler == nil {
		unregistered = append(unregistered, "routes.CheckRouteExistsHandler")
	}
	if o.AppsCopyAppBitsForAppHandler == nil {
		unregistered = append(unregistered, "apps.CopyAppBitsForAppHandler")
	}
	if o.AppsCreateAppHandler == nil {
		unregistered = append(unregistered, "apps.CreateAppHandler")
	}
	if o.OrganizationsCreateOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.CreateOrganizationHandler")
	}
	if o.OrganizationQuotaDefinitionsCreateOrganizationQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "organization_quota_definitions.CreateOrganizationQuotaDefinitionHandler")
	}
	if o.PrivateDomainsCreatePrivateDomainOwnedByGivenOrganizationHandler == nil {
		unregistered = append(unregistered, "private_domains.CreatePrivateDomainOwnedByGivenOrganizationHandler")
	}
	if o.RoutesCreateRouteHandler == nil {
		unregistered = append(unregistered, "routes.CreateRouteHandler")
	}
	if o.SecurityGroupsCreateSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.CreateSecurityGroupHandler")
	}
	if o.ServiceBindingsCreateServiceBindingHandler == nil {
		unregistered = append(unregistered, "service_bindings.CreateServiceBindingHandler")
	}
	if o.ServiceBrokersCreateServiceBrokerHandler == nil {
		unregistered = append(unregistered, "service_brokers.CreateServiceBrokerHandler")
	}
	if o.ServicesCreateServiceDeprecatedHandler == nil {
		unregistered = append(unregistered, "services.CreateServiceDeprecatedHandler")
	}
	if o.ServiceInstancesCreateServiceInstanceHandler == nil {
		unregistered = append(unregistered, "service_instances.CreateServiceInstanceHandler")
	}
	if o.ServicePlansCreateServicePlanDeprecatedHandler == nil {
		unregistered = append(unregistered, "service_plans.CreateServicePlanDeprecatedHandler")
	}
	if o.ServicePlanVisibilitiesCreateServicePlanVisibilityHandler == nil {
		unregistered = append(unregistered, "service_plan_visibilities.CreateServicePlanVisibilityHandler")
	}
	if o.SharedDomainsCreateSharedDomainHandler == nil {
		unregistered = append(unregistered, "shared_domains.CreateSharedDomainHandler")
	}
	if o.SpacesCreateSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.CreateSpaceHandler")
	}
	if o.SpaceQuotaDefinitionsCreateSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.CreateSpaceQuotaDefinitionHandler")
	}
	if o.UsersCreateUserHandler == nil {
		unregistered = append(unregistered, "users.CreateUserHandler")
	}
	if o.UserProvidedServiceInstancesCreateUserProvidedServiceInstanceHandler == nil {
		unregistered = append(unregistered, "user_provided_service_instances.CreateUserProvidedServiceInstanceHandler")
	}
	if o.BuildpacksCreatesAdminBuildpackHandler == nil {
		unregistered = append(unregistered, "buildpacks.CreatesAdminBuildpackHandler")
	}
	if o.DomainsDeprecatedCreatesDomainOwnedByGivenOrganizationDeprecatedHandler == nil {
		unregistered = append(unregistered, "domains_deprecated.CreatesDomainOwnedByGivenOrganizationDeprecatedHandler")
	}
	if o.AppsDeleteAppHandler == nil {
		unregistered = append(unregistered, "apps.DeleteAppHandler")
	}
	if o.BuildpacksDeleteBuildpackHandler == nil {
		unregistered = append(unregistered, "buildpacks.DeleteBuildpackHandler")
	}
	if o.DomainsDeprecatedDeleteDomainDeprecatedHandler == nil {
		unregistered = append(unregistered, "domains_deprecated.DeleteDomainDeprecatedHandler")
	}
	if o.OrganizationsDeleteOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.DeleteOrganizationHandler")
	}
	if o.OrganizationQuotaDefinitionsDeleteOrganizationQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "organization_quota_definitions.DeleteOrganizationQuotaDefinitionHandler")
	}
	if o.PrivateDomainsDeletePrivateDomainHandler == nil {
		unregistered = append(unregistered, "private_domains.DeletePrivateDomainHandler")
	}
	if o.RoutesDeleteRouteHandler == nil {
		unregistered = append(unregistered, "routes.DeleteRouteHandler")
	}
	if o.SecurityGroupsDeleteSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.DeleteSecurityGroupHandler")
	}
	if o.ServicesDeleteServiceHandler == nil {
		unregistered = append(unregistered, "services.DeleteServiceHandler")
	}
	if o.ServiceAuthTokensDeprecatedDeleteServiceAuthTokenDeprecatedHandler == nil {
		unregistered = append(unregistered, "service_auth_tokens_deprecated.DeleteServiceAuthTokenDeprecatedHandler")
	}
	if o.ServiceBindingsDeleteServiceBindingHandler == nil {
		unregistered = append(unregistered, "service_bindings.DeleteServiceBindingHandler")
	}
	if o.ServiceBrokersDeleteServiceBrokerHandler == nil {
		unregistered = append(unregistered, "service_brokers.DeleteServiceBrokerHandler")
	}
	if o.ServiceInstancesDeleteServiceInstanceHandler == nil {
		unregistered = append(unregistered, "service_instances.DeleteServiceInstanceHandler")
	}
	if o.ServicePlanVisibilitiesDeleteServicePlanVisibilitiesHandler == nil {
		unregistered = append(unregistered, "service_plan_visibilities.DeleteServicePlanVisibilitiesHandler")
	}
	if o.ServicePlansDeleteServicePlansHandler == nil {
		unregistered = append(unregistered, "service_plans.DeleteServicePlansHandler")
	}
	if o.SharedDomainsDeleteSharedDomainHandler == nil {
		unregistered = append(unregistered, "shared_domains.DeleteSharedDomainHandler")
	}
	if o.SpacesDeleteSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.DeleteSpaceHandler")
	}
	if o.SpaceQuotaDefinitionsDeleteSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.DeleteSpaceQuotaDefinitionHandler")
	}
	if o.StacksDeleteStackHandler == nil {
		unregistered = append(unregistered, "stacks.DeleteStackHandler")
	}
	if o.UsersDeleteUserHandler == nil {
		unregistered = append(unregistered, "users.DeleteUserHandler")
	}
	if o.UserProvidedServiceInstancesDeleteUserProvidedServiceInstanceHandler == nil {
		unregistered = append(unregistered, "user_provided_service_instances.DeleteUserProvidedServiceInstanceHandler")
	}
	if o.AppsDownloadsBitsForAppHandler == nil {
		unregistered = append(unregistered, "apps.DownloadsBitsForAppHandler")
	}
	if o.PrivateDomainsFilterPrivateDomainsByNameHandler == nil {
		unregistered = append(unregistered, "private_domains.FilterPrivateDomainsByNameHandler")
	}
	if o.ServiceAuthTokensDeprecatedFilterResultSetByLabelDeprecatedHandler == nil {
		unregistered = append(unregistered, "service_auth_tokens_deprecated.FilterResultSetByLabelDeprecatedHandler")
	}
	if o.FeatureFlagsGetAllFeatureFlagsHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetAllFeatureFlagsHandler")
	}
	if o.FeatureFlagsGetAppBitsUploadFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetAppBitsUploadFeatureFlagHandler")
	}
	if o.FeatureFlagsGetAppScalingFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetAppScalingFeatureFlagHandler")
	}
	if o.AppsGetAppSummaryHandler == nil {
		unregistered = append(unregistered, "apps.GetAppSummaryHandler")
	}
	if o.AppsGetDetailedStatsForStartedAppHandler == nil {
		unregistered = append(unregistered, "apps.GetDetailedStatsForStartedAppHandler")
	}
	if o.AppsGetEnvForAppHandler == nil {
		unregistered = append(unregistered, "apps.GetEnvForAppHandler")
	}
	if o.InfoGetInfoHandler == nil {
		unregistered = append(unregistered, "info.GetInfoHandler")
	}
	if o.AppsGetInstanceInformationForStartedAppHandler == nil {
		unregistered = append(unregistered, "apps.GetInstanceInformationForStartedAppHandler")
	}
	if o.OrganizationsGetOrganizationSummaryHandler == nil {
		unregistered = append(unregistered, "organizations.GetOrganizationSummaryHandler")
	}
	if o.FeatureFlagsGetPrivateDomainCreationFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetPrivateDomainCreationFeatureFlagHandler")
	}
	if o.FeatureFlagsGetRouteCreationFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetRouteCreationFeatureFlagHandler")
	}
	if o.FeatureFlagsGetServiceInstanceCreationFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetServiceInstanceCreationFeatureFlagHandler")
	}
	if o.SpacesGetSpaceSummaryHandler == nil {
		unregistered = append(unregistered, "spaces.GetSpaceSummaryHandler")
	}
	if o.FeatureFlagsGetUserOrgCreationFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.GetUserOrgCreationFeatureFlagHandler")
	}
	if o.UsersGetUserSummaryHandler == nil {
		unregistered = append(unregistered, "users.GetUserSummaryHandler")
	}
	if o.EnvironmentVariableGroupsGettingContentsOfRunningEnvironmentVariableGroupHandler == nil {
		unregistered = append(unregistered, "environment_variable_groups.GettingContentsOfRunningEnvironmentVariableGroupHandler")
	}
	if o.EnvironmentVariableGroupsGettingContentsOfStagingEnvironmentVariableGroupHandler == nil {
		unregistered = append(unregistered, "environment_variable_groups.GettingContentsOfStagingEnvironmentVariableGroupHandler")
	}
	if o.AppUsageEventsListAllAppUsageEventsHandler == nil {
		unregistered = append(unregistered, "app_usage_events.ListAllAppUsageEventsHandler")
	}
	if o.AppsListAllAppsHandler == nil {
		unregistered = append(unregistered, "apps.ListAllAppsHandler")
	}
	if o.RoutesListAllAppsForRouteHandler == nil {
		unregistered = append(unregistered, "routes.ListAllAppsForRouteHandler")
	}
	if o.SpacesListAllAppsForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllAppsForSpaceHandler")
	}
	if o.UsersListAllAuditedOrganizationsForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllAuditedOrganizationsForUserHandler")
	}
	if o.UsersListAllAuditedSpacesForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllAuditedSpacesForUserHandler")
	}
	if o.OrganizationsListAllAuditorsForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllAuditorsForOrganizationHandler")
	}
	if o.SpacesListAllAuditorsForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllAuditorsForSpaceHandler")
	}
	if o.UsersListAllBillingManagedOrganizationsForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllBillingManagedOrganizationsForUserHandler")
	}
	if o.OrganizationsListAllBillingManagersForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllBillingManagersForOrganizationHandler")
	}
	if o.BuildpacksListAllBuildpacksHandler == nil {
		unregistered = append(unregistered, "buildpacks.ListAllBuildpacksHandler")
	}
	if o.SpacesListAllDevelopersForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllDevelopersForSpaceHandler")
	}
	if o.DomainsDeprecatedListAllDomainsDeprecatedHandler == nil {
		unregistered = append(unregistered, "domains_deprecated.ListAllDomainsDeprecatedHandler")
	}
	if o.OrganizationsListAllDomainsForOrganizationDeprecatedHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllDomainsForOrganizationDeprecatedHandler")
	}
	if o.SpacesListAllDomainsForSpaceDeprecatedHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllDomainsForSpaceDeprecatedHandler")
	}
	if o.SpacesListAllEventsForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllEventsForSpaceHandler")
	}
	if o.UsersListAllManagedOrganizationsForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllManagedOrganizationsForUserHandler")
	}
	if o.UsersListAllManagedSpacesForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllManagedSpacesForUserHandler")
	}
	if o.OrganizationsListAllManagersForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllManagersForOrganizationHandler")
	}
	if o.SpacesListAllManagersForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllManagersForSpaceHandler")
	}
	if o.ResourceMatchListAllMatchingResourcesHandler == nil {
		unregistered = append(unregistered, "resource_match.ListAllMatchingResourcesHandler")
	}
	if o.OrganizationQuotaDefinitionsListAllOrganizationQuotaDefinitionsHandler == nil {
		unregistered = append(unregistered, "organization_quota_definitions.ListAllOrganizationQuotaDefinitionsHandler")
	}
	if o.OrganizationsListAllOrganizationsHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllOrganizationsHandler")
	}
	if o.UsersListAllOrganizationsForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllOrganizationsForUserHandler")
	}
	if o.OrganizationsListAllPrivateDomainsForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllPrivateDomainsForOrganizationHandler")
	}
	if o.RoutesListAllRoutesHandler == nil {
		unregistered = append(unregistered, "routes.ListAllRoutesHandler")
	}
	if o.AppsListAllRoutesForAppHandler == nil {
		unregistered = append(unregistered, "apps.ListAllRoutesForAppHandler")
	}
	if o.SpacesListAllRoutesForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllRoutesForSpaceHandler")
	}
	if o.SecurityGroupsListAllSecurityGroupsHandler == nil {
		unregistered = append(unregistered, "security_groups.ListAllSecurityGroupsHandler")
	}
	if o.SpacesListAllSecurityGroupsForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllSecurityGroupsForSpaceHandler")
	}
	if o.ServiceBindingsListAllServiceBindingsHandler == nil {
		unregistered = append(unregistered, "service_bindings.ListAllServiceBindingsHandler")
	}
	if o.AppsListAllServiceBindingsForAppHandler == nil {
		unregistered = append(unregistered, "apps.ListAllServiceBindingsForAppHandler")
	}
	if o.ServiceInstancesListAllServiceBindingsForServiceInstanceHandler == nil {
		unregistered = append(unregistered, "service_instances.ListAllServiceBindingsForServiceInstanceHandler")
	}
	if o.UserProvidedServiceInstancesListAllServiceBindingsForUserProvidedServiceInstanceHandler == nil {
		unregistered = append(unregistered, "user_provided_service_instances.ListAllServiceBindingsForUserProvidedServiceInstanceHandler")
	}
	if o.ServiceBrokersListAllServiceBrokersHandler == nil {
		unregistered = append(unregistered, "service_brokers.ListAllServiceBrokersHandler")
	}
	if o.ServiceInstancesListAllServiceInstancesHandler == nil {
		unregistered = append(unregistered, "service_instances.ListAllServiceInstancesHandler")
	}
	if o.SpacesListAllServiceInstancesForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllServiceInstancesForSpaceHandler")
	}
	if o.ServicePlanVisibilitiesListAllServicePlanVisibilitiesHandler == nil {
		unregistered = append(unregistered, "service_plan_visibilities.ListAllServicePlanVisibilitiesHandler")
	}
	if o.ServicePlansListAllServicePlansHandler == nil {
		unregistered = append(unregistered, "service_plans.ListAllServicePlansHandler")
	}
	if o.ServicesListAllServicePlansForServiceHandler == nil {
		unregistered = append(unregistered, "services.ListAllServicePlansForServiceHandler")
	}
	if o.ServicesListAllServicesHandler == nil {
		unregistered = append(unregistered, "services.ListAllServicesHandler")
	}
	if o.OrganizationsListAllServicesForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllServicesForOrganizationHandler")
	}
	if o.SpacesListAllServicesForSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllServicesForSpaceHandler")
	}
	if o.SharedDomainsListAllSharedDomainsHandler == nil {
		unregistered = append(unregistered, "shared_domains.ListAllSharedDomainsHandler")
	}
	if o.SpaceQuotaDefinitionsListAllSpaceQuotaDefinitionsHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.ListAllSpaceQuotaDefinitionsHandler")
	}
	if o.OrganizationsListAllSpaceQuotaDefinitionsForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllSpaceQuotaDefinitionsForOrganizationHandler")
	}
	if o.SpacesListAllSpacesHandler == nil {
		unregistered = append(unregistered, "spaces.ListAllSpacesHandler")
	}
	if o.DomainsDeprecatedListAllSpacesForDomainDeprecatedHandler == nil {
		unregistered = append(unregistered, "domains_deprecated.ListAllSpacesForDomainDeprecatedHandler")
	}
	if o.OrganizationsListAllSpacesForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllSpacesForOrganizationHandler")
	}
	if o.SecurityGroupsListAllSpacesForSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.ListAllSpacesForSecurityGroupHandler")
	}
	if o.SpaceQuotaDefinitionsListAllSpacesForSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.ListAllSpacesForSpaceQuotaDefinitionHandler")
	}
	if o.UsersListAllSpacesForUserHandler == nil {
		unregistered = append(unregistered, "users.ListAllSpacesForUserHandler")
	}
	if o.StacksListAllStacksHandler == nil {
		unregistered = append(unregistered, "stacks.ListAllStacksHandler")
	}
	if o.UserProvidedServiceInstancesListAllUserProvidedServiceInstancesHandler == nil {
		unregistered = append(unregistered, "user_provided_service_instances.ListAllUserProvidedServiceInstancesHandler")
	}
	if o.UsersListAllUsersHandler == nil {
		unregistered = append(unregistered, "users.ListAllUsersHandler")
	}
	if o.OrganizationsListAllUsersForOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.ListAllUsersForOrganizationHandler")
	}
	if o.EventsListServiceBrokerDeleteEventsExperimentalHandler == nil {
		unregistered = append(unregistered, "events.ListServiceBrokerDeleteEventsExperimentalHandler")
	}
	if o.ServiceUsageEventsExperimentalListServiceUsageEventsHandler == nil {
		unregistered = append(unregistered, "service_usage_events_experimental.ListServiceUsageEventsHandler")
	}
	if o.BuildpacksLockOrUnlockBuildpackHandler == nil {
		unregistered = append(unregistered, "buildpacks.LockOrUnlockBuildpackHandler")
	}
	if o.ServiceInstancesMigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler == nil {
		unregistered = append(unregistered, "service_instances.MigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler")
	}
	if o.AppUsageEventsPurgeAndReseedAppUsageEventsHandler == nil {
		unregistered = append(unregistered, "app_usage_events.PurgeAndReseedAppUsageEventsHandler")
	}
	if o.ServiceUsageEventsExperimentalPurgeAndReseedServiceUsageEventsHandler == nil {
		unregistered = append(unregistered, "service_usage_events_experimental.PurgeAndReseedServiceUsageEventsHandler")
	}
	if o.RoutesRemoveAppFromRouteHandler == nil {
		unregistered = append(unregistered, "routes.RemoveAppFromRouteHandler")
	}
	if o.UsersRemoveAuditedOrganizationFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveAuditedOrganizationFromUserHandler")
	}
	if o.UsersRemoveAuditedSpaceFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveAuditedSpaceFromUserHandler")
	}
	if o.OrganizationsRemoveAuditorFromOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.RemoveAuditorFromOrganizationHandler")
	}
	if o.SpacesRemoveAuditorFromSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.RemoveAuditorFromSpaceHandler")
	}
	if o.UsersRemoveBillingManagedOrganizationFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveBillingManagedOrganizationFromUserHandler")
	}
	if o.OrganizationsRemoveBillingManagerFromOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.RemoveBillingManagerFromOrganizationHandler")
	}
	if o.SpacesRemoveDeveloperFromSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.RemoveDeveloperFromSpaceHandler")
	}
	if o.UsersRemoveManagedOrganizationFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveManagedOrganizationFromUserHandler")
	}
	if o.UsersRemoveManagedSpaceFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveManagedSpaceFromUserHandler")
	}
	if o.OrganizationsRemoveManagerFromOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.RemoveManagerFromOrganizationHandler")
	}
	if o.SpacesRemoveManagerFromSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.RemoveManagerFromSpaceHandler")
	}
	if o.UsersRemoveOrganizationFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveOrganizationFromUserHandler")
	}
	if o.AppsRemoveRouteFromAppHandler == nil {
		unregistered = append(unregistered, "apps.RemoveRouteFromAppHandler")
	}
	if o.SpacesRemoveSecurityGroupFromSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.RemoveSecurityGroupFromSpaceHandler")
	}
	if o.AppsRemoveServiceBindingFromAppHandler == nil {
		unregistered = append(unregistered, "apps.RemoveServiceBindingFromAppHandler")
	}
	if o.SecurityGroupsRemoveSpaceFromSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.RemoveSpaceFromSecurityGroupHandler")
	}
	if o.SpaceQuotaDefinitionsRemoveSpaceFromSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.RemoveSpaceFromSpaceQuotaDefinitionHandler")
	}
	if o.UsersRemoveSpaceFromUserHandler == nil {
		unregistered = append(unregistered, "users.RemoveSpaceFromUserHandler")
	}
	if o.OrganizationsRemoveUserFromOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.RemoveUserFromOrganizationHandler")
	}
	if o.SecurityGroupRunningDefaultsRemovingSecurityGroupAsDefaultForRunningAppsHandler == nil {
		unregistered = append(unregistered, "security_group_running_defaults.RemovingSecurityGroupAsDefaultForRunningAppsHandler")
	}
	if o.SecurityGroupStagingDefaultsRemovingSecurityGroupAsDefaultForStagingHandler == nil {
		unregistered = append(unregistered, "security_group_staging_defaults.RemovingSecurityGroupAsDefaultForStagingHandler")
	}
	if o.AppsRestageAppHandler == nil {
		unregistered = append(unregistered, "apps.RestageAppHandler")
	}
	if o.AppsRetrieveAppHandler == nil {
		unregistered = append(unregistered, "apps.RetrieveAppHandler")
	}
	if o.AppUsageEventsRetrieveAppUsageEventHandler == nil {
		unregistered = append(unregistered, "app_usage_events.RetrieveAppUsageEventHandler")
	}
	if o.BuildpacksRetrieveBuildpackHandler == nil {
		unregistered = append(unregistered, "buildpacks.RetrieveBuildpackHandler")
	}
	if o.DomainsDeprecatedRetrieveDomainDeprecatedHandler == nil {
		unregistered = append(unregistered, "domains_deprecated.RetrieveDomainDeprecatedHandler")
	}
	if o.EventsRetrieveEventHandler == nil {
		unregistered = append(unregistered, "events.RetrieveEventHandler")
	}
	if o.FilesRetrieveFileHandler == nil {
		unregistered = append(unregistered, "files.RetrieveFileHandler")
	}
	if o.JobsRetrieveJobThatWasSuccessfulHandler == nil {
		unregistered = append(unregistered, "jobs.RetrieveJobThatWasSuccessfulHandler")
	}
	if o.OrganizationsRetrieveOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.RetrieveOrganizationHandler")
	}
	if o.OrganizationQuotaDefinitionsRetrieveOrganizationQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "organization_quota_definitions.RetrieveOrganizationQuotaDefinitionHandler")
	}
	if o.PrivateDomainsRetrievePrivateDomainHandler == nil {
		unregistered = append(unregistered, "private_domains.RetrievePrivateDomainHandler")
	}
	if o.RoutesRetrieveRouteHandler == nil {
		unregistered = append(unregistered, "routes.RetrieveRouteHandler")
	}
	if o.SecurityGroupsRetrieveSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.RetrieveSecurityGroupHandler")
	}
	if o.ServicesRetrieveServiceHandler == nil {
		unregistered = append(unregistered, "services.RetrieveServiceHandler")
	}
	if o.ServiceAuthTokensDeprecatedRetrieveServiceAuthTokenDeprecatedHandler == nil {
		unregistered = append(unregistered, "service_auth_tokens_deprecated.RetrieveServiceAuthTokenDeprecatedHandler")
	}
	if o.ServiceBindingsRetrieveServiceBindingHandler == nil {
		unregistered = append(unregistered, "service_bindings.RetrieveServiceBindingHandler")
	}
	if o.ServiceBrokersRetrieveServiceBrokerHandler == nil {
		unregistered = append(unregistered, "service_brokers.RetrieveServiceBrokerHandler")
	}
	if o.ServiceInstancesRetrieveServiceInstanceHandler == nil {
		unregistered = append(unregistered, "service_instances.RetrieveServiceInstanceHandler")
	}
	if o.ServicePlansRetrieveServicePlanHandler == nil {
		unregistered = append(unregistered, "service_plans.RetrieveServicePlanHandler")
	}
	if o.ServicePlanVisibilitiesRetrieveServicePlanVisibilityHandler == nil {
		unregistered = append(unregistered, "service_plan_visibilities.RetrieveServicePlanVisibilityHandler")
	}
	if o.ServiceUsageEventsExperimentalRetrieveServiceUsageEventHandler == nil {
		unregistered = append(unregistered, "service_usage_events_experimental.RetrieveServiceUsageEventHandler")
	}
	if o.SharedDomainsRetrieveSharedDomainHandler == nil {
		unregistered = append(unregistered, "shared_domains.RetrieveSharedDomainHandler")
	}
	if o.SpacesRetrieveSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.RetrieveSpaceHandler")
	}
	if o.SpaceQuotaDefinitionsRetrieveSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.RetrieveSpaceQuotaDefinitionHandler")
	}
	if o.StacksRetrieveStackHandler == nil {
		unregistered = append(unregistered, "stacks.RetrieveStackHandler")
	}
	if o.UsersRetrieveUserHandler == nil {
		unregistered = append(unregistered, "users.RetrieveUserHandler")
	}
	if o.UserProvidedServiceInstancesRetrieveUserProvidedServiceInstanceHandler == nil {
		unregistered = append(unregistered, "user_provided_service_instances.RetrieveUserProvidedServiceInstanceHandler")
	}
	if o.OrganizationsRetrievingOrganizationMemoryUsageHandler == nil {
		unregistered = append(unregistered, "organizations.RetrievingOrganizationMemoryUsageHandler")
	}
	if o.ServiceInstancesRetrievingPermissionsOnServiceInstanceHandler == nil {
		unregistered = append(unregistered, "service_instances.RetrievingPermissionsOnServiceInstanceHandler")
	}
	if o.SecurityGroupRunningDefaultsReturnSecurityGroupsUsedForRunningAppsHandler == nil {
		unregistered = append(unregistered, "security_group_running_defaults.ReturnSecurityGroupsUsedForRunningAppsHandler")
	}
	if o.SecurityGroupStagingDefaultsReturnSecurityGroupsUsedForStagingHandler == nil {
		unregistered = append(unregistered, "security_group_staging_defaults.ReturnSecurityGroupsUsedForStagingHandler")
	}
	if o.FeatureFlagsSetFeatureFlagHandler == nil {
		unregistered = append(unregistered, "feature_flags.SetFeatureFlagHandler")
	}
	if o.SecurityGroupRunningDefaultsSetSecurityGroupAsDefaultForRunningAppsHandler == nil {
		unregistered = append(unregistered, "security_group_running_defaults.SetSecurityGroupAsDefaultForRunningAppsHandler")
	}
	if o.SecurityGroupStagingDefaultsSetSecurityGroupAsDefaultForStagingHandler == nil {
		unregistered = append(unregistered, "security_group_staging_defaults.SetSecurityGroupAsDefaultForStagingHandler")
	}
	if o.AppsTerminateRunningAppInstanceAtGivenIndexHandler == nil {
		unregistered = append(unregistered, "apps.TerminateRunningAppInstanceAtGivenIndexHandler")
	}
	if o.AppsUpdateAppHandler == nil {
		unregistered = append(unregistered, "apps.UpdateAppHandler")
	}
	if o.EnvironmentVariableGroupsUpdateContentsOfRunningEnvironmentVariableGroupHandler == nil {
		unregistered = append(unregistered, "environment_variable_groups.UpdateContentsOfRunningEnvironmentVariableGroupHandler")
	}
	if o.EnvironmentVariableGroupsUpdateContentsOfStagingEnvironmentVariableGroupHandler == nil {
		unregistered = append(unregistered, "environment_variable_groups.UpdateContentsOfStagingEnvironmentVariableGroupHandler")
	}
	if o.OrganizationsUpdateOrganizationHandler == nil {
		unregistered = append(unregistered, "organizations.UpdateOrganizationHandler")
	}
	if o.OrganizationQuotaDefinitionsUpdateOrganizationQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "organization_quota_definitions.UpdateOrganizationQuotaDefinitionHandler")
	}
	if o.RoutesUpdateRouteHandler == nil {
		unregistered = append(unregistered, "routes.UpdateRouteHandler")
	}
	if o.SecurityGroupsUpdateSecurityGroupHandler == nil {
		unregistered = append(unregistered, "security_groups.UpdateSecurityGroupHandler")
	}
	if o.ServiceBrokersUpdateServiceBrokerHandler == nil {
		unregistered = append(unregistered, "service_brokers.UpdateServiceBrokerHandler")
	}
	if o.ServicesUpdateServiceDeprecatedHandler == nil {
		unregistered = append(unregistered, "services.UpdateServiceDeprecatedHandler")
	}
	if o.ServiceInstancesUpdateServiceInstanceHandler == nil {
		unregistered = append(unregistered, "service_instances.UpdateServiceInstanceHandler")
	}
	if o.ServicePlansUpdateServicePlanDeprecatedHandler == nil {
		unregistered = append(unregistered, "service_plans.UpdateServicePlanDeprecatedHandler")
	}
	if o.ServicePlanVisibilitiesUpdateServicePlanVisibilityHandler == nil {
		unregistered = append(unregistered, "service_plan_visibilities.UpdateServicePlanVisibilityHandler")
	}
	if o.SpacesUpdateSpaceHandler == nil {
		unregistered = append(unregistered, "spaces.UpdateSpaceHandler")
	}
	if o.SpaceQuotaDefinitionsUpdateSpaceQuotaDefinitionHandler == nil {
		unregistered = append(unregistered, "space_quota_definitions.UpdateSpaceQuotaDefinitionHandler")
	}
	if o.UsersUpdateUserHandler == nil {
		unregistered = append(unregistered, "users.UpdateUserHandler")
	}
	if o.UserProvidedServiceInstancesUpdateUserProvidedServiceInstanceHandler == nil {
		unregistered = append(unregistered, "user_provided_service_instances.UpdateUserProvidedServiceInstanceHandler")
	}
	if o.AppsUploadsBitsForAppHandler == nil {
		unregistered = append(unregistered, "apps.UploadsBitsForAppHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CloudFoundryAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CloudFoundryAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *CloudFoundryAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *CloudFoundryAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *CloudFoundryAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CloudFoundryAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the cloud foundry API
func (o *CloudFoundryAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CloudFoundryAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/login"] = auth.NewGetAuthLogin(o.context, o.AuthGetAuthLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/oauth/token"] = auth.NewPostAuthOauthToken(o.context, o.AuthPostAuthOauthTokenHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/routes/{guid}/apps/{app_guid}"] = routes.NewAssociateAppWithRoute(o.context, o.RoutesAssociateAppWithRouteHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/audited_organizations/{audited_organization_guid}"] = users.NewAssociateAuditedOrganizationWithUser(o.context, o.UsersAssociateAuditedOrganizationWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/audited_spaces/{audited_space_guid}"] = users.NewAssociateAuditedSpaceWithUser(o.context, o.UsersAssociateAuditedSpaceWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organizations/{guid}/auditors/{auditor_guid}"] = organizations.NewAssociateAuditorWithOrganization(o.context, o.OrganizationsAssociateAuditorWithOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/spaces/{guid}/auditors/{auditor_guid}"] = spaces.NewAssociateAuditorWithSpace(o.context, o.SpacesAssociateAuditorWithSpaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/billing_managed_organizations/{billing_managed_organization_guid}"] = users.NewAssociateBillingManagedOrganizationWithUser(o.context, o.UsersAssociateBillingManagedOrganizationWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organizations/{guid}/billing_managers/{billing_manager_guid}"] = organizations.NewAssociateBillingManagerWithOrganization(o.context, o.OrganizationsAssociateBillingManagerWithOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/spaces/{guid}/developers/{developer_guid}"] = spaces.NewAssociateDeveloperWithSpace(o.context, o.SpacesAssociateDeveloperWithSpaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/managed_organizations/{managed_organization_guid}"] = users.NewAssociateManagedOrganizationWithUser(o.context, o.UsersAssociateManagedOrganizationWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/managed_spaces/{managed_space_guid}"] = users.NewAssociateManagedSpaceWithUser(o.context, o.UsersAssociateManagedSpaceWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organizations/{guid}/managers/{manager_guid}"] = organizations.NewAssociateManagerWithOrganization(o.context, o.OrganizationsAssociateManagerWithOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/spaces/{guid}/managers/{manager_guid}"] = spaces.NewAssociateManagerWithSpace(o.context, o.SpacesAssociateManagerWithSpaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/organizations/{organization_guid}"] = users.NewAssociateOrganizationWithUser(o.context, o.UsersAssociateOrganizationWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apps/{guid}/routes/{route_guid}"] = apps.NewAssociateRouteWithApp(o.context, o.AppsAssociateRouteWithAppHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/spaces/{guid}/security_groups/{security_group_guid}"] = spaces.NewAssociateSecurityGroupWithSpace(o.context, o.SpacesAssociateSecurityGroupWithSpaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/security_groups/{guid}/spaces/{space_guid}"] = security_groups.NewAssociateSpaceWithSecurityGroup(o.context, o.SecurityGroupsAssociateSpaceWithSecurityGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/space_quota_definitions/{guid}/spaces/{space_guid}"] = space_quota_definitions.NewAssociateSpaceWithSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsAssociateSpaceWithSpaceQuotaDefinitionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}/spaces/{space_guid}"] = users.NewAssociateSpaceWithUser(o.context, o.UsersAssociateSpaceWithUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organizations/{guid}/users/{user_guid}"] = organizations.NewAssociateUserWithOrganization(o.context, o.OrganizationsAssociateUserWithOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes/reserved/domain/{domain_guid}/host/{host}"] = routes.NewCheckRouteExists(o.context, o.RoutesCheckRouteExistsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apps/{guid}/copy_bits"] = apps.NewCopyAppBitsForApp(o.context, o.AppsCopyAppBitsForAppHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apps"] = apps.NewCreateApp(o.context, o.AppsCreateAppHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/organizations"] = organizations.NewCreateOrganization(o.context, o.OrganizationsCreateOrganizationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quota_definitions"] = organization_quota_definitions.NewCreateOrganizationQuotaDefinition(o.context, o.OrganizationQuotaDefinitionsCreateOrganizationQuotaDefinitionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/private_domains"] = private_domains.NewCreatePrivateDomainOwnedByGivenOrganization(o.context, o.PrivateDomainsCreatePrivateDomainOwnedByGivenOrganizationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/routes"] = routes.NewCreateRoute(o.context, o.RoutesCreateRouteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/security_groups"] = security_groups.NewCreateSecurityGroup(o.context, o.SecurityGroupsCreateSecurityGroupHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_bindings"] = service_bindings.NewCreateServiceBinding(o.context, o.ServiceBindingsCreateServiceBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_brokers"] = service_brokers.NewCreateServiceBroker(o.context, o.ServiceBrokersCreateServiceBrokerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/services"] = services.NewCreateServiceDeprecated(o.context, o.ServicesCreateServiceDeprecatedHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_instances"] = service_instances.NewCreateServiceInstance(o.context, o.ServiceInstancesCreateServiceInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_plans"] = service_plans.NewCreateServicePlanDeprecated(o.context, o.ServicePlansCreateServicePlanDeprecatedHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_plan_visibilities"] = service_plan_visibilities.NewCreateServicePlanVisibility(o.context, o.ServicePlanVisibilitiesCreateServicePlanVisibilityHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/shared_domains"] = shared_domains.NewCreateSharedDomain(o.context, o.SharedDomainsCreateSharedDomainHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/spaces"] = spaces.NewCreateSpace(o.context, o.SpacesCreateSpaceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/space_quota_definitions"] = space_quota_definitions.NewCreateSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsCreateSpaceQuotaDefinitionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = users.NewCreateUser(o.context, o.UsersCreateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user_provided_service_instances"] = user_provided_service_instances.NewCreateUserProvidedServiceInstance(o.context, o.UserProvidedServiceInstancesCreateUserProvidedServiceInstanceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/buildpacks"] = buildpacks.NewCreatesAdminBuildpack(o.context, o.BuildpacksCreatesAdminBuildpackHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/domains"] = domains_deprecated.NewCreatesDomainOwnedByGivenOrganizationDeprecated(o.context, o.DomainsDeprecatedCreatesDomainOwnedByGivenOrganizationDeprecatedHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apps/{guid}"] = apps.NewDeleteApp(o.context, o.AppsDeleteAppHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/buildpacks/{guid}"] = buildpacks.NewDeleteBuildpack(o.context, o.BuildpacksDeleteBuildpackHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/domains/{guid}"] = domains_deprecated.NewDeleteDomainDeprecated(o.context, o.DomainsDeprecatedDeleteDomainDeprecatedHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organizations/{guid}"] = organizations.NewDeleteOrganization(o.context, o.OrganizationsDeleteOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/quota_definitions/{guid}"] = organization_quota_definitions.NewDeleteOrganizationQuotaDefinition(o.context, o.OrganizationQuotaDefinitionsDeleteOrganizationQuotaDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/private_domains/{guid}"] = private_domains.NewDeletePrivateDomain(o.context, o.PrivateDomainsDeletePrivateDomainHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/routes/{guid}"] = routes.NewDeleteRoute(o.context, o.RoutesDeleteRouteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/security_groups/{guid}"] = security_groups.NewDeleteSecurityGroup(o.context, o.SecurityGroupsDeleteSecurityGroupHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/services/{guid}"] = services.NewDeleteService(o.context, o.ServicesDeleteServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_auth_tokens/{guid}"] = service_auth_tokens_deprecated.NewDeleteServiceAuthTokenDeprecated(o.context, o.ServiceAuthTokensDeprecatedDeleteServiceAuthTokenDeprecatedHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_bindings/{guid}"] = service_bindings.NewDeleteServiceBinding(o.context, o.ServiceBindingsDeleteServiceBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_brokers/{guid}"] = service_brokers.NewDeleteServiceBroker(o.context, o.ServiceBrokersDeleteServiceBrokerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_instances/{guid}"] = service_instances.NewDeleteServiceInstance(o.context, o.ServiceInstancesDeleteServiceInstanceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_plan_visibilities/{guid}"] = service_plan_visibilities.NewDeleteServicePlanVisibilities(o.context, o.ServicePlanVisibilitiesDeleteServicePlanVisibilitiesHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/service_plans/{guid}"] = service_plans.NewDeleteServicePlans(o.context, o.ServicePlansDeleteServicePlansHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/shared_domains/{guid}"] = shared_domains.NewDeleteSharedDomain(o.context, o.SharedDomainsDeleteSharedDomainHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/spaces/{guid}"] = spaces.NewDeleteSpace(o.context, o.SpacesDeleteSpaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/space_quota_definitions/{guid}"] = space_quota_definitions.NewDeleteSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsDeleteSpaceQuotaDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/stacks/{guid}"] = stacks.NewDeleteStack(o.context, o.StacksDeleteStackHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}"] = users.NewDeleteUser(o.context, o.UsersDeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user_provided_service_instances/{guid}"] = user_provided_service_instances.NewDeleteUserProvidedServiceInstance(o.context, o.UserProvidedServiceInstancesDeleteUserProvidedServiceInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/download"] = apps.NewDownloadsBitsForApp(o.context, o.AppsDownloadsBitsForAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/private_domains"] = private_domains.NewFilterPrivateDomainsByName(o.context, o.PrivateDomainsFilterPrivateDomainsByNameHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_auth_tokens"] = service_auth_tokens_deprecated.NewFilterResultSetByLabelDeprecated(o.context, o.ServiceAuthTokensDeprecatedFilterResultSetByLabelDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags"] = feature_flags.NewGetAllFeatureFlags(o.context, o.FeatureFlagsGetAllFeatureFlagsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags/app_bits_upload"] = feature_flags.NewGetAppBitsUploadFeatureFlag(o.context, o.FeatureFlagsGetAppBitsUploadFeatureFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags/app_scaling"] = feature_flags.NewGetAppScalingFeatureFlag(o.context, o.FeatureFlagsGetAppScalingFeatureFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/summary"] = apps.NewGetAppSummary(o.context, o.AppsGetAppSummaryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/stats"] = apps.NewGetDetailedStatsForStartedApp(o.context, o.AppsGetDetailedStatsForStartedAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/env"] = apps.NewGetEnvForApp(o.context, o.AppsGetEnvForAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info"] = info.NewGetInfo(o.context, o.InfoGetInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/instances"] = apps.NewGetInstanceInformationForStartedApp(o.context, o.AppsGetInstanceInformationForStartedAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/summary"] = organizations.NewGetOrganizationSummary(o.context, o.OrganizationsGetOrganizationSummaryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags/private_domain_creation"] = feature_flags.NewGetPrivateDomainCreationFeatureFlag(o.context, o.FeatureFlagsGetPrivateDomainCreationFeatureFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags/route_creation"] = feature_flags.NewGetRouteCreationFeatureFlag(o.context, o.FeatureFlagsGetRouteCreationFeatureFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags/service_instance_creation"] = feature_flags.NewGetServiceInstanceCreationFeatureFlag(o.context, o.FeatureFlagsGetServiceInstanceCreationFeatureFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/summary"] = spaces.NewGetSpaceSummary(o.context, o.SpacesGetSpaceSummaryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/feature_flags/user_org_creation"] = feature_flags.NewGetUserOrgCreationFeatureFlag(o.context, o.FeatureFlagsGetUserOrgCreationFeatureFlagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/summary"] = users.NewGetUserSummary(o.context, o.UsersGetUserSummaryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/environment_variable_groups/running"] = environment_variable_groups.NewGettingContentsOfRunningEnvironmentVariableGroup(o.context, o.EnvironmentVariableGroupsGettingContentsOfRunningEnvironmentVariableGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/environment_variable_groups/staging"] = environment_variable_groups.NewGettingContentsOfStagingEnvironmentVariableGroup(o.context, o.EnvironmentVariableGroupsGettingContentsOfStagingEnvironmentVariableGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/app_usage_events"] = app_usage_events.NewListAllAppUsageEvents(o.context, o.AppUsageEventsListAllAppUsageEventsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps"] = apps.NewListAllApps(o.context, o.AppsListAllAppsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes/{guid}/apps"] = routes.NewListAllAppsForRoute(o.context, o.RoutesListAllAppsForRouteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/apps"] = spaces.NewListAllAppsForSpace(o.context, o.SpacesListAllAppsForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/audited_organizations"] = users.NewListAllAuditedOrganizationsForUser(o.context, o.UsersListAllAuditedOrganizationsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/audited_spaces"] = users.NewListAllAuditedSpacesForUser(o.context, o.UsersListAllAuditedSpacesForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/auditors"] = organizations.NewListAllAuditorsForOrganization(o.context, o.OrganizationsListAllAuditorsForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/auditors"] = spaces.NewListAllAuditorsForSpace(o.context, o.SpacesListAllAuditorsForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/billing_managed_organizations"] = users.NewListAllBillingManagedOrganizationsForUser(o.context, o.UsersListAllBillingManagedOrganizationsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/billing_managers"] = organizations.NewListAllBillingManagersForOrganization(o.context, o.OrganizationsListAllBillingManagersForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buildpacks"] = buildpacks.NewListAllBuildpacks(o.context, o.BuildpacksListAllBuildpacksHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/developers"] = spaces.NewListAllDevelopersForSpace(o.context, o.SpacesListAllDevelopersForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/domains"] = domains_deprecated.NewListAllDomainsDeprecated(o.context, o.DomainsDeprecatedListAllDomainsDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/domains"] = organizations.NewListAllDomainsForOrganizationDeprecated(o.context, o.OrganizationsListAllDomainsForOrganizationDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/domains"] = spaces.NewListAllDomainsForSpaceDeprecated(o.context, o.SpacesListAllDomainsForSpaceDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/events"] = spaces.NewListAllEventsForSpace(o.context, o.SpacesListAllEventsForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/managed_organizations"] = users.NewListAllManagedOrganizationsForUser(o.context, o.UsersListAllManagedOrganizationsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/managed_spaces"] = users.NewListAllManagedSpacesForUser(o.context, o.UsersListAllManagedSpacesForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/managers"] = organizations.NewListAllManagersForOrganization(o.context, o.OrganizationsListAllManagersForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/managers"] = spaces.NewListAllManagersForSpace(o.context, o.SpacesListAllManagersForSpaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/resource_match"] = resource_match.NewListAllMatchingResources(o.context, o.ResourceMatchListAllMatchingResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quota_definitions"] = organization_quota_definitions.NewListAllOrganizationQuotaDefinitions(o.context, o.OrganizationQuotaDefinitionsListAllOrganizationQuotaDefinitionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations"] = organizations.NewListAllOrganizations(o.context, o.OrganizationsListAllOrganizationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/organizations"] = users.NewListAllOrganizationsForUser(o.context, o.UsersListAllOrganizationsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/private_domains"] = organizations.NewListAllPrivateDomainsForOrganization(o.context, o.OrganizationsListAllPrivateDomainsForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes"] = routes.NewListAllRoutes(o.context, o.RoutesListAllRoutesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/routes"] = apps.NewListAllRoutesForApp(o.context, o.AppsListAllRoutesForAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/routes"] = spaces.NewListAllRoutesForSpace(o.context, o.SpacesListAllRoutesForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/security_groups"] = security_groups.NewListAllSecurityGroups(o.context, o.SecurityGroupsListAllSecurityGroupsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/security_groups"] = spaces.NewListAllSecurityGroupsForSpace(o.context, o.SpacesListAllSecurityGroupsForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_bindings"] = service_bindings.NewListAllServiceBindings(o.context, o.ServiceBindingsListAllServiceBindingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}/service_bindings"] = apps.NewListAllServiceBindingsForApp(o.context, o.AppsListAllServiceBindingsForAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_instances/{guid}/service_bindings"] = service_instances.NewListAllServiceBindingsForServiceInstance(o.context, o.ServiceInstancesListAllServiceBindingsForServiceInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user_provided_service_instances/{guid}/service_bindings"] = user_provided_service_instances.NewListAllServiceBindingsForUserProvidedServiceInstance(o.context, o.UserProvidedServiceInstancesListAllServiceBindingsForUserProvidedServiceInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_brokers"] = service_brokers.NewListAllServiceBrokers(o.context, o.ServiceBrokersListAllServiceBrokersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_instances"] = service_instances.NewListAllServiceInstances(o.context, o.ServiceInstancesListAllServiceInstancesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/service_instances"] = spaces.NewListAllServiceInstancesForSpace(o.context, o.SpacesListAllServiceInstancesForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_plan_visibilities"] = service_plan_visibilities.NewListAllServicePlanVisibilities(o.context, o.ServicePlanVisibilitiesListAllServicePlanVisibilitiesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_plans"] = service_plans.NewListAllServicePlans(o.context, o.ServicePlansListAllServicePlansHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/{guid}/service_plans"] = services.NewListAllServicePlansForService(o.context, o.ServicesListAllServicePlansForServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services"] = services.NewListAllServices(o.context, o.ServicesListAllServicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/services"] = organizations.NewListAllServicesForOrganization(o.context, o.OrganizationsListAllServicesForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}/services"] = spaces.NewListAllServicesForSpace(o.context, o.SpacesListAllServicesForSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shared_domains"] = shared_domains.NewListAllSharedDomains(o.context, o.SharedDomainsListAllSharedDomainsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/space_quota_definitions"] = space_quota_definitions.NewListAllSpaceQuotaDefinitions(o.context, o.SpaceQuotaDefinitionsListAllSpaceQuotaDefinitionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/space_quota_definitions"] = organizations.NewListAllSpaceQuotaDefinitionsForOrganization(o.context, o.OrganizationsListAllSpaceQuotaDefinitionsForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces"] = spaces.NewListAllSpaces(o.context, o.SpacesListAllSpacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/domains/{guid}/spaces"] = domains_deprecated.NewListAllSpacesForDomainDeprecated(o.context, o.DomainsDeprecatedListAllSpacesForDomainDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/spaces"] = organizations.NewListAllSpacesForOrganization(o.context, o.OrganizationsListAllSpacesForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/security_groups/{guid}/spaces"] = security_groups.NewListAllSpacesForSecurityGroup(o.context, o.SecurityGroupsListAllSpacesForSecurityGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/space_quota_definitions/{guid}/spaces"] = space_quota_definitions.NewListAllSpacesForSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsListAllSpacesForSpaceQuotaDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}/spaces"] = users.NewListAllSpacesForUser(o.context, o.UsersListAllSpacesForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/stacks"] = stacks.NewListAllStacks(o.context, o.StacksListAllStacksHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user_provided_service_instances"] = user_provided_service_instances.NewListAllUserProvidedServiceInstances(o.context, o.UserProvidedServiceInstancesListAllUserProvidedServiceInstancesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewListAllUsers(o.context, o.UsersListAllUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/users"] = organizations.NewListAllUsersForOrganization(o.context, o.OrganizationsListAllUsersForOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = events.NewListServiceBrokerDeleteEventsExperimental(o.context, o.EventsListServiceBrokerDeleteEventsExperimentalHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_usage_events"] = service_usage_events_experimental.NewListServiceUsageEvents(o.context, o.ServiceUsageEventsExperimentalListServiceUsageEventsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/buildpacks/{guid}"] = buildpacks.NewLockOrUnlockBuildpack(o.context, o.BuildpacksLockOrUnlockBuildpackHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_plans/{guid}/service_instances"] = service_instances.NewMigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimental(o.context, o.ServiceInstancesMigrateServiceInstancesFromOneServicePlanToAnotherServicePlanExperimentalHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/app_usage_events/destructively_purge_all_and_reseed_started_apps"] = app_usage_events.NewPurgeAndReseedAppUsageEvents(o.context, o.AppUsageEventsPurgeAndReseedAppUsageEventsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/service_usage_events/destructively_purge_all_and_reseed_existing_instances"] = service_usage_events_experimental.NewPurgeAndReseedServiceUsageEvents(o.context, o.ServiceUsageEventsExperimentalPurgeAndReseedServiceUsageEventsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/routes/{guid}/apps/{app_guid}"] = routes.NewRemoveAppFromRoute(o.context, o.RoutesRemoveAppFromRouteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/audited_organizations/{audited_organization_guid}"] = users.NewRemoveAuditedOrganizationFromUser(o.context, o.UsersRemoveAuditedOrganizationFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/audited_spaces/{audited_space_guid}"] = users.NewRemoveAuditedSpaceFromUser(o.context, o.UsersRemoveAuditedSpaceFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organizations/{guid}/auditors/{auditor_guid}"] = organizations.NewRemoveAuditorFromOrganization(o.context, o.OrganizationsRemoveAuditorFromOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/spaces/{guid}/auditors/{auditor_guid}"] = spaces.NewRemoveAuditorFromSpace(o.context, o.SpacesRemoveAuditorFromSpaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/billing_managed_organizations/{billing_managed_organization_guid}"] = users.NewRemoveBillingManagedOrganizationFromUser(o.context, o.UsersRemoveBillingManagedOrganizationFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organizations/{guid}/billing_managers/{billing_manager_guid}"] = organizations.NewRemoveBillingManagerFromOrganization(o.context, o.OrganizationsRemoveBillingManagerFromOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/spaces/{guid}/developers/{developer_guid}"] = spaces.NewRemoveDeveloperFromSpace(o.context, o.SpacesRemoveDeveloperFromSpaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/managed_organizations/{managed_organization_guid}"] = users.NewRemoveManagedOrganizationFromUser(o.context, o.UsersRemoveManagedOrganizationFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/managed_spaces/{managed_space_guid}"] = users.NewRemoveManagedSpaceFromUser(o.context, o.UsersRemoveManagedSpaceFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organizations/{guid}/managers/{manager_guid}"] = organizations.NewRemoveManagerFromOrganization(o.context, o.OrganizationsRemoveManagerFromOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/spaces/{guid}/managers/{manager_guid}"] = spaces.NewRemoveManagerFromSpace(o.context, o.SpacesRemoveManagerFromSpaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/organizations/{organization_guid}"] = users.NewRemoveOrganizationFromUser(o.context, o.UsersRemoveOrganizationFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apps/{guid}/routes/{route_guid}"] = apps.NewRemoveRouteFromApp(o.context, o.AppsRemoveRouteFromAppHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/spaces/{guid}/security_groups/{security_group_guid}"] = spaces.NewRemoveSecurityGroupFromSpace(o.context, o.SpacesRemoveSecurityGroupFromSpaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apps/{guid}/service_bindings/{service_binding_guid}"] = apps.NewRemoveServiceBindingFromApp(o.context, o.AppsRemoveServiceBindingFromAppHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/security_groups/{guid}/spaces/{space_guid}"] = security_groups.NewRemoveSpaceFromSecurityGroup(o.context, o.SecurityGroupsRemoveSpaceFromSecurityGroupHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/space_quota_definitions/{guid}/spaces/{space_guid}"] = space_quota_definitions.NewRemoveSpaceFromSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsRemoveSpaceFromSpaceQuotaDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{guid}/spaces/{space_guid}"] = users.NewRemoveSpaceFromUser(o.context, o.UsersRemoveSpaceFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/organizations/{guid}/users/{user_guid}"] = organizations.NewRemoveUserFromOrganization(o.context, o.OrganizationsRemoveUserFromOrganizationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/running_security_groups/{guid}"] = security_group_running_defaults.NewRemovingSecurityGroupAsDefaultForRunningApps(o.context, o.SecurityGroupRunningDefaultsRemovingSecurityGroupAsDefaultForRunningAppsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/config/staging_security_groups/{guid}"] = security_group_staging_defaults.NewRemovingSecurityGroupAsDefaultForStaging(o.context, o.SecurityGroupStagingDefaultsRemovingSecurityGroupAsDefaultForStagingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apps/{guid}/restage"] = apps.NewRestageApp(o.context, o.AppsRestageAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{guid}"] = apps.NewRetrieveApp(o.context, o.AppsRetrieveAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/app_usage_events/{guid}"] = app_usage_events.NewRetrieveAppUsageEvent(o.context, o.AppUsageEventsRetrieveAppUsageEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/buildpacks/{guid}"] = buildpacks.NewRetrieveBuildpack(o.context, o.BuildpacksRetrieveBuildpackHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/domains/{guid}"] = domains_deprecated.NewRetrieveDomainDeprecated(o.context, o.DomainsDeprecatedRetrieveDomainDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events/{guid}"] = events.NewRetrieveEvent(o.context, o.EventsRetrieveEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apps/{app_guid}/instances/{instance_index}/files/{file_path}"] = files.NewRetrieveFile(o.context, o.FilesRetrieveFileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jobs/{guid}"] = jobs.NewRetrieveJobThatWasSuccessful(o.context, o.JobsRetrieveJobThatWasSuccessfulHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}"] = organizations.NewRetrieveOrganization(o.context, o.OrganizationsRetrieveOrganizationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quota_definitions/{guid}"] = organization_quota_definitions.NewRetrieveOrganizationQuotaDefinition(o.context, o.OrganizationQuotaDefinitionsRetrieveOrganizationQuotaDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/private_domains/{guid}"] = private_domains.NewRetrievePrivateDomain(o.context, o.PrivateDomainsRetrievePrivateDomainHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes/{guid}"] = routes.NewRetrieveRoute(o.context, o.RoutesRetrieveRouteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/security_groups/{guid}"] = security_groups.NewRetrieveSecurityGroup(o.context, o.SecurityGroupsRetrieveSecurityGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/services/{guid}"] = services.NewRetrieveService(o.context, o.ServicesRetrieveServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_auth_tokens/{guid}"] = service_auth_tokens_deprecated.NewRetrieveServiceAuthTokenDeprecated(o.context, o.ServiceAuthTokensDeprecatedRetrieveServiceAuthTokenDeprecatedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_bindings/{guid}"] = service_bindings.NewRetrieveServiceBinding(o.context, o.ServiceBindingsRetrieveServiceBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_brokers/{guid}"] = service_brokers.NewRetrieveServiceBroker(o.context, o.ServiceBrokersRetrieveServiceBrokerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_instances/{guid}"] = service_instances.NewRetrieveServiceInstance(o.context, o.ServiceInstancesRetrieveServiceInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_plans/{guid}"] = service_plans.NewRetrieveServicePlan(o.context, o.ServicePlansRetrieveServicePlanHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_plan_visibilities/{guid}"] = service_plan_visibilities.NewRetrieveServicePlanVisibility(o.context, o.ServicePlanVisibilitiesRetrieveServicePlanVisibilityHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_usage_events/{guid}"] = service_usage_events_experimental.NewRetrieveServiceUsageEvent(o.context, o.ServiceUsageEventsExperimentalRetrieveServiceUsageEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shared_domains/{guid}"] = shared_domains.NewRetrieveSharedDomain(o.context, o.SharedDomainsRetrieveSharedDomainHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spaces/{guid}"] = spaces.NewRetrieveSpace(o.context, o.SpacesRetrieveSpaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/space_quota_definitions/{guid}"] = space_quota_definitions.NewRetrieveSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsRetrieveSpaceQuotaDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/stacks/{guid}"] = stacks.NewRetrieveStack(o.context, o.StacksRetrieveStackHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{guid}"] = users.NewRetrieveUser(o.context, o.UsersRetrieveUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user_provided_service_instances/{guid}"] = user_provided_service_instances.NewRetrieveUserProvidedServiceInstance(o.context, o.UserProvidedServiceInstancesRetrieveUserProvidedServiceInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/organizations/{guid}/memory_usage"] = organizations.NewRetrievingOrganizationMemoryUsage(o.context, o.OrganizationsRetrievingOrganizationMemoryUsageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/service_instances/{guid}/permissions"] = service_instances.NewRetrievingPermissionsOnServiceInstance(o.context, o.ServiceInstancesRetrievingPermissionsOnServiceInstanceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/running_security_groups"] = security_group_running_defaults.NewReturnSecurityGroupsUsedForRunningApps(o.context, o.SecurityGroupRunningDefaultsReturnSecurityGroupsUsedForRunningAppsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config/staging_security_groups"] = security_group_staging_defaults.NewReturnSecurityGroupsUsedForStaging(o.context, o.SecurityGroupStagingDefaultsReturnSecurityGroupsUsedForStagingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/config/feature_flags/{name}"] = feature_flags.NewSetFeatureFlag(o.context, o.FeatureFlagsSetFeatureFlagHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/config/running_security_groups/{guid}"] = security_group_running_defaults.NewSetSecurityGroupAsDefaultForRunningApps(o.context, o.SecurityGroupRunningDefaultsSetSecurityGroupAsDefaultForRunningAppsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/config/staging_security_groups/{guid}"] = security_group_staging_defaults.NewSetSecurityGroupAsDefaultForStaging(o.context, o.SecurityGroupStagingDefaultsSetSecurityGroupAsDefaultForStagingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apps/{guid}/instances/{index}"] = apps.NewTerminateRunningAppInstanceAtGivenIndex(o.context, o.AppsTerminateRunningAppInstanceAtGivenIndexHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apps/{guid}"] = apps.NewUpdateApp(o.context, o.AppsUpdateAppHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/config/environment_variable_groups/running"] = environment_variable_groups.NewUpdateContentsOfRunningEnvironmentVariableGroup(o.context, o.EnvironmentVariableGroupsUpdateContentsOfRunningEnvironmentVariableGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/config/environment_variable_groups/staging"] = environment_variable_groups.NewUpdateContentsOfStagingEnvironmentVariableGroup(o.context, o.EnvironmentVariableGroupsUpdateContentsOfStagingEnvironmentVariableGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/organizations/{guid}"] = organizations.NewUpdateOrganization(o.context, o.OrganizationsUpdateOrganizationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/quota_definitions/{guid}"] = organization_quota_definitions.NewUpdateOrganizationQuotaDefinition(o.context, o.OrganizationQuotaDefinitionsUpdateOrganizationQuotaDefinitionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/routes/{guid}"] = routes.NewUpdateRoute(o.context, o.RoutesUpdateRouteHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/security_groups/{guid}"] = security_groups.NewUpdateSecurityGroup(o.context, o.SecurityGroupsUpdateSecurityGroupHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_brokers/{guid}"] = service_brokers.NewUpdateServiceBroker(o.context, o.ServiceBrokersUpdateServiceBrokerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/services"] = services.NewUpdateServiceDeprecated(o.context, o.ServicesUpdateServiceDeprecatedHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_instances/{guid}"] = service_instances.NewUpdateServiceInstance(o.context, o.ServiceInstancesUpdateServiceInstanceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_plans"] = service_plans.NewUpdateServicePlanDeprecated(o.context, o.ServicePlansUpdateServicePlanDeprecatedHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/service_plan_visibilities/{guid}"] = service_plan_visibilities.NewUpdateServicePlanVisibility(o.context, o.ServicePlanVisibilitiesUpdateServicePlanVisibilityHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/spaces/{guid}"] = spaces.NewUpdateSpace(o.context, o.SpacesUpdateSpaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/space_quota_definitions/{guid}"] = space_quota_definitions.NewUpdateSpaceQuotaDefinition(o.context, o.SpaceQuotaDefinitionsUpdateSpaceQuotaDefinitionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{guid}"] = users.NewUpdateUser(o.context, o.UsersUpdateUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user_provided_service_instances/{guid}"] = user_provided_service_instances.NewUpdateUserProvidedServiceInstance(o.context, o.UserProvidedServiceInstancesUpdateUserProvidedServiceInstanceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apps/{guid}/bits"] = apps.NewUploadsBitsForApp(o.context, o.AppsUploadsBitsForAppHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CloudFoundryAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *CloudFoundryAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *CloudFoundryAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *CloudFoundryAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *CloudFoundryAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
