// Code generated by go-swagger; DO NOT EDIT.

package domains_deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/suse/carrier/shim/models"
)

// CreatesDomainOwnedByGivenOrganizationDeprecatedCreatedCode is the HTTP code returned for type CreatesDomainOwnedByGivenOrganizationDeprecatedCreated
const CreatesDomainOwnedByGivenOrganizationDeprecatedCreatedCode int = 201

/*CreatesDomainOwnedByGivenOrganizationDeprecatedCreated successful response

swagger:response createsDomainOwnedByGivenOrganizationDeprecatedCreated
*/
type CreatesDomainOwnedByGivenOrganizationDeprecatedCreated struct {

	/*
	  In: Body
	*/
	Payload *models.CreatesDomainOwnedByGivenOrganizationDeprecatedResponse `json:"body,omitempty"`
}

// NewCreatesDomainOwnedByGivenOrganizationDeprecatedCreated creates CreatesDomainOwnedByGivenOrganizationDeprecatedCreated with default headers values
func NewCreatesDomainOwnedByGivenOrganizationDeprecatedCreated() *CreatesDomainOwnedByGivenOrganizationDeprecatedCreated {

	return &CreatesDomainOwnedByGivenOrganizationDeprecatedCreated{}
}

// WithPayload adds the payload to the creates domain owned by given organization deprecated created response
func (o *CreatesDomainOwnedByGivenOrganizationDeprecatedCreated) WithPayload(payload *models.CreatesDomainOwnedByGivenOrganizationDeprecatedResponse) *CreatesDomainOwnedByGivenOrganizationDeprecatedCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the creates domain owned by given organization deprecated created response
func (o *CreatesDomainOwnedByGivenOrganizationDeprecatedCreated) SetPayload(payload *models.CreatesDomainOwnedByGivenOrganizationDeprecatedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatesDomainOwnedByGivenOrganizationDeprecatedCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
