// Code generated by go-swagger; DO NOT EDIT.

package domains_deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveDomainDeprecatedHandlerFunc turns a function with the right signature into a retrieve domain deprecated handler
type RetrieveDomainDeprecatedHandlerFunc func(RetrieveDomainDeprecatedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveDomainDeprecatedHandlerFunc) Handle(params RetrieveDomainDeprecatedParams) middleware.Responder {
	return fn(params)
}

// RetrieveDomainDeprecatedHandler interface for that can handle valid retrieve domain deprecated params
type RetrieveDomainDeprecatedHandler interface {
	Handle(RetrieveDomainDeprecatedParams) middleware.Responder
}

// NewRetrieveDomainDeprecated creates a new http.Handler for the retrieve domain deprecated operation
func NewRetrieveDomainDeprecated(ctx *middleware.Context, handler RetrieveDomainDeprecatedHandler) *RetrieveDomainDeprecated {
	return &RetrieveDomainDeprecated{Context: ctx, Handler: handler}
}

/*RetrieveDomainDeprecated swagger:route GET /domains/{guid} domainsDeprecated retrieveDomainDeprecated

Retrieve a Particular Domain (deprecated)

curl --insecure -i %s/v2/domains/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveDomainDeprecated struct {
	Context *middleware.Context
	Handler RetrieveDomainDeprecatedHandler
}

func (o *RetrieveDomainDeprecated) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveDomainDeprecatedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
