// Code generated by go-swagger; DO NOT EDIT.

package service_brokers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteServiceBrokerHandlerFunc turns a function with the right signature into a delete service broker handler
type DeleteServiceBrokerHandlerFunc func(DeleteServiceBrokerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServiceBrokerHandlerFunc) Handle(params DeleteServiceBrokerParams) middleware.Responder {
	return fn(params)
}

// DeleteServiceBrokerHandler interface for that can handle valid delete service broker params
type DeleteServiceBrokerHandler interface {
	Handle(DeleteServiceBrokerParams) middleware.Responder
}

// NewDeleteServiceBroker creates a new http.Handler for the delete service broker operation
func NewDeleteServiceBroker(ctx *middleware.Context, handler DeleteServiceBrokerHandler) *DeleteServiceBroker {
	return &DeleteServiceBroker{Context: ctx, Handler: handler}
}

/*DeleteServiceBroker swagger:route DELETE /service_brokers/{guid} serviceBrokers deleteServiceBroker

Delete a Particular Service Broker

curl --insecure -i %s/v2/service_brokers/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteServiceBroker struct {
	Context *middleware.Context
	Handler DeleteServiceBrokerHandler
}

func (o *DeleteServiceBroker) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteServiceBrokerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
