// Code generated by go-swagger; DO NOT EDIT.

package service_brokers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveServiceBrokerHandlerFunc turns a function with the right signature into a retrieve service broker handler
type RetrieveServiceBrokerHandlerFunc func(RetrieveServiceBrokerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveServiceBrokerHandlerFunc) Handle(params RetrieveServiceBrokerParams) middleware.Responder {
	return fn(params)
}

// RetrieveServiceBrokerHandler interface for that can handle valid retrieve service broker params
type RetrieveServiceBrokerHandler interface {
	Handle(RetrieveServiceBrokerParams) middleware.Responder
}

// NewRetrieveServiceBroker creates a new http.Handler for the retrieve service broker operation
func NewRetrieveServiceBroker(ctx *middleware.Context, handler RetrieveServiceBrokerHandler) *RetrieveServiceBroker {
	return &RetrieveServiceBroker{Context: ctx, Handler: handler}
}

/*RetrieveServiceBroker swagger:route GET /service_brokers/{guid} serviceBrokers retrieveServiceBroker

Retrieve a Particular Service Broker

curl --insecure -i %s/v2/service_brokers/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveServiceBroker struct {
	Context *middleware.Context
	Handler RetrieveServiceBrokerHandler
}

func (o *RetrieveServiceBroker) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveServiceBrokerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
