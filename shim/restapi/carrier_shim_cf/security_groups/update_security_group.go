// Code generated by go-swagger; DO NOT EDIT.

package security_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateSecurityGroupHandlerFunc turns a function with the right signature into a update security group handler
type UpdateSecurityGroupHandlerFunc func(UpdateSecurityGroupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateSecurityGroupHandlerFunc) Handle(params UpdateSecurityGroupParams) middleware.Responder {
	return fn(params)
}

// UpdateSecurityGroupHandler interface for that can handle valid update security group params
type UpdateSecurityGroupHandler interface {
	Handle(UpdateSecurityGroupParams) middleware.Responder
}

// NewUpdateSecurityGroup creates a new http.Handler for the update security group operation
func NewUpdateSecurityGroup(ctx *middleware.Context, handler UpdateSecurityGroupHandler) *UpdateSecurityGroup {
	return &UpdateSecurityGroup{Context: ctx, Handler: handler}
}

/*UpdateSecurityGroup swagger:route PUT /security_groups/{guid} securityGroups updateSecurityGroup

Updating a Security Group

curl --insecure -i %s/v2/security_groups/{guid} -X PUT -H 'Authorization: %s' -d '%s'

*/
type UpdateSecurityGroup struct {
	Context *middleware.Context
	Handler UpdateSecurityGroupHandler
}

func (o *UpdateSecurityGroup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateSecurityGroupParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
