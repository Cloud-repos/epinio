// Code generated by go-swagger; DO NOT EDIT.

package shared_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveSharedDomainHandlerFunc turns a function with the right signature into a retrieve shared domain handler
type RetrieveSharedDomainHandlerFunc func(RetrieveSharedDomainParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveSharedDomainHandlerFunc) Handle(params RetrieveSharedDomainParams) middleware.Responder {
	return fn(params)
}

// RetrieveSharedDomainHandler interface for that can handle valid retrieve shared domain params
type RetrieveSharedDomainHandler interface {
	Handle(RetrieveSharedDomainParams) middleware.Responder
}

// NewRetrieveSharedDomain creates a new http.Handler for the retrieve shared domain operation
func NewRetrieveSharedDomain(ctx *middleware.Context, handler RetrieveSharedDomainHandler) *RetrieveSharedDomain {
	return &RetrieveSharedDomain{Context: ctx, Handler: handler}
}

/*RetrieveSharedDomain swagger:route GET /shared_domains/{guid} sharedDomains retrieveSharedDomain

Retrieve a Particular Shared Domain

curl --insecure -i %s/v2/shared_domains/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveSharedDomain struct {
	Context *middleware.Context
	Handler RetrieveSharedDomainHandler
}

func (o *RetrieveSharedDomain) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveSharedDomainParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
