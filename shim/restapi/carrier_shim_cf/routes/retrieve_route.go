// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveRouteHandlerFunc turns a function with the right signature into a retrieve route handler
type RetrieveRouteHandlerFunc func(RetrieveRouteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveRouteHandlerFunc) Handle(params RetrieveRouteParams) middleware.Responder {
	return fn(params)
}

// RetrieveRouteHandler interface for that can handle valid retrieve route params
type RetrieveRouteHandler interface {
	Handle(RetrieveRouteParams) middleware.Responder
}

// NewRetrieveRoute creates a new http.Handler for the retrieve route operation
func NewRetrieveRoute(ctx *middleware.Context, handler RetrieveRouteHandler) *RetrieveRoute {
	return &RetrieveRoute{Context: ctx, Handler: handler}
}

/*RetrieveRoute swagger:route GET /routes/{guid} routes retrieveRoute

Retrieve a Particular Route

curl --insecure -i %s/v2/routes/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveRoute struct {
	Context *middleware.Context
	Handler RetrieveRouteHandler
}

func (o *RetrieveRoute) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveRouteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
