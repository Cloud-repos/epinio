// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteRouteHandlerFunc turns a function with the right signature into a delete route handler
type DeleteRouteHandlerFunc func(DeleteRouteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRouteHandlerFunc) Handle(params DeleteRouteParams) middleware.Responder {
	return fn(params)
}

// DeleteRouteHandler interface for that can handle valid delete route params
type DeleteRouteHandler interface {
	Handle(DeleteRouteParams) middleware.Responder
}

// NewDeleteRoute creates a new http.Handler for the delete route operation
func NewDeleteRoute(ctx *middleware.Context, handler DeleteRouteHandler) *DeleteRoute {
	return &DeleteRoute{Context: ctx, Handler: handler}
}

/*DeleteRoute swagger:route DELETE /routes/{guid} routes deleteRoute

Delete a Particular Route

curl --insecure -i %s/v2/routes/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteRoute struct {
	Context *middleware.Context
	Handler DeleteRouteHandler
}

func (o *DeleteRoute) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteRouteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
