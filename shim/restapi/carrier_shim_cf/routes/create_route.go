// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateRouteHandlerFunc turns a function with the right signature into a create route handler
type CreateRouteHandlerFunc func(CreateRouteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateRouteHandlerFunc) Handle(params CreateRouteParams) middleware.Responder {
	return fn(params)
}

// CreateRouteHandler interface for that can handle valid create route params
type CreateRouteHandler interface {
	Handle(CreateRouteParams) middleware.Responder
}

// NewCreateRoute creates a new http.Handler for the create route operation
func NewCreateRoute(ctx *middleware.Context, handler CreateRouteHandler) *CreateRoute {
	return &CreateRoute{Context: ctx, Handler: handler}
}

/*CreateRoute swagger:route POST /routes routes createRoute

Creating a Route

curl --insecure -i %s/v2/routes -X POST -H 'Authorization: %s' -d '%s'

*/
type CreateRoute struct {
	Context *middleware.Context
	Handler CreateRouteHandler
}

func (o *CreateRoute) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateRouteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
