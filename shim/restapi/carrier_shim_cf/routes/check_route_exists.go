// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckRouteExistsHandlerFunc turns a function with the right signature into a check route exists handler
type CheckRouteExistsHandlerFunc func(CheckRouteExistsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckRouteExistsHandlerFunc) Handle(params CheckRouteExistsParams) middleware.Responder {
	return fn(params)
}

// CheckRouteExistsHandler interface for that can handle valid check route exists params
type CheckRouteExistsHandler interface {
	Handle(CheckRouteExistsParams) middleware.Responder
}

// NewCheckRouteExists creates a new http.Handler for the check route exists operation
func NewCheckRouteExists(ctx *middleware.Context, handler CheckRouteExistsHandler) *CheckRouteExists {
	return &CheckRouteExists{Context: ctx, Handler: handler}
}

/*CheckRouteExists swagger:route GET /routes/reserved/domain/{domain_guid}/host/{host} routes checkRouteExists

Check a Route exists

curl --insecure -i %s/v2/routes/reserved/domain/{domain_guid}/host/{host} -X GET -H 'Authorization: %s'

*/
type CheckRouteExists struct {
	Context *middleware.Context
	Handler CheckRouteExistsHandler
}

func (o *CheckRouteExists) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckRouteExistsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
