// Code generated by go-swagger; DO NOT EDIT.

package service_auth_tokens_deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteServiceAuthTokenDeprecatedHandlerFunc turns a function with the right signature into a delete service auth token deprecated handler
type DeleteServiceAuthTokenDeprecatedHandlerFunc func(DeleteServiceAuthTokenDeprecatedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServiceAuthTokenDeprecatedHandlerFunc) Handle(params DeleteServiceAuthTokenDeprecatedParams) middleware.Responder {
	return fn(params)
}

// DeleteServiceAuthTokenDeprecatedHandler interface for that can handle valid delete service auth token deprecated params
type DeleteServiceAuthTokenDeprecatedHandler interface {
	Handle(DeleteServiceAuthTokenDeprecatedParams) middleware.Responder
}

// NewDeleteServiceAuthTokenDeprecated creates a new http.Handler for the delete service auth token deprecated operation
func NewDeleteServiceAuthTokenDeprecated(ctx *middleware.Context, handler DeleteServiceAuthTokenDeprecatedHandler) *DeleteServiceAuthTokenDeprecated {
	return &DeleteServiceAuthTokenDeprecated{Context: ctx, Handler: handler}
}

/*DeleteServiceAuthTokenDeprecated swagger:route DELETE /service_auth_tokens/{guid} serviceAuthTokensDeprecated deleteServiceAuthTokenDeprecated

Delete a Particular Service Auth Token (deprecated)

curl --insecure -i %s/v2/service_auth_tokens/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteServiceAuthTokenDeprecated struct {
	Context *middleware.Context
	Handler DeleteServiceAuthTokenDeprecatedHandler
}

func (o *DeleteServiceAuthTokenDeprecated) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteServiceAuthTokenDeprecatedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
