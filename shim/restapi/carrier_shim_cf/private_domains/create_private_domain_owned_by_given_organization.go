// Code generated by go-swagger; DO NOT EDIT.

package private_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreatePrivateDomainOwnedByGivenOrganizationHandlerFunc turns a function with the right signature into a create private domain owned by given organization handler
type CreatePrivateDomainOwnedByGivenOrganizationHandlerFunc func(CreatePrivateDomainOwnedByGivenOrganizationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePrivateDomainOwnedByGivenOrganizationHandlerFunc) Handle(params CreatePrivateDomainOwnedByGivenOrganizationParams) middleware.Responder {
	return fn(params)
}

// CreatePrivateDomainOwnedByGivenOrganizationHandler interface for that can handle valid create private domain owned by given organization params
type CreatePrivateDomainOwnedByGivenOrganizationHandler interface {
	Handle(CreatePrivateDomainOwnedByGivenOrganizationParams) middleware.Responder
}

// NewCreatePrivateDomainOwnedByGivenOrganization creates a new http.Handler for the create private domain owned by given organization operation
func NewCreatePrivateDomainOwnedByGivenOrganization(ctx *middleware.Context, handler CreatePrivateDomainOwnedByGivenOrganizationHandler) *CreatePrivateDomainOwnedByGivenOrganization {
	return &CreatePrivateDomainOwnedByGivenOrganization{Context: ctx, Handler: handler}
}

/*CreatePrivateDomainOwnedByGivenOrganization swagger:route POST /private_domains privateDomains createPrivateDomainOwnedByGivenOrganization

Create a Private Domain owned by the given Organization

curl --insecure -i %s/v2/private_domains -X POST -H 'Authorization: %s' -d '%s'

*/
type CreatePrivateDomainOwnedByGivenOrganization struct {
	Context *middleware.Context
	Handler CreatePrivateDomainOwnedByGivenOrganizationHandler
}

func (o *CreatePrivateDomainOwnedByGivenOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreatePrivateDomainOwnedByGivenOrganizationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
