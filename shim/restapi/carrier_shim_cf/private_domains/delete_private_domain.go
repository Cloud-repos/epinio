// Code generated by go-swagger; DO NOT EDIT.

package private_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeletePrivateDomainHandlerFunc turns a function with the right signature into a delete private domain handler
type DeletePrivateDomainHandlerFunc func(DeletePrivateDomainParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePrivateDomainHandlerFunc) Handle(params DeletePrivateDomainParams) middleware.Responder {
	return fn(params)
}

// DeletePrivateDomainHandler interface for that can handle valid delete private domain params
type DeletePrivateDomainHandler interface {
	Handle(DeletePrivateDomainParams) middleware.Responder
}

// NewDeletePrivateDomain creates a new http.Handler for the delete private domain operation
func NewDeletePrivateDomain(ctx *middleware.Context, handler DeletePrivateDomainHandler) *DeletePrivateDomain {
	return &DeletePrivateDomain{Context: ctx, Handler: handler}
}

/*DeletePrivateDomain swagger:route DELETE /private_domains/{guid} privateDomains deletePrivateDomain

Delete a Particular Private Domain

curl --insecure -i %s/v2/private_domains/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeletePrivateDomain struct {
	Context *middleware.Context
	Handler DeletePrivateDomainHandler
}

func (o *DeletePrivateDomain) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeletePrivateDomainParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
