// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllAuditedSpacesForUserHandlerFunc turns a function with the right signature into a list all audited spaces for user handler
type ListAllAuditedSpacesForUserHandlerFunc func(ListAllAuditedSpacesForUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllAuditedSpacesForUserHandlerFunc) Handle(params ListAllAuditedSpacesForUserParams) middleware.Responder {
	return fn(params)
}

// ListAllAuditedSpacesForUserHandler interface for that can handle valid list all audited spaces for user params
type ListAllAuditedSpacesForUserHandler interface {
	Handle(ListAllAuditedSpacesForUserParams) middleware.Responder
}

// NewListAllAuditedSpacesForUser creates a new http.Handler for the list all audited spaces for user operation
func NewListAllAuditedSpacesForUser(ctx *middleware.Context, handler ListAllAuditedSpacesForUserHandler) *ListAllAuditedSpacesForUser {
	return &ListAllAuditedSpacesForUser{Context: ctx, Handler: handler}
}

/*ListAllAuditedSpacesForUser swagger:route GET /users/{guid}/audited_spaces users listAllAuditedSpacesForUser

List all Audited Spaces for the User

curl --insecure -i %s/v2/users/{guid}/audited_spaces -X GET -H 'Authorization: %s'

*/
type ListAllAuditedSpacesForUser struct {
	Context *middleware.Context
	Handler ListAllAuditedSpacesForUserHandler
}

func (o *ListAllAuditedSpacesForUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllAuditedSpacesForUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
