// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveUserHandlerFunc turns a function with the right signature into a retrieve user handler
type RetrieveUserHandlerFunc func(RetrieveUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveUserHandlerFunc) Handle(params RetrieveUserParams) middleware.Responder {
	return fn(params)
}

// RetrieveUserHandler interface for that can handle valid retrieve user params
type RetrieveUserHandler interface {
	Handle(RetrieveUserParams) middleware.Responder
}

// NewRetrieveUser creates a new http.Handler for the retrieve user operation
func NewRetrieveUser(ctx *middleware.Context, handler RetrieveUserHandler) *RetrieveUser {
	return &RetrieveUser{Context: ctx, Handler: handler}
}

/*RetrieveUser swagger:route GET /users/{guid} users retrieveUser

Retrieve a Particular User

curl --insecure -i %s/v2/users/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveUser struct {
	Context *middleware.Context
	Handler RetrieveUserHandler
}

func (o *RetrieveUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
