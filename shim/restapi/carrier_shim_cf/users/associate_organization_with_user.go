// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AssociateOrganizationWithUserHandlerFunc turns a function with the right signature into a associate organization with user handler
type AssociateOrganizationWithUserHandlerFunc func(AssociateOrganizationWithUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AssociateOrganizationWithUserHandlerFunc) Handle(params AssociateOrganizationWithUserParams) middleware.Responder {
	return fn(params)
}

// AssociateOrganizationWithUserHandler interface for that can handle valid associate organization with user params
type AssociateOrganizationWithUserHandler interface {
	Handle(AssociateOrganizationWithUserParams) middleware.Responder
}

// NewAssociateOrganizationWithUser creates a new http.Handler for the associate organization with user operation
func NewAssociateOrganizationWithUser(ctx *middleware.Context, handler AssociateOrganizationWithUserHandler) *AssociateOrganizationWithUser {
	return &AssociateOrganizationWithUser{Context: ctx, Handler: handler}
}

/*AssociateOrganizationWithUser swagger:route PUT /users/{guid}/organizations/{organization_guid} users associateOrganizationWithUser

Associate Organization with the User

curl --insecure -i %s/v2/users/{guid}/organizations/{organization_guid} -X PUT -H 'Authorization: %s'

*/
type AssociateOrganizationWithUser struct {
	Context *middleware.Context
	Handler AssociateOrganizationWithUserHandler
}

func (o *AssociateOrganizationWithUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAssociateOrganizationWithUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
