// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveManagedSpaceFromUserHandlerFunc turns a function with the right signature into a remove managed space from user handler
type RemoveManagedSpaceFromUserHandlerFunc func(RemoveManagedSpaceFromUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveManagedSpaceFromUserHandlerFunc) Handle(params RemoveManagedSpaceFromUserParams) middleware.Responder {
	return fn(params)
}

// RemoveManagedSpaceFromUserHandler interface for that can handle valid remove managed space from user params
type RemoveManagedSpaceFromUserHandler interface {
	Handle(RemoveManagedSpaceFromUserParams) middleware.Responder
}

// NewRemoveManagedSpaceFromUser creates a new http.Handler for the remove managed space from user operation
func NewRemoveManagedSpaceFromUser(ctx *middleware.Context, handler RemoveManagedSpaceFromUserHandler) *RemoveManagedSpaceFromUser {
	return &RemoveManagedSpaceFromUser{Context: ctx, Handler: handler}
}

/*RemoveManagedSpaceFromUser swagger:route DELETE /users/{guid}/managed_spaces/{managed_space_guid} users removeManagedSpaceFromUser

Remove Managed Space from the User

curl --insecure -i %s/v2/users/{guid}/managed_spaces/{managed_space_guid} -X DELETE -H 'Authorization: %s'

*/
type RemoveManagedSpaceFromUser struct {
	Context *middleware.Context
	Handler RemoveManagedSpaceFromUserHandler
}

func (o *RemoveManagedSpaceFromUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveManagedSpaceFromUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
