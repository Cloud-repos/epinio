// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllSpacesForUserHandlerFunc turns a function with the right signature into a list all spaces for user handler
type ListAllSpacesForUserHandlerFunc func(ListAllSpacesForUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllSpacesForUserHandlerFunc) Handle(params ListAllSpacesForUserParams) middleware.Responder {
	return fn(params)
}

// ListAllSpacesForUserHandler interface for that can handle valid list all spaces for user params
type ListAllSpacesForUserHandler interface {
	Handle(ListAllSpacesForUserParams) middleware.Responder
}

// NewListAllSpacesForUser creates a new http.Handler for the list all spaces for user operation
func NewListAllSpacesForUser(ctx *middleware.Context, handler ListAllSpacesForUserHandler) *ListAllSpacesForUser {
	return &ListAllSpacesForUser{Context: ctx, Handler: handler}
}

/*ListAllSpacesForUser swagger:route GET /users/{guid}/spaces users listAllSpacesForUser

List all Spaces for the User

curl --insecure -i %s/v2/users/{guid}/spaces -X GET -H 'Authorization: %s'

*/
type ListAllSpacesForUser struct {
	Context *middleware.Context
	Handler ListAllSpacesForUserHandler
}

func (o *ListAllSpacesForUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllSpacesForUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
