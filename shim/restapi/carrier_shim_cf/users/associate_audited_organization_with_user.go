// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AssociateAuditedOrganizationWithUserHandlerFunc turns a function with the right signature into a associate audited organization with user handler
type AssociateAuditedOrganizationWithUserHandlerFunc func(AssociateAuditedOrganizationWithUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AssociateAuditedOrganizationWithUserHandlerFunc) Handle(params AssociateAuditedOrganizationWithUserParams) middleware.Responder {
	return fn(params)
}

// AssociateAuditedOrganizationWithUserHandler interface for that can handle valid associate audited organization with user params
type AssociateAuditedOrganizationWithUserHandler interface {
	Handle(AssociateAuditedOrganizationWithUserParams) middleware.Responder
}

// NewAssociateAuditedOrganizationWithUser creates a new http.Handler for the associate audited organization with user operation
func NewAssociateAuditedOrganizationWithUser(ctx *middleware.Context, handler AssociateAuditedOrganizationWithUserHandler) *AssociateAuditedOrganizationWithUser {
	return &AssociateAuditedOrganizationWithUser{Context: ctx, Handler: handler}
}

/*AssociateAuditedOrganizationWithUser swagger:route PUT /users/{guid}/audited_organizations/{audited_organization_guid} users associateAuditedOrganizationWithUser

Associate Audited Organization with the User

curl --insecure -i %s/v2/users/{guid}/audited_organizations/{audited_organization_guid} -X PUT -H 'Authorization: %s'

*/
type AssociateAuditedOrganizationWithUser struct {
	Context *middleware.Context
	Handler AssociateAuditedOrganizationWithUserHandler
}

func (o *AssociateAuditedOrganizationWithUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAssociateAuditedOrganizationWithUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
