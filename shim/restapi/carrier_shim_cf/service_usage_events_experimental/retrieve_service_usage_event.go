// Code generated by go-swagger; DO NOT EDIT.

package service_usage_events_experimental

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveServiceUsageEventHandlerFunc turns a function with the right signature into a retrieve service usage event handler
type RetrieveServiceUsageEventHandlerFunc func(RetrieveServiceUsageEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveServiceUsageEventHandlerFunc) Handle(params RetrieveServiceUsageEventParams) middleware.Responder {
	return fn(params)
}

// RetrieveServiceUsageEventHandler interface for that can handle valid retrieve service usage event params
type RetrieveServiceUsageEventHandler interface {
	Handle(RetrieveServiceUsageEventParams) middleware.Responder
}

// NewRetrieveServiceUsageEvent creates a new http.Handler for the retrieve service usage event operation
func NewRetrieveServiceUsageEvent(ctx *middleware.Context, handler RetrieveServiceUsageEventHandler) *RetrieveServiceUsageEvent {
	return &RetrieveServiceUsageEvent{Context: ctx, Handler: handler}
}

/*RetrieveServiceUsageEvent swagger:route GET /service_usage_events/{guid} serviceUsageEventsExperimental retrieveServiceUsageEvent

Retrieve a Particular Service Usage Event

curl --insecure -i %s/v2/service_usage_events/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveServiceUsageEvent struct {
	Context *middleware.Context
	Handler RetrieveServiceUsageEventHandler
}

func (o *RetrieveServiceUsageEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveServiceUsageEventParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
