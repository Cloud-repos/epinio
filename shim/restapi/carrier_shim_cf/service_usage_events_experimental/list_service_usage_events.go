// Code generated by go-swagger; DO NOT EDIT.

package service_usage_events_experimental

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListServiceUsageEventsHandlerFunc turns a function with the right signature into a list service usage events handler
type ListServiceUsageEventsHandlerFunc func(ListServiceUsageEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListServiceUsageEventsHandlerFunc) Handle(params ListServiceUsageEventsParams) middleware.Responder {
	return fn(params)
}

// ListServiceUsageEventsHandler interface for that can handle valid list service usage events params
type ListServiceUsageEventsHandler interface {
	Handle(ListServiceUsageEventsParams) middleware.Responder
}

// NewListServiceUsageEvents creates a new http.Handler for the list service usage events operation
func NewListServiceUsageEvents(ctx *middleware.Context, handler ListServiceUsageEventsHandler) *ListServiceUsageEvents {
	return &ListServiceUsageEvents{Context: ctx, Handler: handler}
}

/*ListServiceUsageEvents swagger:route GET /service_usage_events serviceUsageEventsExperimental listServiceUsageEvents

List Service Usage Events

curl --insecure -i %s/v2/service_usage_events -X GET -H 'Authorization: %s'

*/
type ListServiceUsageEvents struct {
	Context *middleware.Context
	Handler ListServiceUsageEventsHandler
}

func (o *ListServiceUsageEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListServiceUsageEventsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
