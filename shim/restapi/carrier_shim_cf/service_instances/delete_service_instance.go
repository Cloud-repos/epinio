// Code generated by go-swagger; DO NOT EDIT.

package service_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteServiceInstanceHandlerFunc turns a function with the right signature into a delete service instance handler
type DeleteServiceInstanceHandlerFunc func(DeleteServiceInstanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServiceInstanceHandlerFunc) Handle(params DeleteServiceInstanceParams) middleware.Responder {
	return fn(params)
}

// DeleteServiceInstanceHandler interface for that can handle valid delete service instance params
type DeleteServiceInstanceHandler interface {
	Handle(DeleteServiceInstanceParams) middleware.Responder
}

// NewDeleteServiceInstance creates a new http.Handler for the delete service instance operation
func NewDeleteServiceInstance(ctx *middleware.Context, handler DeleteServiceInstanceHandler) *DeleteServiceInstance {
	return &DeleteServiceInstance{Context: ctx, Handler: handler}
}

/*DeleteServiceInstance swagger:route DELETE /service_instances/{guid} serviceInstances deleteServiceInstance

Delete a Particular Service Instance

curl --insecure -i %s/v2/service_instances/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteServiceInstance struct {
	Context *middleware.Context
	Handler DeleteServiceInstanceHandler
}

func (o *DeleteServiceInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteServiceInstanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
