// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllAppsHandlerFunc turns a function with the right signature into a list all apps handler
type ListAllAppsHandlerFunc func(ListAllAppsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllAppsHandlerFunc) Handle(params ListAllAppsParams) middleware.Responder {
	return fn(params)
}

// ListAllAppsHandler interface for that can handle valid list all apps params
type ListAllAppsHandler interface {
	Handle(ListAllAppsParams) middleware.Responder
}

// NewListAllApps creates a new http.Handler for the list all apps operation
func NewListAllApps(ctx *middleware.Context, handler ListAllAppsHandler) *ListAllApps {
	return &ListAllApps{Context: ctx, Handler: handler}
}

/*ListAllApps swagger:route GET /apps apps listAllApps

List all Apps

curl --insecure -i %s/v2/apps -X GET -H 'Authorization: %s'

*/
type ListAllApps struct {
	Context *middleware.Context
	Handler ListAllAppsHandler
}

func (o *ListAllApps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllAppsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
