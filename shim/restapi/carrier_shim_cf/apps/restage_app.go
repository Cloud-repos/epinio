// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RestageAppHandlerFunc turns a function with the right signature into a restage app handler
type RestageAppHandlerFunc func(RestageAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestageAppHandlerFunc) Handle(params RestageAppParams) middleware.Responder {
	return fn(params)
}

// RestageAppHandler interface for that can handle valid restage app params
type RestageAppHandler interface {
	Handle(RestageAppParams) middleware.Responder
}

// NewRestageApp creates a new http.Handler for the restage app operation
func NewRestageApp(ctx *middleware.Context, handler RestageAppHandler) *RestageApp {
	return &RestageApp{Context: ctx, Handler: handler}
}

/*RestageApp swagger:route POST /apps/{guid}/restage apps restageApp

Restage an App

curl --insecure -i %s/v2/apps/{guid}/restage -X POST -H 'Authorization: %s'

*/
type RestageApp struct {
	Context *middleware.Context
	Handler RestageAppHandler
}

func (o *RestageApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRestageAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
