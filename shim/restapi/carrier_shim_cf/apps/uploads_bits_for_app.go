// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UploadsBitsForAppHandlerFunc turns a function with the right signature into a uploads bits for app handler
type UploadsBitsForAppHandlerFunc func(UploadsBitsForAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadsBitsForAppHandlerFunc) Handle(params UploadsBitsForAppParams) middleware.Responder {
	return fn(params)
}

// UploadsBitsForAppHandler interface for that can handle valid uploads bits for app params
type UploadsBitsForAppHandler interface {
	Handle(UploadsBitsForAppParams) middleware.Responder
}

// NewUploadsBitsForApp creates a new http.Handler for the uploads bits for app operation
func NewUploadsBitsForApp(ctx *middleware.Context, handler UploadsBitsForAppHandler) *UploadsBitsForApp {
	return &UploadsBitsForApp{Context: ctx, Handler: handler}
}

/*UploadsBitsForApp swagger:route PUT /apps/{guid}/bits apps uploadsBitsForApp

Uploads the bits for an App

curl --insecure -i %s/v2/apps/{guid}/bits -X PUT -H 'Authorization: %s' -d '%s'

*/
type UploadsBitsForApp struct {
	Context *middleware.Context
	Handler UploadsBitsForAppHandler
}

func (o *UploadsBitsForApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUploadsBitsForAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
