// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveServiceBindingFromAppHandlerFunc turns a function with the right signature into a remove service binding from app handler
type RemoveServiceBindingFromAppHandlerFunc func(RemoveServiceBindingFromAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveServiceBindingFromAppHandlerFunc) Handle(params RemoveServiceBindingFromAppParams) middleware.Responder {
	return fn(params)
}

// RemoveServiceBindingFromAppHandler interface for that can handle valid remove service binding from app params
type RemoveServiceBindingFromAppHandler interface {
	Handle(RemoveServiceBindingFromAppParams) middleware.Responder
}

// NewRemoveServiceBindingFromApp creates a new http.Handler for the remove service binding from app operation
func NewRemoveServiceBindingFromApp(ctx *middleware.Context, handler RemoveServiceBindingFromAppHandler) *RemoveServiceBindingFromApp {
	return &RemoveServiceBindingFromApp{Context: ctx, Handler: handler}
}

/*RemoveServiceBindingFromApp swagger:route DELETE /apps/{guid}/service_bindings/{service_binding_guid} apps removeServiceBindingFromApp

Remove Service Binding from the App

curl --insecure -i %s/v2/apps/{guid}/service_bindings/{service_binding_guid} -X DELETE -H 'Authorization: %s'

*/
type RemoveServiceBindingFromApp struct {
	Context *middleware.Context
	Handler RemoveServiceBindingFromAppHandler
}

func (o *RemoveServiceBindingFromApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveServiceBindingFromAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
