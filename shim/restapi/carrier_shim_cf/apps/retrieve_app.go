// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveAppHandlerFunc turns a function with the right signature into a retrieve app handler
type RetrieveAppHandlerFunc func(RetrieveAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveAppHandlerFunc) Handle(params RetrieveAppParams) middleware.Responder {
	return fn(params)
}

// RetrieveAppHandler interface for that can handle valid retrieve app params
type RetrieveAppHandler interface {
	Handle(RetrieveAppParams) middleware.Responder
}

// NewRetrieveApp creates a new http.Handler for the retrieve app operation
func NewRetrieveApp(ctx *middleware.Context, handler RetrieveAppHandler) *RetrieveApp {
	return &RetrieveApp{Context: ctx, Handler: handler}
}

/*RetrieveApp swagger:route GET /apps/{guid} apps retrieveApp

Retrieve a Particular App

curl --insecure -i %s/v2/apps/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveApp struct {
	Context *middleware.Context
	Handler RetrieveAppHandler
}

func (o *RetrieveApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
