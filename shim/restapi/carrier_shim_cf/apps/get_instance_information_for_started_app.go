// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetInstanceInformationForStartedAppHandlerFunc turns a function with the right signature into a get instance information for started app handler
type GetInstanceInformationForStartedAppHandlerFunc func(GetInstanceInformationForStartedAppParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInstanceInformationForStartedAppHandlerFunc) Handle(params GetInstanceInformationForStartedAppParams) middleware.Responder {
	return fn(params)
}

// GetInstanceInformationForStartedAppHandler interface for that can handle valid get instance information for started app params
type GetInstanceInformationForStartedAppHandler interface {
	Handle(GetInstanceInformationForStartedAppParams) middleware.Responder
}

// NewGetInstanceInformationForStartedApp creates a new http.Handler for the get instance information for started app operation
func NewGetInstanceInformationForStartedApp(ctx *middleware.Context, handler GetInstanceInformationForStartedAppHandler) *GetInstanceInformationForStartedApp {
	return &GetInstanceInformationForStartedApp{Context: ctx, Handler: handler}
}

/*GetInstanceInformationForStartedApp swagger:route GET /apps/{guid}/instances apps getInstanceInformationForStartedApp

Get the instance information for a STARTED App

curl --insecure -i %s/v2/apps/{guid}/instances -X GET -H 'Authorization: %s'

*/
type GetInstanceInformationForStartedApp struct {
	Context *middleware.Context
	Handler GetInstanceInformationForStartedAppHandler
}

func (o *GetInstanceInformationForStartedApp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetInstanceInformationForStartedAppParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
