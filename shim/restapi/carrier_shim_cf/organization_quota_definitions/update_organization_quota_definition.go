// Code generated by go-swagger; DO NOT EDIT.

package organization_quota_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateOrganizationQuotaDefinitionHandlerFunc turns a function with the right signature into a update organization quota definition handler
type UpdateOrganizationQuotaDefinitionHandlerFunc func(UpdateOrganizationQuotaDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateOrganizationQuotaDefinitionHandlerFunc) Handle(params UpdateOrganizationQuotaDefinitionParams) middleware.Responder {
	return fn(params)
}

// UpdateOrganizationQuotaDefinitionHandler interface for that can handle valid update organization quota definition params
type UpdateOrganizationQuotaDefinitionHandler interface {
	Handle(UpdateOrganizationQuotaDefinitionParams) middleware.Responder
}

// NewUpdateOrganizationQuotaDefinition creates a new http.Handler for the update organization quota definition operation
func NewUpdateOrganizationQuotaDefinition(ctx *middleware.Context, handler UpdateOrganizationQuotaDefinitionHandler) *UpdateOrganizationQuotaDefinition {
	return &UpdateOrganizationQuotaDefinition{Context: ctx, Handler: handler}
}

/*UpdateOrganizationQuotaDefinition swagger:route PUT /quota_definitions/{guid} organizationQuotaDefinitions updateOrganizationQuotaDefinition

Updating a Organization Quota Definition

curl --insecure -i %s/v2/quota_definitions/{guid} -X PUT -H 'Authorization: %s' -d '%s'

*/
type UpdateOrganizationQuotaDefinition struct {
	Context *middleware.Context
	Handler UpdateOrganizationQuotaDefinitionHandler
}

func (o *UpdateOrganizationQuotaDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateOrganizationQuotaDefinitionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
