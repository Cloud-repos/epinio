// Code generated by go-swagger; DO NOT EDIT.

package organization_quota_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteOrganizationQuotaDefinitionHandlerFunc turns a function with the right signature into a delete organization quota definition handler
type DeleteOrganizationQuotaDefinitionHandlerFunc func(DeleteOrganizationQuotaDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteOrganizationQuotaDefinitionHandlerFunc) Handle(params DeleteOrganizationQuotaDefinitionParams) middleware.Responder {
	return fn(params)
}

// DeleteOrganizationQuotaDefinitionHandler interface for that can handle valid delete organization quota definition params
type DeleteOrganizationQuotaDefinitionHandler interface {
	Handle(DeleteOrganizationQuotaDefinitionParams) middleware.Responder
}

// NewDeleteOrganizationQuotaDefinition creates a new http.Handler for the delete organization quota definition operation
func NewDeleteOrganizationQuotaDefinition(ctx *middleware.Context, handler DeleteOrganizationQuotaDefinitionHandler) *DeleteOrganizationQuotaDefinition {
	return &DeleteOrganizationQuotaDefinition{Context: ctx, Handler: handler}
}

/*DeleteOrganizationQuotaDefinition swagger:route DELETE /quota_definitions/{guid} organizationQuotaDefinitions deleteOrganizationQuotaDefinition

Delete a Particular Organization Quota Definition

curl --insecure -i %s/v2/quota_definitions/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteOrganizationQuotaDefinition struct {
	Context *middleware.Context
	Handler DeleteOrganizationQuotaDefinitionHandler
}

func (o *DeleteOrganizationQuotaDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteOrganizationQuotaDefinitionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
