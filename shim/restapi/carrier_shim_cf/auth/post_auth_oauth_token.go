// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAuthOauthTokenHandlerFunc turns a function with the right signature into a post auth oauth token handler
type PostAuthOauthTokenHandlerFunc func(PostAuthOauthTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAuthOauthTokenHandlerFunc) Handle(params PostAuthOauthTokenParams) middleware.Responder {
	return fn(params)
}

// PostAuthOauthTokenHandler interface for that can handle valid post auth oauth token params
type PostAuthOauthTokenHandler interface {
	Handle(PostAuthOauthTokenParams) middleware.Responder
}

// NewPostAuthOauthToken creates a new http.Handler for the post auth oauth token operation
func NewPostAuthOauthToken(ctx *middleware.Context, handler PostAuthOauthTokenHandler) *PostAuthOauthToken {
	return &PostAuthOauthToken{Context: ctx, Handler: handler}
}

/*PostAuthOauthToken swagger:route POST /auth/oauth/token auth postAuthOauthToken

The /oauth/token endpoint requires client authentication to be accessed. Client Authentication can be passed as as part of the request authorization header, using basic authentication, or as part of the request parameters, using the client_id and client_secret parameter names.

*/
type PostAuthOauthToken struct {
	Context *middleware.Context
	Handler PostAuthOauthTokenHandler
}

func (o *PostAuthOauthToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAuthOauthTokenParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
