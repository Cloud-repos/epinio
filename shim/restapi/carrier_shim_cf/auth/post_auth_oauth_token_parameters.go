// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewPostAuthOauthTokenParams creates a new PostAuthOauthTokenParams object
// no default values defined in spec.
func NewPostAuthOauthTokenParams() PostAuthOauthTokenParams {

	return PostAuthOauthTokenParams{}
}

// PostAuthOauthTokenParams contains all the bound params for the post auth oauth token operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostAuthOauthToken
type PostAuthOauthTokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Client ID and secret may be passed as a basic authorization header, per RFC 6749 or as request parameters.
	  In: header
	*/
	Authorization *string
	/*A unique string representing the registration information provided by the client, the recipient of the token. Optional if it is passed as part of the Basic Authorization header.
	  In: formData
	*/
	ClientID *string
	/*The secret passphrase configured for the OAuth client. Optional if it is passed as part of the Basic Authorization header.
	  In: formData
	*/
	ClientSecret *string
	/*The authorization code, obtained from /oauth/authorize, issued for the user
	  In: formData
	*/
	Code *string
	/*The type of authentication being used to obtain the token, in this case authorization_code
	  Required: true
	  In: formData
	*/
	GrantType string
	/*Redirection URI to which the authorization server will send the user-agent back once access is granted (or denied)
	  In: formData
	*/
	RedirectURI *string
	/*Can be set to opaque to retrieve an opaque and revocable token or to jwt to retrieve a JWT token. If not set the zone setting config.tokenPolicy.jwtRevocable is used.
	  In: formData
	*/
	TokenFormat *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostAuthOauthTokenParams() beforehand.
func (o *PostAuthOauthTokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientID, fdhkClientID, _ := fds.GetOK("client_id")
	if err := o.bindClientID(fdClientID, fdhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientSecret, fdhkClientSecret, _ := fds.GetOK("client_secret")
	if err := o.bindClientSecret(fdClientSecret, fdhkClientSecret, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCode, fdhkCode, _ := fds.GetOK("code")
	if err := o.bindCode(fdCode, fdhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRedirectURI, fdhkRedirectURI, _ := fds.GetOK("redirect_uri")
	if err := o.bindRedirectURI(fdRedirectURI, fdhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTokenFormat, fdhkTokenFormat, _ := fds.GetOK("token_format")
	if err := o.bindTokenFormat(fdTokenFormat, fdhkTokenFormat, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *PostAuthOauthTokenParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Authorization = &raw

	return nil
}

// bindClientID binds and validates parameter ClientID from formData.
func (o *PostAuthOauthTokenParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ClientID = &raw

	return nil
}

// bindClientSecret binds and validates parameter ClientSecret from formData.
func (o *PostAuthOauthTokenParams) bindClientSecret(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ClientSecret = &raw

	return nil
}

// bindCode binds and validates parameter Code from formData.
func (o *PostAuthOauthTokenParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Code = &raw

	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *PostAuthOauthTokenParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("grant_type", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("grant_type", "formData", raw); err != nil {
		return err
	}

	o.GrantType = raw

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from formData.
func (o *PostAuthOauthTokenParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RedirectURI = &raw

	return nil
}

// bindTokenFormat binds and validates parameter TokenFormat from formData.
func (o *PostAuthOauthTokenParams) bindTokenFormat(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TokenFormat = &raw

	return nil
}
