// Code generated by go-swagger; DO NOT EDIT.

package security_group_running_defaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReturnSecurityGroupsUsedForRunningAppsHandlerFunc turns a function with the right signature into a return security groups used for running apps handler
type ReturnSecurityGroupsUsedForRunningAppsHandlerFunc func(ReturnSecurityGroupsUsedForRunningAppsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReturnSecurityGroupsUsedForRunningAppsHandlerFunc) Handle(params ReturnSecurityGroupsUsedForRunningAppsParams) middleware.Responder {
	return fn(params)
}

// ReturnSecurityGroupsUsedForRunningAppsHandler interface for that can handle valid return security groups used for running apps params
type ReturnSecurityGroupsUsedForRunningAppsHandler interface {
	Handle(ReturnSecurityGroupsUsedForRunningAppsParams) middleware.Responder
}

// NewReturnSecurityGroupsUsedForRunningApps creates a new http.Handler for the return security groups used for running apps operation
func NewReturnSecurityGroupsUsedForRunningApps(ctx *middleware.Context, handler ReturnSecurityGroupsUsedForRunningAppsHandler) *ReturnSecurityGroupsUsedForRunningApps {
	return &ReturnSecurityGroupsUsedForRunningApps{Context: ctx, Handler: handler}
}

/*ReturnSecurityGroupsUsedForRunningApps swagger:route GET /config/running_security_groups securityGroupRunningDefaults returnSecurityGroupsUsedForRunningApps

Return the Security Groups used for running Apps

curl --insecure -i %s/v2/config/running_security_groups -X GET -H 'Authorization: %s'

*/
type ReturnSecurityGroupsUsedForRunningApps struct {
	Context *middleware.Context
	Handler ReturnSecurityGroupsUsedForRunningAppsHandler
}

func (o *ReturnSecurityGroupsUsedForRunningApps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReturnSecurityGroupsUsedForRunningAppsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
