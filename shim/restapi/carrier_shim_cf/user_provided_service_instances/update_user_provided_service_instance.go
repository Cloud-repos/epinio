// Code generated by go-swagger; DO NOT EDIT.

package user_provided_service_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateUserProvidedServiceInstanceHandlerFunc turns a function with the right signature into a update user provided service instance handler
type UpdateUserProvidedServiceInstanceHandlerFunc func(UpdateUserProvidedServiceInstanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateUserProvidedServiceInstanceHandlerFunc) Handle(params UpdateUserProvidedServiceInstanceParams) middleware.Responder {
	return fn(params)
}

// UpdateUserProvidedServiceInstanceHandler interface for that can handle valid update user provided service instance params
type UpdateUserProvidedServiceInstanceHandler interface {
	Handle(UpdateUserProvidedServiceInstanceParams) middleware.Responder
}

// NewUpdateUserProvidedServiceInstance creates a new http.Handler for the update user provided service instance operation
func NewUpdateUserProvidedServiceInstance(ctx *middleware.Context, handler UpdateUserProvidedServiceInstanceHandler) *UpdateUserProvidedServiceInstance {
	return &UpdateUserProvidedServiceInstance{Context: ctx, Handler: handler}
}

/*UpdateUserProvidedServiceInstance swagger:route PUT /user_provided_service_instances/{guid} userProvidedServiceInstances updateUserProvidedServiceInstance

Updating a User Provided Service Instance

curl --insecure -i %s/v2/user_provided_service_instances/{guid} -X PUT -H 'Authorization: %s' -d '%s'

*/
type UpdateUserProvidedServiceInstance struct {
	Context *middleware.Context
	Handler UpdateUserProvidedServiceInstanceHandler
}

func (o *UpdateUserProvidedServiceInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateUserProvidedServiceInstanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
