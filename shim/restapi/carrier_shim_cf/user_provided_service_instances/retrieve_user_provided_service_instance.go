// Code generated by go-swagger; DO NOT EDIT.

package user_provided_service_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RetrieveUserProvidedServiceInstanceHandlerFunc turns a function with the right signature into a retrieve user provided service instance handler
type RetrieveUserProvidedServiceInstanceHandlerFunc func(RetrieveUserProvidedServiceInstanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveUserProvidedServiceInstanceHandlerFunc) Handle(params RetrieveUserProvidedServiceInstanceParams) middleware.Responder {
	return fn(params)
}

// RetrieveUserProvidedServiceInstanceHandler interface for that can handle valid retrieve user provided service instance params
type RetrieveUserProvidedServiceInstanceHandler interface {
	Handle(RetrieveUserProvidedServiceInstanceParams) middleware.Responder
}

// NewRetrieveUserProvidedServiceInstance creates a new http.Handler for the retrieve user provided service instance operation
func NewRetrieveUserProvidedServiceInstance(ctx *middleware.Context, handler RetrieveUserProvidedServiceInstanceHandler) *RetrieveUserProvidedServiceInstance {
	return &RetrieveUserProvidedServiceInstance{Context: ctx, Handler: handler}
}

/*RetrieveUserProvidedServiceInstance swagger:route GET /user_provided_service_instances/{guid} userProvidedServiceInstances retrieveUserProvidedServiceInstance

Retrieve a Particular User Provided Service Instance

curl --insecure -i %s/v2/user_provided_service_instances/{guid} -X GET -H 'Authorization: %s'

*/
type RetrieveUserProvidedServiceInstance struct {
	Context *middleware.Context
	Handler RetrieveUserProvidedServiceInstanceHandler
}

func (o *RetrieveUserProvidedServiceInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveUserProvidedServiceInstanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
