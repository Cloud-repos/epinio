// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllStacksHandlerFunc turns a function with the right signature into a list all stacks handler
type ListAllStacksHandlerFunc func(ListAllStacksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllStacksHandlerFunc) Handle(params ListAllStacksParams) middleware.Responder {
	return fn(params)
}

// ListAllStacksHandler interface for that can handle valid list all stacks params
type ListAllStacksHandler interface {
	Handle(ListAllStacksParams) middleware.Responder
}

// NewListAllStacks creates a new http.Handler for the list all stacks operation
func NewListAllStacks(ctx *middleware.Context, handler ListAllStacksHandler) *ListAllStacks {
	return &ListAllStacks{Context: ctx, Handler: handler}
}

/*ListAllStacks swagger:route GET /stacks stacks listAllStacks

List all Stacks

curl --insecure -i %s/v2/stacks -X GET -H 'Authorization: %s'

*/
type ListAllStacks struct {
	Context *middleware.Context
	Handler ListAllStacksHandler
}

func (o *ListAllStacks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllStacksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
