// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteStackHandlerFunc turns a function with the right signature into a delete stack handler
type DeleteStackHandlerFunc func(DeleteStackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteStackHandlerFunc) Handle(params DeleteStackParams) middleware.Responder {
	return fn(params)
}

// DeleteStackHandler interface for that can handle valid delete stack params
type DeleteStackHandler interface {
	Handle(DeleteStackParams) middleware.Responder
}

// NewDeleteStack creates a new http.Handler for the delete stack operation
func NewDeleteStack(ctx *middleware.Context, handler DeleteStackHandler) *DeleteStack {
	return &DeleteStack{Context: ctx, Handler: handler}
}

/*DeleteStack swagger:route DELETE /stacks/{guid} stacks deleteStack

Delete a Particular Stack

curl --insecure -i %s/v2/stacks/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteStack struct {
	Context *middleware.Context
	Handler DeleteStackHandler
}

func (o *DeleteStack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteStackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
