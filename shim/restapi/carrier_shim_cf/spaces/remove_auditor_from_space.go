// Code generated by go-swagger; DO NOT EDIT.

package spaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveAuditorFromSpaceHandlerFunc turns a function with the right signature into a remove auditor from space handler
type RemoveAuditorFromSpaceHandlerFunc func(RemoveAuditorFromSpaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveAuditorFromSpaceHandlerFunc) Handle(params RemoveAuditorFromSpaceParams) middleware.Responder {
	return fn(params)
}

// RemoveAuditorFromSpaceHandler interface for that can handle valid remove auditor from space params
type RemoveAuditorFromSpaceHandler interface {
	Handle(RemoveAuditorFromSpaceParams) middleware.Responder
}

// NewRemoveAuditorFromSpace creates a new http.Handler for the remove auditor from space operation
func NewRemoveAuditorFromSpace(ctx *middleware.Context, handler RemoveAuditorFromSpaceHandler) *RemoveAuditorFromSpace {
	return &RemoveAuditorFromSpace{Context: ctx, Handler: handler}
}

/*RemoveAuditorFromSpace swagger:route DELETE /spaces/{guid}/auditors/{auditor_guid} spaces removeAuditorFromSpace

Remove Auditor from the Space

curl --insecure -i %s/v2/spaces/{guid}/auditors/{auditor_guid} -X DELETE -H 'Authorization: %s'

*/
type RemoveAuditorFromSpace struct {
	Context *middleware.Context
	Handler RemoveAuditorFromSpaceHandler
}

func (o *RemoveAuditorFromSpace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveAuditorFromSpaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
