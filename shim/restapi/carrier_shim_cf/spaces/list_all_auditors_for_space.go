// Code generated by go-swagger; DO NOT EDIT.

package spaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllAuditorsForSpaceHandlerFunc turns a function with the right signature into a list all auditors for space handler
type ListAllAuditorsForSpaceHandlerFunc func(ListAllAuditorsForSpaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllAuditorsForSpaceHandlerFunc) Handle(params ListAllAuditorsForSpaceParams) middleware.Responder {
	return fn(params)
}

// ListAllAuditorsForSpaceHandler interface for that can handle valid list all auditors for space params
type ListAllAuditorsForSpaceHandler interface {
	Handle(ListAllAuditorsForSpaceParams) middleware.Responder
}

// NewListAllAuditorsForSpace creates a new http.Handler for the list all auditors for space operation
func NewListAllAuditorsForSpace(ctx *middleware.Context, handler ListAllAuditorsForSpaceHandler) *ListAllAuditorsForSpace {
	return &ListAllAuditorsForSpace{Context: ctx, Handler: handler}
}

/*ListAllAuditorsForSpace swagger:route GET /spaces/{guid}/auditors spaces listAllAuditorsForSpace

List all Auditors for the Space

curl --insecure -i %s/v2/spaces/{guid}/auditors -X GET -H 'Authorization: %s'

*/
type ListAllAuditorsForSpace struct {
	Context *middleware.Context
	Handler ListAllAuditorsForSpaceHandler
}

func (o *ListAllAuditorsForSpace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllAuditorsForSpaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
