// Code generated by go-swagger; DO NOT EDIT.

package spaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllRoutesForSpaceHandlerFunc turns a function with the right signature into a list all routes for space handler
type ListAllRoutesForSpaceHandlerFunc func(ListAllRoutesForSpaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllRoutesForSpaceHandlerFunc) Handle(params ListAllRoutesForSpaceParams) middleware.Responder {
	return fn(params)
}

// ListAllRoutesForSpaceHandler interface for that can handle valid list all routes for space params
type ListAllRoutesForSpaceHandler interface {
	Handle(ListAllRoutesForSpaceParams) middleware.Responder
}

// NewListAllRoutesForSpace creates a new http.Handler for the list all routes for space operation
func NewListAllRoutesForSpace(ctx *middleware.Context, handler ListAllRoutesForSpaceHandler) *ListAllRoutesForSpace {
	return &ListAllRoutesForSpace{Context: ctx, Handler: handler}
}

/*ListAllRoutesForSpace swagger:route GET /spaces/{guid}/routes spaces listAllRoutesForSpace

List all Routes for the Space

curl --insecure -i %s/v2/spaces/{guid}/routes -X GET -H 'Authorization: %s'

*/
type ListAllRoutesForSpace struct {
	Context *middleware.Context
	Handler ListAllRoutesForSpaceHandler
}

func (o *ListAllRoutesForSpace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllRoutesForSpaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
