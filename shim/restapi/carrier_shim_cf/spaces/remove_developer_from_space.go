// Code generated by go-swagger; DO NOT EDIT.

package spaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveDeveloperFromSpaceHandlerFunc turns a function with the right signature into a remove developer from space handler
type RemoveDeveloperFromSpaceHandlerFunc func(RemoveDeveloperFromSpaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveDeveloperFromSpaceHandlerFunc) Handle(params RemoveDeveloperFromSpaceParams) middleware.Responder {
	return fn(params)
}

// RemoveDeveloperFromSpaceHandler interface for that can handle valid remove developer from space params
type RemoveDeveloperFromSpaceHandler interface {
	Handle(RemoveDeveloperFromSpaceParams) middleware.Responder
}

// NewRemoveDeveloperFromSpace creates a new http.Handler for the remove developer from space operation
func NewRemoveDeveloperFromSpace(ctx *middleware.Context, handler RemoveDeveloperFromSpaceHandler) *RemoveDeveloperFromSpace {
	return &RemoveDeveloperFromSpace{Context: ctx, Handler: handler}
}

/*RemoveDeveloperFromSpace swagger:route DELETE /spaces/{guid}/developers/{developer_guid} spaces removeDeveloperFromSpace

Remove Developer from the Space

curl --insecure -i %s/v2/spaces/{guid}/developers/{developer_guid} -X DELETE -H 'Authorization: %s'

*/
type RemoveDeveloperFromSpace struct {
	Context *middleware.Context
	Handler RemoveDeveloperFromSpaceHandler
}

func (o *RemoveDeveloperFromSpace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveDeveloperFromSpaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
