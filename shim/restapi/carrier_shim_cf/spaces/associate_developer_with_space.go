// Code generated by go-swagger; DO NOT EDIT.

package spaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AssociateDeveloperWithSpaceHandlerFunc turns a function with the right signature into a associate developer with space handler
type AssociateDeveloperWithSpaceHandlerFunc func(AssociateDeveloperWithSpaceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AssociateDeveloperWithSpaceHandlerFunc) Handle(params AssociateDeveloperWithSpaceParams) middleware.Responder {
	return fn(params)
}

// AssociateDeveloperWithSpaceHandler interface for that can handle valid associate developer with space params
type AssociateDeveloperWithSpaceHandler interface {
	Handle(AssociateDeveloperWithSpaceParams) middleware.Responder
}

// NewAssociateDeveloperWithSpace creates a new http.Handler for the associate developer with space operation
func NewAssociateDeveloperWithSpace(ctx *middleware.Context, handler AssociateDeveloperWithSpaceHandler) *AssociateDeveloperWithSpace {
	return &AssociateDeveloperWithSpace{Context: ctx, Handler: handler}
}

/*AssociateDeveloperWithSpace swagger:route PUT /spaces/{guid}/developers/{developer_guid} spaces associateDeveloperWithSpace

Associate Developer with the Space

curl --insecure -i %s/v2/spaces/{guid}/developers/{developer_guid} -X PUT -H 'Authorization: %s'

*/
type AssociateDeveloperWithSpace struct {
	Context *middleware.Context
	Handler AssociateDeveloperWithSpaceHandler
}

func (o *AssociateDeveloperWithSpace) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAssociateDeveloperWithSpaceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
