// Code generated by go-swagger; DO NOT EDIT.

package spaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllSpacesHandlerFunc turns a function with the right signature into a list all spaces handler
type ListAllSpacesHandlerFunc func(ListAllSpacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllSpacesHandlerFunc) Handle(params ListAllSpacesParams) middleware.Responder {
	return fn(params)
}

// ListAllSpacesHandler interface for that can handle valid list all spaces params
type ListAllSpacesHandler interface {
	Handle(ListAllSpacesParams) middleware.Responder
}

// NewListAllSpaces creates a new http.Handler for the list all spaces operation
func NewListAllSpaces(ctx *middleware.Context, handler ListAllSpacesHandler) *ListAllSpaces {
	return &ListAllSpaces{Context: ctx, Handler: handler}
}

/*ListAllSpaces swagger:route GET /spaces spaces listAllSpaces

List all Spaces

curl --insecure -i %s/v2/spaces -X GET -H 'Authorization: %s'

*/
type ListAllSpaces struct {
	Context *middleware.Context
	Handler ListAllSpacesHandler
}

func (o *ListAllSpaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllSpacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
