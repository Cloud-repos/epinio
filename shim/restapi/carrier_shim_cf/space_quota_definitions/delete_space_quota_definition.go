// Code generated by go-swagger; DO NOT EDIT.

package space_quota_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteSpaceQuotaDefinitionHandlerFunc turns a function with the right signature into a delete space quota definition handler
type DeleteSpaceQuotaDefinitionHandlerFunc func(DeleteSpaceQuotaDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSpaceQuotaDefinitionHandlerFunc) Handle(params DeleteSpaceQuotaDefinitionParams) middleware.Responder {
	return fn(params)
}

// DeleteSpaceQuotaDefinitionHandler interface for that can handle valid delete space quota definition params
type DeleteSpaceQuotaDefinitionHandler interface {
	Handle(DeleteSpaceQuotaDefinitionParams) middleware.Responder
}

// NewDeleteSpaceQuotaDefinition creates a new http.Handler for the delete space quota definition operation
func NewDeleteSpaceQuotaDefinition(ctx *middleware.Context, handler DeleteSpaceQuotaDefinitionHandler) *DeleteSpaceQuotaDefinition {
	return &DeleteSpaceQuotaDefinition{Context: ctx, Handler: handler}
}

/*DeleteSpaceQuotaDefinition swagger:route DELETE /space_quota_definitions/{guid} spaceQuotaDefinitions deleteSpaceQuotaDefinition

Delete a Particular Space Quota Definition

curl --insecure -i %s/v2/space_quota_definitions/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteSpaceQuotaDefinition struct {
	Context *middleware.Context
	Handler DeleteSpaceQuotaDefinitionHandler
}

func (o *DeleteSpaceQuotaDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteSpaceQuotaDefinitionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
