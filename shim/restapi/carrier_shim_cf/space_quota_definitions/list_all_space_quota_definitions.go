// Code generated by go-swagger; DO NOT EDIT.

package space_quota_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllSpaceQuotaDefinitionsHandlerFunc turns a function with the right signature into a list all space quota definitions handler
type ListAllSpaceQuotaDefinitionsHandlerFunc func(ListAllSpaceQuotaDefinitionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllSpaceQuotaDefinitionsHandlerFunc) Handle(params ListAllSpaceQuotaDefinitionsParams) middleware.Responder {
	return fn(params)
}

// ListAllSpaceQuotaDefinitionsHandler interface for that can handle valid list all space quota definitions params
type ListAllSpaceQuotaDefinitionsHandler interface {
	Handle(ListAllSpaceQuotaDefinitionsParams) middleware.Responder
}

// NewListAllSpaceQuotaDefinitions creates a new http.Handler for the list all space quota definitions operation
func NewListAllSpaceQuotaDefinitions(ctx *middleware.Context, handler ListAllSpaceQuotaDefinitionsHandler) *ListAllSpaceQuotaDefinitions {
	return &ListAllSpaceQuotaDefinitions{Context: ctx, Handler: handler}
}

/*ListAllSpaceQuotaDefinitions swagger:route GET /space_quota_definitions spaceQuotaDefinitions listAllSpaceQuotaDefinitions

List all Space Quota Definitions

curl --insecure -i %s/v2/space_quota_definitions -X GET -H 'Authorization: %s'

*/
type ListAllSpaceQuotaDefinitions struct {
	Context *middleware.Context
	Handler ListAllSpaceQuotaDefinitionsHandler
}

func (o *ListAllSpaceQuotaDefinitions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllSpaceQuotaDefinitionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
