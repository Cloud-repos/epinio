// Code generated by go-swagger; DO NOT EDIT.

package space_quota_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateSpaceQuotaDefinitionHandlerFunc turns a function with the right signature into a update space quota definition handler
type UpdateSpaceQuotaDefinitionHandlerFunc func(UpdateSpaceQuotaDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateSpaceQuotaDefinitionHandlerFunc) Handle(params UpdateSpaceQuotaDefinitionParams) middleware.Responder {
	return fn(params)
}

// UpdateSpaceQuotaDefinitionHandler interface for that can handle valid update space quota definition params
type UpdateSpaceQuotaDefinitionHandler interface {
	Handle(UpdateSpaceQuotaDefinitionParams) middleware.Responder
}

// NewUpdateSpaceQuotaDefinition creates a new http.Handler for the update space quota definition operation
func NewUpdateSpaceQuotaDefinition(ctx *middleware.Context, handler UpdateSpaceQuotaDefinitionHandler) *UpdateSpaceQuotaDefinition {
	return &UpdateSpaceQuotaDefinition{Context: ctx, Handler: handler}
}

/*UpdateSpaceQuotaDefinition swagger:route PUT /space_quota_definitions/{guid} spaceQuotaDefinitions updateSpaceQuotaDefinition

Updating a Space Quota Definition

curl --insecure -i %s/v2/space_quota_definitions/{guid} -X PUT -H 'Authorization: %s' -d '%s'

*/
type UpdateSpaceQuotaDefinition struct {
	Context *middleware.Context
	Handler UpdateSpaceQuotaDefinitionHandler
}

func (o *UpdateSpaceQuotaDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateSpaceQuotaDefinitionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
