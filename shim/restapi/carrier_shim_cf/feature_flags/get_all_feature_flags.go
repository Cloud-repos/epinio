// Code generated by go-swagger; DO NOT EDIT.

package feature_flags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAllFeatureFlagsHandlerFunc turns a function with the right signature into a get all feature flags handler
type GetAllFeatureFlagsHandlerFunc func(GetAllFeatureFlagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllFeatureFlagsHandlerFunc) Handle(params GetAllFeatureFlagsParams) middleware.Responder {
	return fn(params)
}

// GetAllFeatureFlagsHandler interface for that can handle valid get all feature flags params
type GetAllFeatureFlagsHandler interface {
	Handle(GetAllFeatureFlagsParams) middleware.Responder
}

// NewGetAllFeatureFlags creates a new http.Handler for the get all feature flags operation
func NewGetAllFeatureFlags(ctx *middleware.Context, handler GetAllFeatureFlagsHandler) *GetAllFeatureFlags {
	return &GetAllFeatureFlags{Context: ctx, Handler: handler}
}

/*GetAllFeatureFlags swagger:route GET /config/feature_flags featureFlags getAllFeatureFlags

Get all feature flags

curl --insecure -i %s/v2/config/feature_flags -X GET -H 'Authorization: %s'

*/
type GetAllFeatureFlags struct {
	Context *middleware.Context
	Handler GetAllFeatureFlagsHandler
}

func (o *GetAllFeatureFlags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllFeatureFlagsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
