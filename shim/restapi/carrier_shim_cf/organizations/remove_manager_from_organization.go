// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveManagerFromOrganizationHandlerFunc turns a function with the right signature into a remove manager from organization handler
type RemoveManagerFromOrganizationHandlerFunc func(RemoveManagerFromOrganizationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveManagerFromOrganizationHandlerFunc) Handle(params RemoveManagerFromOrganizationParams) middleware.Responder {
	return fn(params)
}

// RemoveManagerFromOrganizationHandler interface for that can handle valid remove manager from organization params
type RemoveManagerFromOrganizationHandler interface {
	Handle(RemoveManagerFromOrganizationParams) middleware.Responder
}

// NewRemoveManagerFromOrganization creates a new http.Handler for the remove manager from organization operation
func NewRemoveManagerFromOrganization(ctx *middleware.Context, handler RemoveManagerFromOrganizationHandler) *RemoveManagerFromOrganization {
	return &RemoveManagerFromOrganization{Context: ctx, Handler: handler}
}

/*RemoveManagerFromOrganization swagger:route DELETE /organizations/{guid}/managers/{manager_guid} organizations removeManagerFromOrganization

Remove Manager from the Organization

curl --insecure -i %s/v2/organizations/{guid}/managers/{manager_guid} -X DELETE -H 'Authorization: %s'

*/
type RemoveManagerFromOrganization struct {
	Context *middleware.Context
	Handler RemoveManagerFromOrganizationHandler
}

func (o *RemoveManagerFromOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveManagerFromOrganizationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
