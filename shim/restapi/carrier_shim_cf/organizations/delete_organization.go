// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteOrganizationHandlerFunc turns a function with the right signature into a delete organization handler
type DeleteOrganizationHandlerFunc func(DeleteOrganizationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteOrganizationHandlerFunc) Handle(params DeleteOrganizationParams) middleware.Responder {
	return fn(params)
}

// DeleteOrganizationHandler interface for that can handle valid delete organization params
type DeleteOrganizationHandler interface {
	Handle(DeleteOrganizationParams) middleware.Responder
}

// NewDeleteOrganization creates a new http.Handler for the delete organization operation
func NewDeleteOrganization(ctx *middleware.Context, handler DeleteOrganizationHandler) *DeleteOrganization {
	return &DeleteOrganization{Context: ctx, Handler: handler}
}

/*DeleteOrganization swagger:route DELETE /organizations/{guid} organizations deleteOrganization

Delete a Particular Organization

curl --insecure -i %s/v2/organizations/{guid} -X DELETE -H 'Authorization: %s'

*/
type DeleteOrganization struct {
	Context *middleware.Context
	Handler DeleteOrganizationHandler
}

func (o *DeleteOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteOrganizationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
