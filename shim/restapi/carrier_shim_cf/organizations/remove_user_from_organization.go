// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveUserFromOrganizationHandlerFunc turns a function with the right signature into a remove user from organization handler
type RemoveUserFromOrganizationHandlerFunc func(RemoveUserFromOrganizationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveUserFromOrganizationHandlerFunc) Handle(params RemoveUserFromOrganizationParams) middleware.Responder {
	return fn(params)
}

// RemoveUserFromOrganizationHandler interface for that can handle valid remove user from organization params
type RemoveUserFromOrganizationHandler interface {
	Handle(RemoveUserFromOrganizationParams) middleware.Responder
}

// NewRemoveUserFromOrganization creates a new http.Handler for the remove user from organization operation
func NewRemoveUserFromOrganization(ctx *middleware.Context, handler RemoveUserFromOrganizationHandler) *RemoveUserFromOrganization {
	return &RemoveUserFromOrganization{Context: ctx, Handler: handler}
}

/*RemoveUserFromOrganization swagger:route DELETE /organizations/{guid}/users/{user_guid} organizations removeUserFromOrganization

Remove User from the Organization

curl --insecure -i %s/v2/organizations/{guid}/users/{user_guid} -X DELETE -H 'Authorization: %s'

*/
type RemoveUserFromOrganization struct {
	Context *middleware.Context
	Handler RemoveUserFromOrganizationHandler
}

func (o *RemoveUserFromOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveUserFromOrganizationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
