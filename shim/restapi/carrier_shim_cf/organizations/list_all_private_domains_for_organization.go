// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAllPrivateDomainsForOrganizationHandlerFunc turns a function with the right signature into a list all private domains for organization handler
type ListAllPrivateDomainsForOrganizationHandlerFunc func(ListAllPrivateDomainsForOrganizationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAllPrivateDomainsForOrganizationHandlerFunc) Handle(params ListAllPrivateDomainsForOrganizationParams) middleware.Responder {
	return fn(params)
}

// ListAllPrivateDomainsForOrganizationHandler interface for that can handle valid list all private domains for organization params
type ListAllPrivateDomainsForOrganizationHandler interface {
	Handle(ListAllPrivateDomainsForOrganizationParams) middleware.Responder
}

// NewListAllPrivateDomainsForOrganization creates a new http.Handler for the list all private domains for organization operation
func NewListAllPrivateDomainsForOrganization(ctx *middleware.Context, handler ListAllPrivateDomainsForOrganizationHandler) *ListAllPrivateDomainsForOrganization {
	return &ListAllPrivateDomainsForOrganization{Context: ctx, Handler: handler}
}

/*ListAllPrivateDomainsForOrganization swagger:route GET /organizations/{guid}/private_domains organizations listAllPrivateDomainsForOrganization

List all Private Domains for the Organization

curl --insecure -i %s/v2/organizations/{guid}/private_domains -X GET -H 'Authorization: %s'

*/
type ListAllPrivateDomainsForOrganization struct {
	Context *middleware.Context
	Handler ListAllPrivateDomainsForOrganizationHandler
}

func (o *ListAllPrivateDomainsForOrganization) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAllPrivateDomainsForOrganizationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
