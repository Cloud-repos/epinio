// Code generated by go-swagger; DO NOT EDIT.

package service_bindings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateServiceBindingHandlerFunc turns a function with the right signature into a create service binding handler
type CreateServiceBindingHandlerFunc func(CreateServiceBindingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateServiceBindingHandlerFunc) Handle(params CreateServiceBindingParams) middleware.Responder {
	return fn(params)
}

// CreateServiceBindingHandler interface for that can handle valid create service binding params
type CreateServiceBindingHandler interface {
	Handle(CreateServiceBindingParams) middleware.Responder
}

// NewCreateServiceBinding creates a new http.Handler for the create service binding operation
func NewCreateServiceBinding(ctx *middleware.Context, handler CreateServiceBindingHandler) *CreateServiceBinding {
	return &CreateServiceBinding{Context: ctx, Handler: handler}
}

/*CreateServiceBinding swagger:route POST /service_bindings serviceBindings createServiceBinding

Create a Service Binding

curl --insecure -i %s/v2/service_bindings -X POST -H 'Authorization: %s' -d '%s'

*/
type CreateServiceBinding struct {
	Context *middleware.Context
	Handler CreateServiceBindingHandler
}

func (o *CreateServiceBinding) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateServiceBindingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
