// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LockOrUnlockBuildpackRequest lock or unlock buildpack request
//
// swagger:model lockOrUnlockBuildpackRequest
type LockOrUnlockBuildpackRequest struct {

	// Whether or not the buildpack will be used for staging
	Enabled GenericObject `json:"enabled,omitempty"`

	// The name of the uploaded buildpack file
	Filename GenericObject `json:"filename,omitempty"`

	// Whether or not the buildpack is locked to prevent updates
	Locked bool `json:"locked,omitempty"`

	// The name of the buildpack. To be used by app buildpack field. (only alphanumeric characters)
	Name string `json:"name,omitempty"`

	// The order in which the buildpacks are checked during buildpack auto-detection.
	Position GenericObject `json:"position,omitempty"`
}

// Validate validates this lock or unlock buildpack request
func (m *LockOrUnlockBuildpackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LockOrUnlockBuildpackRequest) validateEnabled(formats strfmt.Registry) error {

	if swag.IsZero(m.Enabled) { // not required
		return nil
	}

	if err := m.Enabled.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enabled")
		}
		return err
	}

	return nil
}

func (m *LockOrUnlockBuildpackRequest) validateFilename(formats strfmt.Registry) error {

	if swag.IsZero(m.Filename) { // not required
		return nil
	}

	if err := m.Filename.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("filename")
		}
		return err
	}

	return nil
}

func (m *LockOrUnlockBuildpackRequest) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := m.Position.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("position")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LockOrUnlockBuildpackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LockOrUnlockBuildpackRequest) UnmarshalBinary(b []byte) error {
	var res LockOrUnlockBuildpackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
