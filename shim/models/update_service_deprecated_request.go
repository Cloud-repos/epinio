// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateServiceDeprecatedRequest update service deprecated request
//
// swagger:model updateServiceDeprecatedRequest
type UpdateServiceDeprecatedRequest struct {

	// A boolean describing that the service can be provisioned by users
	Active GenericObject `json:"active,omitempty"`

	// A boolean describing that the service can be bound to applications
	Bindable GenericObject `json:"bindable,omitempty"`

	// A short blurb describing the service
	Description string `json:"description,omitempty"`

	// A url that points to a documentation page for the service
	DocumentationURL string `json:"documentation_url,omitempty"`

	// A JSON field with extra data pertaining to the service
	Extra string `json:"extra,omitempty"`

	// The guid of the service
	GUID string `json:"guid,omitempty"`

	// A url that points to an info page for the service
	InfoURL string `json:"info_url,omitempty"`

	// The name of the service
	Label string `json:"label,omitempty"`

	// A longer description of the service
	LongDescription string `json:"long_description,omitempty"`

	// The name of the service provider (used only by v1 service gateways)
	Provider string `json:"provider,omitempty"`

	// A list of dependencies for services
	Requires string `json:"requires,omitempty"`

	// The guid of the v2 service broker associated with the service
	ServiceBrokerGUID string `json:"service_broker_guid,omitempty"`

	// A list of tags for the service
	Tags string `json:"tags,omitempty"`

	// A timeout used by the v1 service gateway client
	Timeout GenericObject `json:"timeout,omitempty"`

	// A guid that identifies the service with the broker (not the same as the guid above)
	UniqueID GenericObject `json:"unique_id,omitempty"`

	// The url of ther service provider (used only by v1 service gateways)
	URL string `json:"url,omitempty"`

	// The version of the service (used only by v1 service gateways)
	Version string `json:"version,omitempty"`
}

// Validate validates this update service deprecated request
func (m *UpdateServiceDeprecatedRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBindable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceDeprecatedRequest) validateActive(formats strfmt.Registry) error {

	if swag.IsZero(m.Active) { // not required
		return nil
	}

	if err := m.Active.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("active")
		}
		return err
	}

	return nil
}

func (m *UpdateServiceDeprecatedRequest) validateBindable(formats strfmt.Registry) error {

	if swag.IsZero(m.Bindable) { // not required
		return nil
	}

	if err := m.Bindable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bindable")
		}
		return err
	}

	return nil
}

func (m *UpdateServiceDeprecatedRequest) validateTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := m.Timeout.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeout")
		}
		return err
	}

	return nil
}

func (m *UpdateServiceDeprecatedRequest) validateUniqueID(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueID) { // not required
		return nil
	}

	if err := m.UniqueID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unique_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceDeprecatedRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceDeprecatedRequest) UnmarshalBinary(b []byte) error {
	var res UpdateServiceDeprecatedRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
