// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListAllUserProvidedServiceInstancesResponse list all user provided service instances response
//
// swagger:model listAllUserProvidedServiceInstancesResponse
type ListAllUserProvidedServiceInstancesResponse struct {

	// The credentials
	Credentials GenericObject `json:"credentials,omitempty"`

	// The name
	Name string `json:"name,omitempty"`

	// The service Bindings Url
	ServiceBindingsURL string `json:"service_bindings_url,omitempty"`

	// The space Guid
	SpaceGUID string `json:"space_guid,omitempty"`

	// The space Url
	SpaceURL string `json:"space_url,omitempty"`

	// The syslog Drain Url
	SyslogDrainURL string `json:"syslog_drain_url,omitempty"`

	// The type
	Type string `json:"type,omitempty"`
}

// Validate validates this list all user provided service instances response
func (m *ListAllUserProvidedServiceInstancesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListAllUserProvidedServiceInstancesResponse) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if err := m.Credentials.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("credentials")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListAllUserProvidedServiceInstancesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListAllUserProvidedServiceInstancesResponse) UnmarshalBinary(b []byte) error {
	var res ListAllUserProvidedServiceInstancesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
