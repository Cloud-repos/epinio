// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateServicePlanDeprecatedRequest update service plan deprecated request
//
// swagger:model updateServicePlanDeprecatedRequest
type UpdateServicePlanDeprecatedRequest struct {

	// A boolean that determines whether plans can be used to create new instances.
	Active bool `json:"active,omitempty"`

	// A description of the service plan
	Description string `json:"description,omitempty"`

	// A JSON string with additional data about the plan
	Extra string `json:"extra,omitempty"`

	// A boolean describing if the service plan is free
	Free bool `json:"free,omitempty"`

	// The guid of the service plan
	GUID string `json:"guid,omitempty"`

	// The name of the service plan
	Name string `json:"name,omitempty"`

	// A boolean describing that the plan is visible to the all users
	Public GenericObject `json:"public,omitempty"`

	// The guid of the related service
	ServiceGUID string `json:"service_guid,omitempty"`

	// A guid for the service plan in the service broker (not the same as the cloud controller guid)
	UniqueID GenericObject `json:"unique_id,omitempty"`
}

// Validate validates this update service plan deprecated request
func (m *UpdateServicePlanDeprecatedRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServicePlanDeprecatedRequest) validatePublic(formats strfmt.Registry) error {

	if swag.IsZero(m.Public) { // not required
		return nil
	}

	if err := m.Public.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("public")
		}
		return err
	}

	return nil
}

func (m *UpdateServicePlanDeprecatedRequest) validateUniqueID(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueID) { // not required
		return nil
	}

	if err := m.UniqueID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unique_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServicePlanDeprecatedRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServicePlanDeprecatedRequest) UnmarshalBinary(b []byte) error {
	var res UpdateServicePlanDeprecatedRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
