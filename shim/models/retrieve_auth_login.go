// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetrieveAuthLogin retrieve auth login
//
// swagger:model retrieveAuthLogin
type RetrieveAuthLogin struct {

	// app
	App *RetrieveAuthLoginApp `json:"app,omitempty"`

	// The GIT sha for the UAA version
	CommitID string `json:"commit_id,omitempty"`

	// The UAA is always a SAML service provider. This field contains the configured entityID
	EntityID string `json:"entityID,omitempty"`

	// Object  A list of alias/url pairs of SAML IDP providers configured. Each url is the starting point to initiate the authentication process for the SAML identity provider.
	IdpDefinitions interface{} `json:"idpDefinitions,omitempty"`

	// links
	Links *RetrieveAuthLoginLinks `json:"links,omitempty"`

	// prompts
	Prompts *RetrieveAuthLoginPrompts `json:"prompts,omitempty"`

	// Set to true if there are SAML or OAUTH/OIDC providers with a visible link on the login page.
	ShowLoginLinks bool `json:"showLoginLinks,omitempty"`

	// JSON timestamp for the commit of the UAA version
	Timestamp string `json:"timestamp,omitempty"`

	// The name of the zone invoked
	ZoneName string `json:"zone_name,omitempty"`
}

// Validate validates this retrieve auth login
func (m *RetrieveAuthLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrompts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveAuthLogin) validateApp(formats strfmt.Registry) error {

	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *RetrieveAuthLogin) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *RetrieveAuthLogin) validatePrompts(formats strfmt.Registry) error {

	if swag.IsZero(m.Prompts) { // not required
		return nil
	}

	if m.Prompts != nil {
		if err := m.Prompts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prompts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveAuthLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveAuthLogin) UnmarshalBinary(b []byte) error {
	var res RetrieveAuthLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RetrieveAuthLoginApp retrieve auth login app
//
// swagger:model RetrieveAuthLoginApp
type RetrieveAuthLoginApp struct {

	// The version of the auth server
	Version string `json:"version,omitempty"`
}

// Validate validates this retrieve auth login app
func (m *RetrieveAuthLoginApp) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveAuthLoginApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveAuthLoginApp) UnmarshalBinary(b []byte) error {
	var res RetrieveAuthLoginApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RetrieveAuthLoginLinks A list of alias/url pairs of configured action URLs for the UAA
//
// swagger:model RetrieveAuthLoginLinks
type RetrieveAuthLoginLinks struct {

	// The link to the login host alias of the UAA
	Login string `json:"login,omitempty"`

	// The link to the 'Forgot Password' functionality. Can be external or internal to the UAA
	Passwd string `json:"passwd,omitempty"`

	// The link to the 'Create Account' functionality. Can be external or internal to the UAA
	Register string `json:"register,omitempty"`

	// The link to the uaa alias host of the UAA
	Uaa string `json:"uaa,omitempty"`
}

// Validate validates this retrieve auth login links
func (m *RetrieveAuthLoginLinks) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveAuthLoginLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveAuthLoginLinks) UnmarshalBinary(b []byte) error {
	var res RetrieveAuthLoginLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RetrieveAuthLoginPrompts A list of name/value pairs of configured prompts that the UAA will login a user. Format for each prompt is [type, display name] where type can be 'text' or 'password'
//
// swagger:model RetrieveAuthLoginPrompts
type RetrieveAuthLoginPrompts struct {

	// If a SAML identity provider is configured, this prompt contains a URL to where the user can initiate the SAML authentication flow.
	Passcode []interface{} `json:"passcode,omitempty"`

	// Information about the password prompt.
	Password []interface{} `json:"password,omitempty"`

	// Information about the username prompt.
	Username []interface{} `json:"username,omitempty"`
}

// Validate validates this retrieve auth login prompts
func (m *RetrieveAuthLoginPrompts) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveAuthLoginPrompts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveAuthLoginPrompts) UnmarshalBinary(b []byte) error {
	var res RetrieveAuthLoginPrompts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
