// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetEnvForAppResponse get env for app response
//
// swagger:model getEnvForAppResponse
type GetEnvForAppResponse struct {

	// The application Env Json
	ApplicationEnvJSON GenericObject `json:"application_env_json,omitempty"`

	// The environment Json
	EnvironmentJSON GenericObject `json:"environment_json,omitempty"`

	// The running Env Json
	RunningEnvJSON GenericObject `json:"running_env_json,omitempty"`

	// The staging Env Json
	StagingEnvJSON GenericObject `json:"staging_env_json,omitempty"`

	// The system Env Json
	SystemEnvJSON GenericObject `json:"system_env_json,omitempty"`
}

// Validate validates this get env for app response
func (m *GetEnvForAppResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationEnvJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningEnvJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStagingEnvJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemEnvJSON(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEnvForAppResponse) validateApplicationEnvJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationEnvJSON) { // not required
		return nil
	}

	if err := m.ApplicationEnvJSON.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("application_env_json")
		}
		return err
	}

	return nil
}

func (m *GetEnvForAppResponse) validateEnvironmentJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.EnvironmentJSON) { // not required
		return nil
	}

	if err := m.EnvironmentJSON.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("environment_json")
		}
		return err
	}

	return nil
}

func (m *GetEnvForAppResponse) validateRunningEnvJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.RunningEnvJSON) { // not required
		return nil
	}

	if err := m.RunningEnvJSON.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("running_env_json")
		}
		return err
	}

	return nil
}

func (m *GetEnvForAppResponse) validateStagingEnvJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.StagingEnvJSON) { // not required
		return nil
	}

	if err := m.StagingEnvJSON.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("staging_env_json")
		}
		return err
	}

	return nil
}

func (m *GetEnvForAppResponse) validateSystemEnvJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemEnvJSON) { // not required
		return nil
	}

	if err := m.SystemEnvJSON.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("system_env_json")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEnvForAppResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEnvForAppResponse) UnmarshalBinary(b []byte) error {
	var res GetEnvForAppResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
